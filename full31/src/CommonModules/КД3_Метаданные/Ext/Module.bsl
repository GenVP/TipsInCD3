// Создает дополнительные реквизиты для контекстной подсказки, создает на закладках обработчиков 
// элементы выбора конфигураций (источника или приемника) и поля HTML-документов
//
// Параметры:
//  Форма
//  Отказ
//  ЭтоКонвертацияXDTO
//  Обработчики - Массив - массив имен реквизитов с текстом обработчиков
//  СтраницыОбработчиков
//
Процедура ПриСозданииНаСервере(Форма, Отказ, ЭтоКонвертацияXDTO, Обработчики, СтраницыОбработчиков) Экспорт
	
	ДобавитьРеквизитыФормы(Форма, ЭтоКонвертацияXDTO, Обработчики);
	
	ДоступныеКонфигурации = ДоступныеКонфигурации(Форма, ЭтоКонвертацияXDTO);
	
	Если ДоступныеКонфигурации.КонфигурацияЕстьНаФорме Тогда
		// Это открытие формы справочника "Конвертации"
		Форма.КД3_Конфигурация = ДоступныеКонфигурации.Конфигурация;
		Если НЕ ЭтоКонвертацияXDTO Тогда
			Форма.КД3_КонфигурацияКорреспондент = ДоступныеКонфигурации.КонфигурацияКорреспондент;
		КонецЕсли;
	Иначе
		ДобавитьЭлементыКонфигураций(Форма, ЭтоКонвертацияXDTO, СтраницыОбработчиков);
		УстановитьВидимостьКонфигураций(ДоступныеКонфигурации, ЭтоКонвертацияXDTO, Форма);
		
		Если ДоступныеКонфигурации.Конфигурация.Количество() > 0 Тогда
			 Форма.КД3_Конфигурация = ДоступныеКонфигурации.Конфигурация[0];
		КонецЕсли;
		Если ДоступныеКонфигурации.КонфигурацияКорреспондент.Количество() > 0 Тогда
			 Форма.КД3_КонфигурацияКорреспондент = ДоступныеКонфигурации.КонфигурацияКорреспондент[0];
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЭлементыОбработчиков(Форма, Обработчики, СтраницыОбработчиков);
	
	СтраницыОбработчиков.УстановитьДействие("ПриСменеСтраницы", "КД3_Подключаемый_ОбработчикиПриСменеСтраницы");
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормы(Форма, ЭтоКонвертацияXDTO, Обработчики)
	
	ДобавляемыРеквизиты = Новый Массив;
	ДобавляемыРеквизиты.Добавить(Новый РеквизитФормы("КД3_Обработчики", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыРеквизиты.Добавить(Новый РеквизитФормы("КД3_СтраницыОбработчиков", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыРеквизиты.Добавить(Новый РеквизитФормы("КД3_Конфигурация", Новый ОписаниеТипов("СправочникСсылка.Релизы")));
	Если НЕ ЭтоКонвертацияXDTO Тогда
		ДобавляемыРеквизиты.Добавить(Новый РеквизитФормы("КД3_КонфигурацияКорреспондент", Новый ОписаниеТипов("СправочникСсылка.Релизы")));
	КонецЕсли;
	// Обработчики добавлены на форму вручную, так как не работает программное отключение контекстного меню
	//ТипСтрока = Новый ОписаниеТипов("Строка");
	//Для Каждого ЭлементСписка Из Обработчики Цикл
	//	ДобавляемыРеквизиты.Добавить(Новый РеквизитФормы("КД3_" + ЭлементСписка.Значение, ТипСтрока));
	//КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыРеквизиты, Новый Массив);
	
КонецПроцедуры

Процедура ДобавитьЭлементыОбработчиков(Форма, Обработчики, СтраницыОбработчиков)
	
	Для Каждого ЭлементСписка Из Обработчики Цикл
		
		ИмяОбработчика = ЭлементСписка.Значение;
		ДляКорреспондента = ЭлементСписка.Пометка;
		
		ЭлементЭталон = Форма.Элементы[ИмяОбработчика];
		ЭлементЭталон.Видимость = Ложь;
		
		// Обработчики добавлены на форму вручную, так как не работает программное отключение контекстного меню
		//Элемент = Форма.Элементы.Добавить("КД3_" + ИмяОбработчика, Тип("ПолеФормы"), ЭлементЭталон.Родитель);
		//Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		//Элемент.ПутьКДанным = "КД3_" + ИмяОбработчика;
		//Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент = Форма.Элементы["КД3_" + ИмяОбработчика];
		Элемент.Видимость = Истина;
		Элемент.УстановитьДействие("ДокументСформирован", "КД3_Подключаемый_ДокументСформирован");
		Элемент.УстановитьДействие("ПриНажатии", "КД3_Подключаемый_HTMLПриНажатии");
		Элемент.ТолькоПросмотр = ЭлементЭталон.ТолькоПросмотр;
		
		Форма.КД3_Обработчики.Добавить(ИмяОбработчика, ЭлементСписка.Представление, ДляКорреспондента);
		
		Владелец = ЭлементЭталон.Родитель;
		Если ТипЗнч(Владелец) = Тип("ГруппаФормы") Тогда
			Форма.КД3_СтраницыОбработчиков.Добавить(Владелец.Имя, ИмяОбработчика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьФайлМакетаИсходников() Экспорт
	Возврат ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("КД3_src"));
КонецФункции

Функция ПодкаталогИсходников() Экспорт
	
	// Получение уникального идентификатора текущей ИБ
	УИД_ИБ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("КД3", "УИД_ИБ");
	Если УИД_ИБ = Неопределено Тогда
		УИД_ИБ = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("КД3", УИД_ИБ, "УИД_ИБ");
	КонецЕсли;
	
	КаталогИсходников = "bsl_console" + СтрЗаменить(Метаданные.ОбщиеМакеты.КД3_src.Комментарий, ".", "") + "_" + УИД_ИБ;
	
	Возврат КаталогИсходников;
	
КонецФункции

Функция ЗагрузитьНастройки() Экспорт
	
	Настройки = НастройкиПоУмолчанию();
	Для Каждого КлючИЗначение Из Настройки Цикл
		НовоеЗначение = ХранилищеОбщихНастроек.Загрузить(Настройки.КлючНастроек, КлючИЗначение.Ключ);
		Если НовоеЗначение <> Неопределено Тогда
			Настройки.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Процедура СохранитьНастройки(ТекущиеНастройки) Экспорт
	
	Настройки = НастройкиПоУмолчанию();
	ЗаполнитьЗначенияСвойств(Настройки, ТекущиеНастройки);
	Для Каждого КлючИЗначение Из Настройки Цикл
		ХранилищеОбщихНастроек.Сохранить(Настройки.КлючНастроек, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиПоУмолчанию() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("КлючНастроек", "КД3_Настройки");
	Настройки.Вставить("Тема", "bsl-white");
	Настройки.Вставить("НеОтображатьКартуКода", Ложь);
	Настройки.Вставить("ПодсветкаЯзыкаЗапросов", Ложь);
	Настройки.Вставить("УдалятьВременныеФайлыПриЗакрытии", Истина);
	Возврат Настройки;
КонецФункции

// Вызывается при изменения конвертаций в которые входит объект
// Изменяет доступные для выбора конфигурации, связанные с подсказкой
//
// Параметры:
//  Форма
//  ЭтоКонвертацияXDTO
//
Процедура ПриИзмененииКонвертаций(Форма, ЭтоКонвертацияXDTO) Экспорт
	
	ДоступныеКонфигурации = ДоступныеКонфигурации(Форма, ЭтоКонвертацияXDTO);
	УстановитьВидимостьКонфигураций(ДоступныеКонфигурации, ЭтоКонвертацияXDTO, Форма);
	
	Если ДоступныеКонфигурации.Конфигурация.Найти(Форма.КД3_Конфигурация) = Неопределено Тогда
		Форма.КД3_Конфигурация = Справочники.Релизы.ПустаяСсылка();
	КонецЕсли;
	Если НЕ ЭтоКонвертацияXDTO Тогда
		Если ДоступныеКонфигурации.КонфигурацияКорреспондент.Найти(Форма.КД3_КонфигурацияКорреспондент) = Неопределено Тогда
			Форма.КД3_КонфигурацияКорреспондент = Справочники.Релизы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеКонфигурации(Форма, ЭтоКонвертацияXDTO)
	
	ПроверкаРеквизита = Новый Структура("СписокКонвертаций,ОбъектКонфигурации,ОбъектКонфигурацииКорреспондент,Конфигурация");
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Форма);
	Если ПроверкаРеквизита.СписокКонвертаций = Неопределено И ПроверкаРеквизита.ОбъектКонфигурации = Неопределено Тогда
		ДоступныеКонфигурации = Новый Структура;
		ДоступныеКонфигурации.Вставить("КонфигурацияЕстьНаФорме", Истина);
		Если ПроверкаРеквизита.Конфигурация = Неопределено Тогда
			// Это открытие формы справочника "Конвертации"
			ДоступныеКонфигурации.Вставить("Конфигурация", Форма.Объект.Конфигурация);
			Если НЕ ЭтоКонвертацияXDTO Тогда
				ДоступныеКонфигурации.Вставить("КонфигурацияКорреспондент", Форма.Объект.КонфигурацияКорреспондент);
			КонецЕсли;
		Иначе
			// Это открытие формы справочника "ПравилаРегистрацииОбъектов"
			ДоступныеКонфигурации.Вставить("Конфигурация", Форма.Конфигурация);
			ДоступныеКонфигурации.Вставить("КонфигурацияКорреспондент");
		КонецЕсли;
	Иначе
		Если ПроверкаРеквизита.СписокКонвертаций = Неопределено Тогда
			// Это открытие формы ПравилаКонвертацииСвойств
			ПроверкаРеквизита.СписокКонвертаций = Новый СписокЗначений;
			КонвертацияДанныхXDTOВызовСервера.ПолучитьВхожденияВКонвертацииДляЭлементаКонвертации(Форма.Объект.Владелец, ПроверкаРеквизита.СписокКонвертаций);
		КонецЕсли;
		ДоступныеКонфигурации = ПолучитьКонфигурации(ПроверкаРеквизита.СписокКонвертаций, ЭтоКонвертацияXDTO);
		ДоступныеКонфигурации.Вставить("КонфигурацияЕстьНаФорме", Ложь);
	КонецЕсли;
	
	Возврат ДоступныеКонфигурации;
	
КонецФункции

Процедура ДобавитьЭлементыКонфигураций(Форма, ЭтоКонвертацияXDTO, СтраницыОбработчиков)
	
	ЭлементГруппа = Форма.Элементы.Вставить("КД3_ГруппаКонфигурация", Тип("ГруппаФормы"), СтраницыОбработчиков.Родитель, СтраницыОбработчиков);
	ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ЭлементГруппа.Заголовок = "Контекстная подсказка";
	
	Элемент = Форма.Элементы.Добавить("КД3_Конфигурация", Тип("ПолеФормы"), ЭлементГруппа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "КД3_Конфигурация";
	Элемент.УстановитьДействие("ПриИзменении", "КД3_Подключаемый_ПриИзмененииКонфигурации");
	Элемент.РежимВыбораИзСписка = Истина;
	
	Если ЭтоКонвертацияXDTO Тогда
		Элемент.Заголовок = "Конфигурация";
	Иначе
		Элемент.Заголовок = "Конфигурация источник";
		
		ЭлементКорреспондент = Форма.Элементы.Добавить("КД3_КонфигурацияКорреспондент", Тип("ПолеФормы"), ЭлементГруппа);
		ЭлементКорреспондент.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКорреспондент.ПутьКДанным = "КД3_КонфигурацияКорреспондент";
		ЭлементКорреспондент.Заголовок = "Конфигурация приемник";
		ЭлементКорреспондент.УстановитьДействие("ПриИзменении", "КД3_Подключаемый_ПриИзмененииКонфигурацииКорреспондента");
		ЭлементКорреспондент.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКонфигураций(ДоступныеКонфигурации, ЭтоКонвертацияXDTO, Форма)
	
	Элемент = Форма.Элементы.КД3_Конфигурация;
	Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеКонфигурации.Конфигурация);
	Элемент.ТолькоПросмотр = ДоступныеКонфигурации.Конфигурация.Количество() = 1;
	
	ВидимостьГруппы = НЕ Элемент.ТолькоПросмотр;
	
	Если НЕ ЭтоКонвертацияXDTO Тогда
		ЭлементКорреспондент = Форма.Элементы.КД3_КонфигурацияКорреспондент;
		ЭлементКорреспондент.СписокВыбора.ЗагрузитьЗначения(ДоступныеКонфигурации.КонфигурацияКорреспондент);
		ЭлементКорреспондент.ТолькоПросмотр = ДоступныеКонфигурации.КонфигурацияКорреспондент.Количество() = 1;
		ВидимостьГруппы = ВидимостьГруппы ИЛИ НЕ ЭлементКорреспондент.ТолькоПросмотр;
	КонецЕсли;
	
	Форма.Элементы.КД3_ГруппаКонфигурация.Видимость = ВидимостьГруппы;
	
КонецПроцедуры

// Возвращает конфигурации в переданном список конвертаций
//
// Параметры:
//  СписокКонвертаций - СписокЗначений - список конвертаций
//
// Возвращаемое значение:
//  Структура - конфигурации конвертаций
//
Функция ПолучитьКонфигурации(СписокКонвертаций, ЭтоКонвертацияXDTO) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Конвертации.Конфигурация КАК Конфигурация
	|ИЗ
	|	Справочник.Конвертации КАК Конвертации
	|ГДЕ
	|	Конвертации.Ссылка В(&СписокКонвертаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Конвертации.КонфигурацияКорреспондент КАК Конфигурация
	|ИЗ
	|	Справочник.Конвертации КАК Конвертации
	|ГДЕ
	|	НЕ &ЭтоКонвертацияXDTO
	|	И Конвертации.Ссылка В(&СписокКонвертаций)";
	Запрос.УстановитьПараметр("ЭтоКонвертацияXDTO", ЭтоКонвертацияXDTO);
	Запрос.УстановитьПараметр("СписокКонвертаций", СписокКонвертаций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Конфигурации = Новый Структура;
	
	Конфигурации.Вставить("Конфигурация", РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Конфигурация"));
	Конфигурации.Вставить("КонфигурацияКорреспондент", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Конфигурация"));
	
	Возврат Конфигурации;
	
КонецФункции

Функция ОписаниеМетаданныхПоЗапросу(Конфигурация, ПолноеИмяМетаданных) Экспорт
	
	ОписаниеМетаданных = Новый Структура;
	
	ЧастиИмени = СтрРазделить(ПолноеИмяМетаданных, ".");
	КорневойТип = НРег(ЧастиИмени[0]);
	
	Если ЧастиИмени.Количество() = 1 Тогда
		ОписаниеКоллекции = ОписатьКоллекциюОбъектовМетаданных(Конфигурация, КорневойТип);
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
		ОписаниеКоллекции = ОписатьОбъектМетаданых(Конфигурация, КорневойТип, ИмяОбъекта);
		// Обновление реального имени объекта
		ЧастиИмени[1] = ИмяОбъекта;
	КонецЕсли;
	
	Попытка
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		ЗаписатьJSON(Файл, ОписаниеКоллекции);
		МетаданныеJSON = Файл.Закрыть();
	Исключение
		МетаданныеJSON = "";
		ТекстСообщения = "Не удалось получить метаданных конфигурации:" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	ЧастиИмени[0] = ИмяКоллекцииПоКорневомуТипу(КорневойТип);
	ЧастиИмени.Вставить(1, "items");
	ПутьМетаданных = СтрСоединить(ЧастиИмени, ".");
	
	ОписаниеМетаданных.Вставить("МетаданныеJSON", МетаданныеJSON);
	ОписаниеМетаданных.Вставить("ПутьМетаданных", ПутьМетаданных);
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

Функция ОписатьКоллекциюОбъектовМетаданных(Конфигурация, КорневойТип)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Имя КАК Имя
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.Владелец = &Конфигурация
	|	И Объекты.Тип = &ТипОбъекта
	|	И НЕ Объекты.ПометкаУдаления";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъектаПоКорневомуТипу(КорневойТип));
	
	ОписаниеКоллекции = Новый Структура;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеКоллекции.Вставить(Выборка.Имя, Новый Структура);
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ОписатьОбъектМетаданых(Конфигурация, КорневойТип, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Имя КАК Имя,
	|	Объекты.Периодичность КАК Периодичность
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.Владелец = &Конфигурация
	|	И Объекты.Тип = &ТипОбъекта
	|	И Объекты.Имя = &ИмяОбъекта
	|	И НЕ ПометкаУдаления";
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъектаПоКорневомуТипу(КорневойТип));
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	
	ВыборкаОбъект = Запрос.Выполнить().Выбрать();
	Если НЕ ВыборкаОбъект.Следующий() Тогда
		ТекстСообщения = СтрШаблон(
			"Не найден элемент справочника ""Объекты"" для:
			|	Конфигурация: %1
			|	Тип объекта: %2
			|	Имя объекта: %3",
			Конфигурация, ТипОбъектаПоКорневомуТипу(КорневойТип), ИмяОбъекта);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Возврат реального имени объекта, так как оно было получено в нижнем регистре
	ИмяОбъекта = ВыборкаОбъект.Имя;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Значения.Наименование КАК Наименование,
	|	Значения.Синоним КАК Синоним
	|ИЗ
	|	Справочник.Значения КАК Значения
	|ГДЕ
	|	Значения.Владелец = &Объект
	|	И НЕ Значения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Свойства.Ссылка КАК Ссылка,
	|	Свойства.Родитель КАК Родитель,
	|	Свойства.Вид КАК Вид,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним
	|ИЗ
	|	Справочник.Свойства КАК Свойства
	|ГДЕ
	|	Свойства.Владелец = &Объект
	|	И Свойства.Вид В(&ВидыСвойств)
	|	И НЕ ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойства.ЭтоГруппа УБЫВ";
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Реквизит);
	Если КорневойТипРегистра(КорневойТип) Тогда
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Измерение);
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Ресурс);
	КонецЕсли;
	Если КорневойТипТЧ(КорневойТип) Тогда
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.ТабличнаяЧасть);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", ВыборкаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидыСвойств", ВидыСвойств);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоответствиеТабЧастей = Новый Соответствие;
	
	ДополнительныеСвойства = Новый Структура;
	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРесурсов = Новый Структура;
	ОписаниеПредопределенных = Новый Структура;
	ОписаниеТабЧастей = Новый Структура;
	
	Если КорневойТипЗначений(КорневойТип) Тогда
		ВыборкаЗначений = РезультатЗапроса[0].Выбрать();
		Пока ВыборкаЗначений.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаЗначений.Наименование) Тогда
				ОписаниеПредопределенных.Вставить(ВыборкаЗначений.Наименование);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТипРегистра(ДополнительныеСвойства, ВыборкаОбъект, КорневойТип);
	
	ВыборкаСвойств = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаСвойств.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаСвойств.Родитель) Тогда
			КоллекцияДляДобавления = СоответствиеТабЧастей[ВыборкаСвойств.Родитель];
			ОписаниеСвойства = Новый Структура("name", ВыборкаСвойств.Синоним);
		Иначе
			КоллекцияДляДобавления = ?(ВыборкаСвойств.Вид = Перечисления.ВидыСвойств.Ресурс, ОписаниеРесурсов, ОписаниеРеквизитов);
			Если ВыборкаСвойств.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
				ОписаниеТабЧасти = Новый Структура;
				ОписаниеТабЧастей.Вставить(ВыборкаСвойств.Наименование, ОписаниеТабЧасти);
				СоответствиеТабЧастей.Вставить(ВыборкаСвойств.Ссылка, ОписаниеТабЧасти);
				
				ОписаниеСвойства = Новый Структура("name", "ТЧ: " + ВыборкаСвойств.Синоним);
			Иначе
				ОписаниеСвойства = Новый Структура("name", ВыборкаСвойств.Синоним);
			КонецЕсли;
		КонецЕсли;
		КоллекцияДляДобавления.Вставить(ВыборкаСвойств.Наименование, ОписаниеСвойства);
	КонецЦикла;
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	СтруктураОбъекта.Вставить("tabulars", ОписаниеТабЧастей);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, КорневойТип)
	
	ТипРегистра = "";
	
	//Если КорневойТип = "регистрысведений" Тогда
	//	
	//	Если ОбъектМетаданных.Периодичность = "Непериодический" Тогда
	//		ТипРегистра = "nonperiodical";
	//	Иначе
	//		ТипРегистра = "periodical";
	//	КонецЕсли;
	//	
	//ИначеЕсли КорневойТип = "регистрынакопления" Тогда
	//	
	//	Если ОбъектМетаданных.Периодичность = "Остатки" Тогда
	//		ТипРегистра = "balance";
	//	Иначе
	//		ТипРегистра = "turnovers";
	//	КонецЕсли;
	//	
	//ИначеЕсли КорневойТип = "регистрырасчета" Тогда
	//	
	//	Если ОбъектМетаданных.Периодичность = "ПериодДействия" Тогда
	//		ТипРегистра = "action_period";
	//	Иначе
	//		ТипРегистра = "noaction_period";
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

Функция КорневойТипЗначений(КорневойТип) // ПовтИсп
	
	Возврат КорневойТип = "перечисления" ИЛИ КорневойТип = "справочники"
		ИЛИ КорневойТип = "планысчетов" ИЛИ КорневойТип = "планывидовхарактеристик";
	
КонецФункции

Функция КорневойТипРегистра(КорневойТип) // ПовтИсп
	
	Возврат КорневойТип = "регистрысведений" ИЛИ КорневойТип = "регистрынакопления"
		 ИЛИ КорневойТип = "регистрыбухгалтерии" ИЛИ КорневойТип = "регистрырасчета";
	
КонецФункции

Функция КорневойТипТЧ(КорневойТип) // ПовтИсп
	
	Возврат КорневойТип = "справочники" ИЛИ КорневойТип = "документы"
		 ИЛИ КорневойТип = "отчеты" ИЛИ КорневойТип = "обработки"
		 ИЛИ КорневойТип = "бизнеспроцессы" ИЛИ КорневойТип = "задачи";
	
КонецФункции

Функция ТипОбъектаПоКорневомуТипу(КорневойТип) // ПовтИсп
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("справочники", Перечисления.ТипыОбъектов.Справочник);
	СоответствиеТипов.Вставить("документы", Перечисления.ТипыОбъектов.Документ);
	СоответствиеТипов.Вставить("регистрысведений", Перечисления.ТипыОбъектов.РегистрСведений);
	СоответствиеТипов.Вставить("регистрынакопления", Перечисления.ТипыОбъектов.РегистрНакопления);
	СоответствиеТипов.Вставить("регистрыбухгалтерии", Перечисления.ТипыОбъектов.РегистрБухгалтерии);
	СоответствиеТипов.Вставить("регистрырасчета", Перечисления.ТипыОбъектов.РегистрРасчета);
	СоответствиеТипов.Вставить("перечисления", Перечисления.ТипыОбъектов.Перечисление);
	СоответствиеТипов.Вставить("планысчетов", Перечисления.ТипыОбъектов.ПланСчетов);
	СоответствиеТипов.Вставить("бизнеспроцессы", Перечисления.ТипыОбъектов.БизнесПроцесс);
	СоответствиеТипов.Вставить("задачи", Перечисления.ТипыОбъектов.Задача);
	СоответствиеТипов.Вставить("планыобмена", Перечисления.ТипыОбъектов.ПланОбмена);
	СоответствиеТипов.Вставить("планывидовхарактеристик", Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
	СоответствиеТипов.Вставить("планывидоврасчета", Перечисления.ТипыОбъектов.ПланВидовРасчета);
	
	Возврат СоответствиеТипов[КорневойТип];
	
КонецФункции

Функция ИмяКоллекцииПоКорневомуТипу(КорневойТип) // ПовтИсп
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники", "catalogs");
	СоответствиеИмен.Вставить("catalogs", "catalogs");
	СоответствиеИмен.Вставить("документы", "documents");
	СоответствиеИмен.Вставить("documents", "documents");
	СоответствиеИмен.Вставить("регистрысведений", "infoRegs");
	СоответствиеИмен.Вставить("informationregisters", "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления", "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters", "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии", "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters", "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета", "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters", "calcRegs");
	СоответствиеИмен.Вставить("обработки", "dataProc");
	СоответствиеИмен.Вставить("dataprocessors", "dataProc");
	СоответствиеИмен.Вставить("отчеты", "reports");
	СоответствиеИмен.Вставить("reports", "reports");
	СоответствиеИмен.Вставить("перечисления", "enums");
	СоответствиеИмен.Вставить("enums", "enums");
	СоответствиеИмен.Вставить("планысчетов", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts", "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы", "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses", "businessProcesses");
	СоответствиеИмен.Вставить("задачи", "tasks");
	СоответствиеИмен.Вставить("tasks", "tasks");
	СоответствиеИмен.Вставить("планыобмена", "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans", "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes", "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes", "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы", "constants");
	СоответствиеИмен.Вставить("constants", "constants");
	
	Возврат СоответствиеИмен[КорневойТип];
	
КонецФункции
