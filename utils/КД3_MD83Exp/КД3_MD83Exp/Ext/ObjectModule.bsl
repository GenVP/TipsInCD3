Перем мЗаписьXML;
Перем мСоответствиеИменТиповОбъектовУИ;
Перем мКонфигурацияВладелец;
Перем мОбъектВладелец;
Перем мОбъектРодитель;
Перем мКоличествоОбъектов, мКоличествоСвойств, мКоличествоЗначений;

Перем мЗначенийСвойстваИндексирование;
Перем мЗначенийСвойстваИндексированиеСДопУпорядочиванием;

Перем мСоответствиеРегистровИРегистраторов;
Перем мСоответствиеРегистраторовЗаполнено;

Перем мТипСтрока;
Перем мТипЧисло;
Перем мТипДата;
Перем мТипБулево;
Перем мТипХранилищеЗначения;
Перем мТипУникальныйИдентификатор;

Перем мПоследнееЗначениеТипа;
Перем мПоследнийТипДанных;

Перем ТаблицаОбщихРеквизитов;
Перем ЕстьОбщиеРеквизиты;

// Функция, стартующая выгрузку структуры метаданных
Функция ВыполнитьВыгрузку() Экспорт
	
	мСоответствиеРегистровИРегистраторов = Новый Соответствие;
	мСоответствиеРегистраторовЗаполнено = Ложь; 
	
	мПоследнееЗначениеТипа = Неопределено;
	мПоследнийТипДанных = Неопределено;
	
	мКоличествоОбъектов = 0;
	мКоличествоСвойств = 0;
	мКоличествоЗначений = 0;
	
	мСоответствиеИменТиповОбъектовУИ = Новый Соответствие();
	
	мЗаписьXML = Новый ЗаписьXML;
	
	мЗаписьXML.ОткрытьФайл(ИмяФайлаВыгрузки, "UTF-8");
	
	мЗаписьXML.ЗаписатьОбъявлениеXML();
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("Конфигурация");
	
		мЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			
		мЗаписьXML.ЗаписатьАтрибут("Имя", XMLСтрока(Метаданные.Имя));
		
		ВыгрузитьКонфигурацию();
		
		ВыгрузитьПримитивныеОбъекты();
		
		ЗаполнитьТаблицуОбщихРеквизитов();
		
		ВыгрузитьОбъекты("ПланыОбмена",             "ПланОбменаСсылка.",             "Планы обмена");
		ВыгрузитьОбъекты("Справочники",             "СправочникСсылка.",             "Справочники");
		ВыгрузитьОбъекты("Документы",               "ДокументСсылка.",               "Документы");
		ВыгрузитьОбъекты("Перечисления",            "ПеречислениеСсылка.",           "Перечисления");
		ВыгрузитьОбъекты("ПланыВидовХарактеристик", "ПланВидовХарактеристикСсылка.", "Планы видов характеристик");
		ВыгрузитьОбъекты("ПланыСчетов",             "ПланСчетовСсылка.",             "Планы счетов");
		ВыгрузитьОбъекты("ПланыВидовРасчета",       "ПланВидовРасчетаСсылка.",       "Планы видов расчета");
		
		Если НеВыгружатьРегистрыСведений = Ложь Тогда
			
			ВыгрузитьОбъекты("РегистрыСведений", "РегистрСведенийЗапись.", "Регистры сведений");
			
		КонецЕсли;
		
		Если НеВыгружатьРегистрыНакопления = Ложь Тогда
		
			ВыгрузитьОбъекты("РегистрыНакопления", "РегистрНакопленияЗапись.", "Регистры накопления");
			
		КонецЕсли;
		
		Если НеВыгружатьРегистрыБухгалтерии = Ложь Тогда
		
			ВыгрузитьОбъекты("РегистрыБухгалтерии", "РегистрБухгалтерииЗапись.", "Регистры бухгалтерии");
			
		КонецЕсли;
		
		Если НеВыгружатьРегистрыРасчета = Ложь Тогда
		
			ВыгрузитьОбъекты("РегистрыРасчета", "РегистрРасчетаЗапись.", "Регистры расчета");
			
		КонецЕсли;
		
		ВыгрузитьОбъекты("БизнесПроцессы",          "БизнесПроцессСсылка.",          "Бизнес-процессы");
		ВыгрузитьОбъекты("Задачи",                  "ЗадачаСсылка.",                 "Задачи");
		
		//+КД3
		Если НЕ НеВыгружатьОтчеты Тогда
			КД3_ВыгрузитьПрочиеОбъекты("Отчеты", "Отчет.", "Отчет");
		КонецЕсли;
		Если НЕ НеВыгружатьОбработки Тогда
			КД3_ВыгрузитьПрочиеОбъекты("Обработки", "Обработка.", "Обработка");
		КонецЕсли;
		Если НЕ НеВыгружатьОбщиеМодули Тогда
			КД3_ВыгрузитьПрочиеОбъекты("ОбщиеМодули", "ОбщийМодуль.", "ОбщийМодуль");
		КонецЕсли;
		//-КД3
		
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "Конфигурация"
	
	мЗаписьXML.Закрыть();
	
	СостояниеИндикатораПрогресса.Заголовок = "Выгрузка завершена";
	Индикатор.Значение = 0;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьВыгрузку()

Процедура ВыгрузитьКонфигурацию()
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Конфигурации");
		мКонфигурацияВладелец = Новый УникальныйИдентификатор();
		ЗаписатьXML(мЗаписьXML, мКонфигурацияВладелец, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
		ЗаписатьXML(мЗаписьXML, Метаданные.Имя, "Description");
		ЗаписатьXML(мЗаписьXML, Метаданные.Имя, "Имя");
		ЗаписатьXML(мЗаписьXML, Метаданные.Синоним, "Синоним");
		ЗаписатьXML(мЗаписьXML, Метаданные.Комментарий, "Комментарий");
		ЗаписатьXML(мЗаписьXML, Метаданные.Версия, "Версия");
		ЗаписатьXML(мЗаписьXML, ТекущаяДата(), "ДатаОбновления");
		ЗаписатьXML(мЗаписьXML, "УправляемоеПриложение", "Приложение");
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Конфигурации"
	
КонецПроцедуры // ВыгрузитьКонфигурацию()

Процедура ВыгрузитьПримитивныеОбъекты()
	
	ВыгрузитьПримитивныйОбъект("Число", "Число", "Число", "Число");
	ВыгрузитьПримитивныйОбъект("Строка", "Строка", "Строка", "Строка");
	ВыгрузитьПримитивныйОбъект("Дата", "Дата", "Дата", "Дата");
	ВыгрузитьПримитивныйОбъект("Булево", "Булево", "Булево", "Булево");
	ВыгрузитьПримитивныйОбъект("ХранилищеЗначения", "ХранилищеЗначения", "Хранилище значения", "Хранилище значения");
	ВыгрузитьПримитивныйОбъект("УникальныйИдентификатор", "УникальныйИдентификатор", "Уникальный идентификатор", "Уникальный идентификатор");
	ВыгрузитьПримитивныйОбъект("КонстантыНабор", "НаборКонстант", "Набор констант", "Набор констант");
	
КонецПроцедуры // ВыгрузитьПримитивныеОбъекты()

Процедура ВыгрузитьПримитивныйОбъект(Имя, ОбъектИмя, ОбъектСиноним, ОбъектКомментарий)
	
	мКоличествоОбъектов = мКоличествоОбъектов + 1;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	
	    УИОбъекта = ПолучитьУИИмениТипа(ОбъектИмя);
		
		ЗаписатьXML(мЗаписьXML, УИОбъекта, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
		ЗаписатьXML(мЗаписьXML, Имя, "Description");
		ЗаписатьXML(мЗаписьXML, Имя, "Имя");
		ЗаписатьXML(мЗаписьXML, ОбъектСиноним, "Синоним");
		ЗаписатьXML(мЗаписьXML, ОбъектКомментарий, "Комментарий");
		ЗаписатьXML(мЗаписьXML, ОбъектИмя, "Тип");
		ЗаписатьXML(мЗаписьXML, Ложь, "Иерархический");
		ЗаписатьXML(мЗаписьXML, "", "ВидИерархии");
		ЗаписатьXML(мЗаписьXML, Ложь, "ОграничиватьКоличествоУровней");
		ЗаписатьXML(мЗаписьXML, 0, "КоличествоУровней");
		ЗаписатьXML(мЗаписьXML, "", "СерииКодов");
		ЗаписатьXML(мЗаписьXML, Ложь, "КонтрольУникальности");
		ЗаписатьXML(мЗаписьXML, Ложь, "АвтоНумерация");
		ЗаписатьXML(мЗаписьXML, "", "Периодичность");
		ЗаписатьXML(мЗаписьXML, Ложь, "Подчиненный");
		
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если ОбъектИмя = "НаборКонстант" Тогда
		
		мОбъектВладелец = УИОбъекта;
		
		Для каждого Свойство из Метаданные.Константы Цикл
			
			ВыгрузитьСвойство(Свойство, "Реквизит");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьПримитивныйОбъект()

Процедура ВыгрузитьОбъекты(ИмяОбъекта, ПрефиксИмени, Представление)
	
	КоличествоОбъектов = Метаданные[ИмяОбъекта].Количество();
	
	Если КоличествоОбъектов = 0 Тогда
		
		Возврат;
		
	Иначе
		
		мКоличествоОбъектов = мКоличествоОбъектов + КоличествоОбъектов + 1;
		
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	    мОбъектРодитель = Новый УникальныйИдентификатор();
		ЗаписатьXML(мЗаписьXML, мОбъектРодитель, "Ref");
		ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
		ЗаписатьXML(мЗаписьXML, ИмяОбъекта, "Description");
		ЗаписатьXML(мЗаписьXML, Представление, "Имя");
		ЗаписатьXML(мЗаписьXML, ИмяОбъекта, "Синоним");
		ЗаписатьXML(мЗаписьXML, "", "Комментарий");
		ЗаписатьXML(мЗаписьXML, "", "Тип");
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Объекты"
	
	ИнициализацияИндикатора(ИмяОбъекта);
	
	Для каждого Объект из Метаданные[ИмяОбъекта] Цикл
		
		ВыгрузитьОбъект(Объект, ПрефиксИмени);
		ВыгрузитьОсновныеСвойства(Объект);
		ВыгрузитьСвойства(Объект);
		ВыгрузитьТабличныеЧасти(Объект);
		ВыгрузитьДвижения(Объект);
		ВыгрузитьЗначенияПеречисления(Объект);
		ВыгрузитьПредопределенныеЗначения(Объект, ИмяОбъекта);
		
		ВыгрузитьТочкиМаршрутаБизнесПроцесса(Объект);
		
		//Для Планов видов расчета необходимо выгрузить предопределенные табличные части
		Если ИмяОбъекта = "ПланыВидовРасчета" Тогда
			
			ВыгрузитьПредопределенныеТабличныеЧастиПВР(Объект);
			
		ИначеЕсли ИмяОбъекта = "ПланыОбмена" Тогда
			
			ВыгрузитьСоставПланаОбмена(Объект);
			
		КонецЕсли;
		
		ИнкрементацияИндикатора();
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьОбъекты()

Процедура ВыгрузитьОбъект(Объект, ПрефиксИмени)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	
		ИмяТипаОбъекта = ПрефиксИмени + Объект.Имя;
		
		УИОбъекта = ПолучитьУИИмениТипа(ИмяТипаОбъекта);
		мОбъектВладелец = УИОбъекта;
		
		ЗаписатьXML(мЗаписьXML, УИОбъекта, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, мОбъектРодитель, "Parent");
		ЗаписатьXML(мЗаписьXML, ИмяТипаОбъекта, "Description");
		ЗаписатьXML(мЗаписьXML, Объект.Имя, "Имя");
		ЗаписатьXML(мЗаписьXML, Объект.Синоним, "Синоним");
		ЗаписатьXML(мЗаписьXML, Объект.Комментарий, "Комментарий");
		ЗаписатьXML(мЗаписьXML, Лев(Объект.ПолноеИмя(), Найти(Объект.ПолноеИмя(), ".") - 1), "Тип");
		
		ВыгрузитьНастраиваемыеСвойстваОбъекта(Объект);
		
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ВыгрузитьОбъект()

Процедура ВыгрузитьНастраиваемыеСвойстваОбъекта(Объект)
	
	Попытка
		
		Иерархический = Объект.Иерархический;
		
	Исключение
		
		Иерархический = Ложь;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, Иерархический, "Иерархический");
	
	Попытка
		
		ВидИерархии = Объект.ВидИерархии;
		
	Исключение
		
		ВидИерархии = "";
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, Строка(ВидИерархии), "ВидИерархии");
	
	Попытка
		
		ОграничиватьКоличествоУровней = Объект.ОграничиватьКоличествоУровней;
		
	Исключение
		
		ОграничиватьКоличествоУровней = Ложь;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, ОграничиватьКоличествоУровней, "ОграничиватьКоличествоУровней");
	
	Попытка
		
		КоличествоУровней = Объект.КоличествоУровней;
		
	Исключение
		
		КоличествоУровней = 0;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, КоличествоУровней, "КоличествоУровней");
	
	Попытка
		
		СерииКодов = Объект.СерииКодов;
		
	Исключение
		
		СерииКодов = "";
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, Строка(СерииКодов), "СерииКодов");
	
	Попытка
		
		КонтрольУникальности = Объект.КонтрольУникальности;
		
	Исключение
		
		КонтрольУникальности = Ложь;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, КонтрольУникальности, "КонтрольУникальности");
	
	Попытка
		
		АвтоНумерация = Объект.АвтоНумерация;
		
	Исключение
		
		АвтоНумерация = Ложь;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, АвтоНумерация, "АвтоНумерация");
	
	Периодичность = "";
	
	Попытка
		
		Периодичность = Объект.ПериодичностьНомера;
		
	Исключение
	КонецПопытки;
	
	Попытка
		
		Периодичность = Объект.ПериодичностьРегистраСведений;
		
	Исключение
	КонецПопытки;
	
	Попытка
		
		Периодичность = Объект.Периодичность;
		
	Исключение
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, Строка(Периодичность), "Периодичность");
	
	Попытка
		
		Если Объект.Владельцы.Количество() Тогда
			
			Подчиненный = Истина;
			
		Иначе
			
			Подчиненный = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Подчиненный = Ложь;
		
	КонецПопытки;
	
	ЗаписатьXML(мЗаписьXML, Подчиненный, "Подчиненный");
	
КонецПроцедуры // ВыгрузитьНастраиваемыеСвойстваОбъекта()

Процедура ВыгрузитьОсновныеСвойства(Объект, Родитель = "00000000-0000-0000-0000-000000000000")
	
	// ВводитсяНаОсновании, значит может быть помечен на удаление
	~ВводитсяНаОсновании:
	Попытка
		
		ВводитсяНаОсновании = Объект.ВводитсяНаОсновании;
		
	Исключение
		
		Перейти ~ДлинаКода;
		
	КонецПопытки;
	
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "ПометкаУдаления";
	Свойство.Синоним = "Пометка удаления";
	Свойство.Комментарий = "Пометка удаления";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	
	// ДлинаКода, значит может быть код
	~ДлинаКода:
	Попытка
		
		ДлинаКода = Объект.ДлинаКода;
		
	Исключение
		
		Перейти ~ДлинаНаименования;
		
	КонецПопытки;
	
	Если ДлинаКода > 0 Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Код";
		Свойство.Синоним = "Код";
		Свойство.Комментарий = "Код";
		
		Попытка
			
			ТипКода = Объект.ТипКода;
			
		Исключение
			
			ТипКода = Неопределено;
			
		КонецПопытки;
		
		Если ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка ИЛИ
			ТипКода = Метаданные.СвойстваОбъектов.ТипКодаПланаВидовРасчета.Строка ИЛИ
			ТипКода = Неопределено Тогда
			
			Свойство.Тип = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Объект.ДлинаКода, ДопустимаяДлина.Фиксированная));
			
		ИначеЕсли ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число ИЛИ
			ТипКода = Метаданные.СвойстваОбъектов.ТипКодаПланаВидовРасчета.Число Тогда
			
			Свойство.Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Объект.ДлинаКода, 0, ДопустимыйЗнак.Неотрицательный));
			
		КонецЕсли;
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);

	КонецЕсли;
	
	
	// ДлинаНаименования, значит может быть наименование
	~ДлинаНаименования:
	Попытка
		
		ДлинаНаименования = Объект.ДлинаНаименования;
		
	Исключение
		
		Перейти ~Иерархический;
		
	КонецПопытки;
	
	Если ДлинаНаименования > 0 Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Наименование";
		Свойство.Синоним = "Наименование";
		Свойство.Комментарий = "Наименование";
		Свойство.Тип = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Объект.ДлинаНаименования, ДопустимаяДлина.Переменная));
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	// Иерархический, значит есть родитель
	~Иерархический:
	Попытка
		
		Иерархический = Объект.Иерархический;
		
	Исключение
		
		Перейти ~ДлинаНомера;
		
	КонецПопытки;
	
	Если Иерархический Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Родитель";
		Свойство.Синоним = "Родитель";
		Свойство.Комментарий = "Родитель";
		Свойство.Тип = Новый ОписаниеТипов(СтрЗаменить(Объект.ПолноеИмя(), ".", "Ссылка."));
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	// ВидИерархии, значит может быть группой
	~ВидИерархии:
	Попытка
		
		ВидИерархии = Объект.ВидИерархии;
		
	Исключение
		
		Перейти ~ДополнительныеЗначенияХарактеристик;
		
	КонецПопытки;
	
	Если Иерархический И ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "ЭтоГруппа";
		Свойство.Синоним = "Это группа";
		Свойство.Комментарий = "Это группа";
		Свойство.Тип = Новый ОписаниеТипов("Булево");
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	// ДополнительныеЗначенияХарактеристик, значит может быть группой
	~ДополнительныеЗначенияХарактеристик:
	Попытка
		
		ДополнительныеЗначенияХарактеристик = Объект.ДополнительныеЗначенияХарактеристик;
		
	Исключение
		
		Перейти ~ДлинаНомера;
		
	КонецПопытки;
	
	Если Иерархический Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "ЭтоГруппа";
		Свойство.Синоним = "Это группа";
		Свойство.Комментарий = "Это группа";
		Свойство.Тип = Новый ОписаниеТипов("Булево");
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	// ДлинаНомера, значит может быть номер
	~ДлинаНомера:
	Попытка
		
		ДлинаНомера = Объект.ДлинаНомера;
		
	Исключение
		
		Перейти ~Проведение;
		
	КонецПопытки;
	
	Если ДлинаНомера > 0 Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Номер";
		Свойство.Синоним = "Номер";
		Свойство.Комментарий = "Номер";
		Свойство.Тип = Новый ОписаниеТипов();
		
		Попытка
			
			ТипНомера = Объект.ТипНомера;
			
		Исключение
			
			ТипНомера = Неопределено;
			
		КонецПопытки;
		
		Если ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка ИЛИ
			ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераБизнесПроцесса.Строка ИЛИ
			ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераЗадачи.Строка ИЛИ
			ТипНомера = Неопределено Тогда
			
			Свойство.Тип = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Объект.ДлинаНомера, ДопустимаяДлина.Переменная));
			
		ИначеЕсли ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число ИЛИ
			ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераБизнесПроцесса.Число ИЛИ
			ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераЗадачи.Число Тогда
			
			Свойство.Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Объект.ДлинаНомера, 0, ДопустимыйЗнак.Неотрицательный));
			
		КонецЕсли;
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	//Проведение, значит есть дата и может быть признак проведенности
	~Проведение:
	Попытка
		
		Проведение = Объект.Проведение;
		
	Исключение
		
		Проведение = Ложь;
		
		Попытка
		
			ТипНомераЗадачи = Объект.ТипНомера;
			
		Исключение
			
			Перейти ~Владельцы;
			
		КонецПопытки;
		
	КонецПопытки;
	
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "Дата";
	Свойство.Синоним = "Дата";
	Свойство.Комментарий = "Дата";
	Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	Если Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Проведен";
		Свойство.Синоним = "Проведен";
		Свойство.Комментарий = "Проведен";
		Свойство.Тип = Новый ОписаниеТипов("Булево");
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
		
	//Владельцы, значит могут быть владельцы
	~Владельцы:
	Попытка
		
		Владельцы = Объект.Владельцы;
		
	Исключение
		
		Перейти ~МодульНабораЗаписей;
		
	КонецПопытки;
	
	Если Владельцы.Количество() > 0 Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Владелец";
		Свойство.Синоним = "Владелец";
		Свойство.Комментарий = "Владелец";
		
		МассивТиповВладельцев = Новый Массив;
		
		Для каждого Владелец из Владельцы Цикл
			
			МассивТиповВладельцев.Добавить(Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка.")));
			
		КонецЦикла;
		
		Свойство.Тип = Новый ОписаниеТипов(МассивТиповВладельцев);
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	//МодульНабораЗаписей, значит это регистр
	~МодульНабораЗаписей:
	Попытка
		
		МодульНабораЗаписей = Объект.МодульНабораЗаписей;
		
	Исключение
		
		Перейти ~ПериодичностьРегистраСведений;
		
	КонецПопытки;
	
	// Для всех регистров надо выгрузить "Активность" и "Регистратор"
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "Активность";
	Свойство.Синоним = "Активность";
	Свойство.Комментарий = "Активность";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	ВыгрузитьРегистраторы(Объект, Родитель);
	
	
	// ПериодичностьРегистраСведений, значит регистр сведений
	~ПериодичностьРегистраСведений:
	Попытка
		
		ПериодичностьРегистраСведений = Объект.ПериодичностьРегистраСведений;
		
	Исключение
		
		Перейти ~ВидРегистра;
		
	КонецПопытки;
	
	// Период (только для периодических)
	Если ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "Период";
		Свойство.Синоним = "Период";
		Свойство.Комментарий = "Период";
		Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	// ВидРегистра, значит регистр накопления
	~ВидРегистра:
	Попытка
		
		ВидРегистра = Объект.ВидРегистра;
		
	Исключение
		
		Перейти ~Корреспонденция;
		
	КонецПопытки;
	
	// Период
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "Период";
	Свойство.Синоним = "Период";
	Свойство.Комментарий = "Период";
	Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	// ВидДвижения (только для остатков)
	Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "ВидДвижения";
		Свойство.Синоним = "Вид движения";
		Свойство.Комментарий = "Вид движения";
		Свойство.Тип = Новый ОписаниеТипов();
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	
	//Корреспонденция, значит регистр бухгалтерии
	~Корреспонденция:
	Попытка
		
		Корреспонденция = Объект.Корреспонденция;
		
	Исключение
		
		Перейти ~РегистрРасчета;
		
	КонецПопытки;
	
	// Период
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "Период";
	Свойство.Синоним = "Период";
	Свойство.Комментарий = "Период";
	Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	Если Корреспонденция Тогда
		
		Если Объект.ПланСчетов <> Неопределено Тогда
			
			// СчетДт (только с корреспонденцией)
			Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
			
			Свойство.Имя = "СчетДт";
			Свойство.Синоним = "Счет Дт";
			Свойство.Комментарий = "Счет Дт";
			Свойство.Тип = Новый ОписаниеТипов(СтрЗаменить(Объект.ПланСчетов.ПолноеИмя(), ".", "Ссылка."));
			
			ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
			
			// СчетКт (только с корреспонденцией)
			Свойство.Имя = "СчетКт";
			Свойство.Синоним = "Счет Кт";
			Свойство.Комментарий = "Счет Кт";
			Свойство.Тип = Новый ОписаниеТипов(СтрЗаменить(Объект.ПланСчетов.ПолноеИмя(), ".", "Ссылка."));
			
			ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
			
			Если Объект.ПланСчетов.ВидыСубконто <> Неопределено Тогда
				
				// СубконтоДт (только с корреспонденцией)
				Свойство.Имя = "СубконтоДт";
				Свойство.Синоним = "Субконто Дт";
				Свойство.Комментарий = "Субконто Дт";
				Свойство.Тип = Объект.ПланСчетов.ВидыСубконто.Тип;
				
				ВыгрузитьСвойство(Свойство, "ВидыСубконтоСчета", Родитель);
				
				// СубконтоКт (только с корреспонденцией)
				Свойство.Имя = "СубконтоКт";
				Свойство.Синоним = "Субконто Кт";
				Свойство.Комментарий = "Субконто Кт";
				Свойство.Тип = Объект.ПланСчетов.ВидыСубконто.Тип;
				
				ВыгрузитьСвойство(Свойство, "ВидыСубконтоСчета", Родитель);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// ВидДвижения (только без корреспонденции)
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "ВидДвижения";
		Свойство.Синоним = "Вид движения";
		Свойство.Комментарий = "Вид движения";
		Свойство.Тип = Новый ОписаниеТипов();
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
		Если Объект.ПланСчетов <> Неопределено Тогда
			
			// Счет (только без корреспонденции)
			Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
			
			Свойство.Имя = "Счет";
			Свойство.Синоним = "Счет";
			Свойство.Комментарий = "Счет";
			Свойство.Тип = Новый ОписаниеТипов(СтрЗаменить(Объект.ПланСчетов.ПолноеИмя(), ".", "Ссылка."));
			
			ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
			
			// Субконто (только без корреспонденции)
			Свойство.Имя = "Субконто";
			Свойство.Синоним = "Субконто";
			Свойство.Комментарий = "Субконто";
			Свойство.Тип = Объект.ПланСчетов.ВидыСубконто.Тип;
			
			ВыгрузитьСвойство(Свойство, "ВидыСубконтоСчета", Родитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// РегистрРасчета, значит регистр расчета
	~РегистрРасчета: //ПланВидовРасчета
	Попытка
		
		ПланВидовРасчета = Объект.ПланВидовРасчета;
		
	Исключение
		
		Перейти ~ПланВидовРасчета;
		
	КонецПопытки;
	
	// ВидРасчета
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "ВидРасчета";
	Свойство.Синоним = "Вид расчета";
	Свойство.Комментарий = "Вид расчета";
	Свойство.Тип = Новый ОписаниеТипов(СтрЗаменить(Объект.ПланВидовРасчета.ПолноеИмя(), ".", "Ссылка."));
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	// ПериодРегистрации
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "ПериодРегистрации";
	Свойство.Синоним = "Период регистрации";
	Свойство.Комментарий = "Период регистрации";
	Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	Если Объект.БазовыйПериод Тогда
		
		// БазовыйПериодНачало (только для имеющих признак "Базовый период")
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "БазовыйПериодНачало";
		Свойство.Синоним = "Базовый период начало";
		Свойство.Комментарий = "Базовый период начало";
		Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
		// БазовыйПериодКонец (только для имеющих признак "Базовый период")
		Свойство.Имя = "БазовыйПериодКонец";
		Свойство.Синоним = "Базовый период конец";
		Свойство.Комментарий = "Базовый период конец";
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	Если Объект.ПериодДействия Тогда
		
		// ПериодДействияНачало (только для имеющих признак "Период действия")
		Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
		Свойство.Имя = "ПериодДействияНачало";
		Свойство.Синоним = "Период действия начало";
		Свойство.Комментарий = "Период действия начало";
		Свойство.Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
		// ПериодДействияКонец (только для имеющих признак "Период действия")
		Свойство.Имя = "ПериодДействияКонец";
		Свойство.Синоним = "Период действия конец";
		Свойство.Комментарий = "Период действия конец";
		
		ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
		
	КонецЕсли;
	
	// Сторно
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "Сторно";
	Свойство.Синоним = "Сторно";
	Свойство.Комментарий = "Сторно";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);

	
	// ПланВидовРасчета, значит план видов расчета
	~ПланВидовРасчета: //ПланВидовРасчета
	Попытка
		
		ИспользованиеПериодаДействия = Объект.ИспользованиеПериодаДействия;
		
		Если Не ИспользованиеПериодаДействия Тогда 
			
			Перейти ~КартаМаршрута;
			
		КонецЕсли;
		
	Исключение
		
		Перейти ~КартаМаршрута;
		
	КонецПопытки;
	
	// ПериодДействияБазовый
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
	
	Свойство.Имя = "ПериодДействияБазовый";
	Свойство.Синоним = "Период действия базовый";
	Свойство.Комментарий = "Период действия базовый";
	Свойство.Тип = Новый ОписаниеТипов("Булево",,,);
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	
	// бизнес-процессы
	~КартаМаршрута: 
	Попытка
		
		Карта = Объект.КартаМаршрута;
		
	Исключение
		
		Перейти ~РеквизитыАдресации;
		
	КонецПопытки;
	
	// стартован и завершен
	
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
	Свойство.Имя = "Стартован";
	Свойство.Синоним = "Стартован";
	Свойство.Комментарий = "Стартован";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	Свойство.Имя = "Завершен";
	Свойство.Синоним = "Завершен";
	Свойство.Комментарий = "Завершен";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	// ведущая задача
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
	Свойство.Имя = "ВедущаяЗадача";
	Свойство.Синоним = "ВедущаяЗадача";
	Свойство.Комментарий = "ВедущаяЗадача";
	
	МассивТиповЗадач = Новый Массив;
	
	Для каждого Задача из Метаданные.Задачи Цикл
		
		МассивТиповЗадач.Добавить(Тип("ЗадачаСсылка." + Задача.Имя));
		
	КонецЦикла;
	
	Свойство.Тип = Новый ОписаниеТипов(МассивТиповЗадач);
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	
	~РеквизитыАдресации: 
	Попытка
		
		РеквизитыАдресации = Объект.РеквизитыАдресации;
		
		Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл
			
			Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
			Свойство.Имя = РеквизитАдресации.Имя;
			Свойство.Синоним = РеквизитАдресации.Синоним;
			Свойство.Комментарий = РеквизитАдресации.Комментарий;
			
			МассивТипов = Новый Массив;
			
			Для каждого ТипЭл из РеквизитАдресации.Тип.Типы() Цикл
				
				МассивТипов.Добавить(ТипЭл);
				
			КонецЦикла;
			
			Свойство.Тип = Новый ОписаниеТипов(МассивТипов);
			
			ВыгрузитьСвойство(Свойство, "Свойство", Родитель);	
			
		КонецЦикла;		
				
	Исключение
		
		Перейти ~КонецПроцедуры;
		
	КонецПопытки;
	
	// бизнес-процесс
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
	Свойство.Имя = "БизнесПроцесс";
	Свойство.Синоним = "БизнесПроцесс";
	Свойство.Комментарий = "БизнесПроцесс";
	
	МассивТиповБизнесПроцессов = Новый Массив;
	
	Для каждого БизнесПроцесс из Метаданные.БизнесПроцессы Цикл
		
		МассивТиповБизнесПроцессов.Добавить(Тип("БизнесПроцессСсылка." + БизнесПроцесс.Имя));
		
	КонецЦикла;
	
	Свойство.Тип = Новый ОписаниеТипов(МассивТиповБизнесПроцессов);
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	
	// выполнена
	Свойство.Имя = "Выполнена";
	Свойство.Синоним = "Выполнена";
	Свойство.Комментарий = "Выполнена";
	Свойство.Тип = Новый ОписаниеТипов("Булево");
	
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	// точка маршрута
	Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
		
	Свойство.Имя = "ТочкаМаршрута";
	Свойство.Синоним = "ТочкаМаршрута";
	Свойство.Комментарий = "ТочкаМаршрута";
	
	МассивТиповТочекБизнесПроцессов = Новый Массив;
	
	Для каждого БизнесПроцесс из Метаданные.БизнесПроцессы Цикл
		
		МассивТиповТочекБизнесПроцессов.Добавить(Тип("ТочкаМаршрутаБизнесПроцессаСсылка." + БизнесПроцесс.Имя));
		
	КонецЦикла;
	
	Свойство.Тип = Новый ОписаниеТипов(МассивТиповТочекБизнесПроцессов);
		
	ВыгрузитьСвойство(Свойство, "Свойство", Родитель);
	
	~КонецПроцедуры:
	
КонецПроцедуры // ВыгрузитьОсновныеСвойства()

Процедура ВыгрузитьСвойства(Объект, Родитель = "00000000-0000-0000-0000-000000000000")
	
	~Измерения:
	Попытка
		
		Свойства = Объект.Измерения;
		
	Исключение
		
		Перейти ~Ресурсы;
		
	КонецПопытки;
	
	Для каждого Свойство из Свойства Цикл
		
		ВыгрузитьСвойство(Свойство, "Измерение", Родитель);
		
	КонецЦикла;
	
	~Ресурсы:
	Попытка
		
		Свойства = Объект.Ресурсы;
		
	Исключение
		
		Перейти ~Реквизиты;
		
	КонецПопытки;
	
	Для каждого Свойство из Свойства Цикл
		
		ВыгрузитьСвойство(Свойство, "Ресурс", Родитель);
		
	КонецЦикла;
	
	~Реквизиты:
	
	Попытка
		
		Свойства = Объект.Реквизиты;
		
	Исключение
		
		Перейти ~КонецПроцедуры;
		
	КонецПопытки;
	
	Для каждого Свойство из Свойства Цикл
		
		ВыгрузитьСвойство(Свойство, "Реквизит", Родитель);
		
	КонецЦикла;
	
	~КонецПроцедуры:
	
	Если ЕстьОбщиеРеквизиты Тогда
		
		ОбщиеРеквизиты = ТаблицаОбщихРеквизитов.Найти(Объект.ПолноеИмя(),"Метаданные");
		
		Если ОбщиеРеквизиты <> Неопределено Тогда
			
			Для Каждого Свойство Из ОбщиеРеквизиты.МассивОбщихРеквизитов Цикл
				
				ВыгрузитьСвойство(Свойство, "Реквизит", Родитель);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьСвойства()

Процедура ВыгрузитьСвойство(Свойство, ВидСвойства, Родитель = "00000000-0000-0000-0000-000000000000", ВременныйXML = Неопределено, КД3_ПрочийОбъект = Ложь)
	
	XMLДляЗаписи = ?(ВременныйXML = Неопределено, мЗаписьXML, ВременныйXML);
	
	Попытка
		
		Балансовый = Свойство.Балансовый;
		
	Исключение
		
		Балансовый = Истина;
		
	КонецПопытки;
	
	Если НЕ Балансовый Тогда
		
		_Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип, Индексирование");
		
		_Свойство.Имя = Свойство.Имя + "Дт";
		_Свойство.Синоним = Свойство.Синоним;
		_Свойство.Комментарий = Свойство.Комментарий;
		_Свойство.Тип = Свойство.Тип;
		
		Попытка
			
			_Свойство.Индексирование = Свойство.Индексирование;
			
		Исключение
			
			_Свойство.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			
		КонецПопытки;
		
		ВыгрузитьСвойство(_Свойство, ВидСвойства, Родитель, ВременныйXML);
		
		_Свойство.Имя = Свойство.Имя + "Кт";
		ВыгрузитьСвойство(_Свойство, ВидСвойства, Родитель, ВременныйXML);
		
		Возврат;
		
	КонецЕсли;
	
	мКоличествоСвойств = мКоличествоСвойств + 1;
	
	XMLДляЗаписи.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
	
		УИСвойства = Новый УникальныйИдентификатор();
		
		ЗаписатьXML(XMLДляЗаписи, УИСвойства, "Ref");
		ЗаписатьXML(XMLДляЗаписи, Ложь, "IsFolder");
		ЗаписатьXML(XMLДляЗаписи, КД3_ПрочийОбъект, "DeletionMark"); //КД3
		XMLДляЗаписи.ЗаписатьНачалоЭлемента("Owner");
			XMLДляЗаписи.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
			XMLДляЗаписи.ЗаписатьТекст(Строка(мОбъектВладелец));
		XMLДляЗаписи.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(XMLДляЗаписи, Родитель, "Parent");
		ЗаписатьXML(XMLДляЗаписи, 0, "Code");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Имя, "Description");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Синоним, "Синоним");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Комментарий, "Комментарий");
		
		Попытка
			
			Использование = Строка(Свойство.Использование);
			
		Исключение
			
			Использование = "";
			
		КонецПопытки;
		
		ЗаписатьXML(XMLДляЗаписи, Использование, "Использование");
		
		Попытка
			
			Индексирование = (Свойство.Индексирование = мЗначенийСвойстваИндексирование 
				ИЛИ Свойство.Индексирование = мЗначенийСвойстваИндексированиеСДопУпорядочиванием);
			
		Исключение
			
			Индексирование = Ложь;
			
		КонецПопытки;
		
		ЗаписатьXML(XMLДляЗаписи, Индексирование, "Индексирование");
		
		ЗаписатьXML(XMLДляЗаписи, Свойство.Тип.КвалификаторыЧисла.Разрядность, "КвалификаторыЧисла_Длина");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "КвалификаторыЧисла_Точность");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Тип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный, "КвалификаторыЧисла_Неотрицательное");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Тип.КвалификаторыСтроки.Длина, "КвалификаторыСтроки_Длина");
		ЗаписатьXML(XMLДляЗаписи, Свойство.Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная, "КвалификаторыСтроки_Фиксированная");
		ЗаписатьXML(XMLДляЗаписи, Строка(Свойство.Тип.КвалификаторыДаты.ЧастиДаты), "КвалификаторыДаты_Состав");
		ЗаписатьXML(XMLДляЗаписи, Ложь, "Авторегистрация");
		
		ЗаписатьXML(XMLДляЗаписи, ВидСвойства, "Вид");
		ЗаписатьXML(XMLДляЗаписи, "", "ТипыСтрокой");
		
		ВыгрузитьТипы(Свойство, ВременныйXML);
	
	XMLДляЗаписи.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
		
КонецПроцедуры // ВыгрузитьСвойство()

Процедура ВыгрузитьЭлементСоставаПланаОбмена(ЭлементСостава, Родитель)
	
	Объект = ЭлементСостава.Метаданные;
	
	Если Объект = Неопределено Тогда
		Возврат;
	ИначеЕсли Метаданные.Константы.Содержит(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	мКоличествоСвойств = мКоличествоСвойств + 1;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
	
		УИСвойства = Новый УникальныйИдентификатор();
		
		ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
			мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, Родитель, "Parent");
		ЗаписатьXML(мЗаписьXML, 0, "Code");
		ЗаписатьXML(мЗаписьXML, Объект.Имя, "Description");
		ЗаписатьXML(мЗаписьXML, Объект.Синоним, "Синоним");
		ЗаписатьXML(мЗаписьXML, Объект.Комментарий, "Комментарий");
		ЗаписатьXML(мЗаписьXML, "", "Использование");
		ЗаписатьXML(мЗаписьXML, Ложь, "Индексирование");
		
		ЗаписатьXML(мЗаписьXML, 0, "КвалификаторыЧисла_Длина");
		ЗаписатьXML(мЗаписьXML, 0, "КвалификаторыЧисла_Точность");
		ЗаписатьXML(мЗаписьXML, Ложь, "КвалификаторыЧисла_Неотрицательное");
		ЗаписатьXML(мЗаписьXML, 0, "КвалификаторыСтроки_Длина");
		ЗаписатьXML(мЗаписьXML, Ложь, "КвалификаторыСтроки_Фиксированная");
		ЗаписатьXML(мЗаписьXML, "", "КвалификаторыДаты_Состав");
		ЗаписатьXML(мЗаписьXML, ЭлементСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить, "Авторегистрация");
		
		ЗаписатьXML(мЗаписьXML, "ЭлементСоставаПланаОбмена", "Вид");
		ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
		
		// выгружаем тип элемента состава
		мЗаписьXML.ЗаписатьНачалоЭлемента("Типы");
		
			мЗаписьXML.ЗаписатьНачалоЭлемента("Row");
			
			ЗаписатьXML(мЗаписьXML, ПолучитьУИИмениТипа(ПолучитьТипОбъектаМетаданных(Объект)), "Тип");
			
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Row"
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Типы"
		
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
	
КонецПроцедуры // ВыгрузитьЭлементСоставаПланаОбмена()

Процедура ВыгрузитьТипы(Объект, ВременныйXML = Неопределено)
	
	XMLДляЗаписи = ?(ВременныйXML = Неопределено, мЗаписьXML, ВременныйXML);
	
	XMLДляЗаписи.ЗаписатьНачалоЭлемента("Типы");
	
		КоличествоТипов = Объект.Тип.Типы().Количество();
		Для каждого Тип из Объект.Тип.Типы() Цикл
		
			XMLДляЗаписи.ЗаписатьНачалоЭлемента("Row");
			
			Если КоличествоТипов = 1 Тогда
				
				Если мПоследнийТипДанных <> Тип Тогда
			
					мПоследнееЗначениеТипа = ПолучитьУИИмениТипа(ПолучитьТип(Тип));
					мПоследнийТипДанных = Тип;
				
				КонецЕсли;
				
			Иначе
				
				мПоследнееЗначениеТипа = ПолучитьУИИмениТипа(ПолучитьТип(Тип));
				мПоследнийТипДанных = Тип;
			
			КонецЕсли;
			
			ЗаписатьXML(XMLДляЗаписи, мПоследнееЗначениеТипа, "Тип");
				
			XMLДляЗаписи.ЗаписатьКонецЭлемента(); // "Row"
			
		КонецЦикла;
		
	XMLДляЗаписи.ЗаписатьКонецЭлемента(); // "Типы"
	
КонецПроцедуры // ВыгрузитьТипы()

Процедура ВыгрузитьТабличныеЧасти(Объект)
	
	Попытка
		
		ТабличныеЧасти = Объект.ТабличныеЧасти;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
		
		мКоличествоСвойств = мКоличествоСвойств + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
		
			УИСвойства = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
			ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Синоним, "Синоним");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Комментарий, "Комментарий");
			ЗаписатьXML(мЗаписьXML, "ТабличнаяЧасть", "Вид");
			ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
		
		Для каждого Свойство из ТабличнаяЧасть.Реквизиты Цикл
			
			ВыгрузитьСвойство(Свойство, "Реквизит", УИСвойства);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьТабличныеЧасти()

Процедура ВыгрузитьСоставПланаОбмена(Объект)
	
	мКоличествоСвойств = мКоличествоСвойств + 1;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
	
		УИСвойства = Новый УникальныйИдентификатор();
		
		ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
		ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
			мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
		ЗаписатьXML(мЗаписьXML, 0, "Code");
		ЗаписатьXML(мЗаписьXML, "{Состав}", "Description");
		ЗаписатьXML(мЗаписьXML, "{Состав}", "Синоним");
		ЗаписатьXML(мЗаписьXML, "", "Комментарий");
		ЗаписатьXML(мЗаписьXML, "СоставПланаОбмена", "Вид");
		ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
		ЗаписатьXML(мЗаписьXML, "", "Типы");
	
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
	
	Для Каждого ЭлементСостава Из Объект.Состав Цикл
		
		ВыгрузитьЭлементСоставаПланаОбмена(ЭлементСостава, УИСвойства);
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьТабличныеЧасти()

Процедура ВыгрузитьПредопределенныеТабличныеЧастиПВР(Объект)
	
	ТабличныеЧасти = ПолучитьПредопределенныеТабличныеЧастиПВР(Объект);
		
	Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
		
		мКоличествоСвойств = мКоличествоСвойств + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
		
			УИСвойства = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
			ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Синоним, "Синоним");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Комментарий, "Комментарий");
			ЗаписатьXML(мЗаписьXML, "ТабличнаяЧасть", "Вид");
			ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
		
		Для каждого Свойство из ТабличнаяЧасть.Реквизиты Цикл
			
			ВыгрузитьСвойство(Свойство, "Реквизит", УИСвойства);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьТабличныеЧасти()

Процедура ВыгрузитьДвижения(Объект)
	
	Если НеВыгружатьДвиженияДокументов Тогда
		
		Если НЕ ВыгружатьДвиженияТолькоУДокументовСЗапретомПроведения Тогда
		
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Движения = Объект.Движения;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Если НеВыгружатьДвиженияДокументов
		И ВыгружатьДвиженияТолькоУДокументовСЗапретомПроведения Тогда
		
		Если Объект.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить  Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Движение из Движения Цикл
		
		мКоличествоСвойств = мКоличествоСвойств + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
		
			УИСвойства = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
			ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, Движение.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, Движение.Синоним, "Синоним");
			ЗаписатьXML(мЗаписьXML, Движение.Комментарий, "Комментарий");
			
			ВидРегистра = Лев(Движение.ПолноеИмя(), Найти(Движение.ПолноеИмя(), ".") - 1);
			
			Если      ВидРегистра = "РегистрСведений" Тогда
				
				ЗаписатьXML(мЗаписьXML, "НаборДвиженийРегистраСведений", "Вид");
				
			ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
				
				ЗаписатьXML(мЗаписьXML, "НаборДвиженийРегистраНакопления", "Вид");
				
			ИначеЕсли ВидРегистра = "РегистрБухгалтерии" Тогда
				
				ЗаписатьXML(мЗаписьXML, "НаборДвиженийРегистраБухгалтерии", "Вид");
				
			ИначеЕсли ВидРегистра = "РегистрРасчета" Тогда
				
				ЗаписатьXML(мЗаписьXML, "НаборДвиженийРегистраРасчета", "Вид");
				
			КонецЕсли;
			
			ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
			
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
		
		ВыгрузитьОсновныеСвойства(Движение, УИСвойства);
		ВыгрузитьСвойства(Движение, УИСвойства);
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьДвижения()

Процедура ВыгрузитьЗначенияПеречисления(Объект)
	
	Попытка
		
		Значения = Объект.ЗначенияПеречисления;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Для каждого Значение из Значения Цикл
		
		мКоличествоЗначений = мКоличествоЗначений + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Значения");
		
			УИЗначения = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИЗначения, "Ref");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, Значение.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, Значение.Синоним, "Синоним");
			ЗаписатьXML(мЗаписьXML, Значение.Комментарий, "Комментарий");
			ЗаписатьXML(мЗаписьXML, Истина, "Предопределенное");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Значения"
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьЗначенияПеречисления()

Процедура ВыгрузитьПредопределенныеЗначения(Объект, ИмяОбъекта)
	
	Попытка
		
		Предопределенные = Объект.Предопределенные;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Если Найти(Объект.ПолноеИмя(), "Справочник") = 1 тогда
		ЭтоСправочник = ИСТИНА;
	Иначе
		ЭтоСправочник = ЛОЖЬ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	_.Ссылка,";
	
	Если Объект.ДлинаКода > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	_.Код,";
		
	КонецЕсли;
	
	Если Объект.ДлинаНаименования > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	_.Наименование,";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	_.Представление
	|ИЗ
	|	" + Объект.ПолноеИмя() + " КАК _
	|
	|ГДЕ
	|	(_.Предопределенный = ИСТИНА)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		мКоличествоЗначений = мКоличествоЗначений + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Значения");
		
			УИЗначения = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИЗначения, "Ref");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			
			Если ИмяОбъекта = "Справочники" Тогда
				ИмяПредопределенного = Справочники[Объект.Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка);
				ЗаписатьXML(мЗаписьXML, ИмяПредопределенного, "Description");
			ИначеЕсли ИмяОбъекта = "ПланыВидовХарактеристик" Тогда
				ИмяПредопределенного = ПланыВидовХарактеристик[Объект.Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка);
				ЗаписатьXML(мЗаписьXML, ИмяПредопределенного, "Description");
			ИначеЕсли ИмяОбъекта = "ПланыСчетов" Тогда
				ИмяПредопределенного = ПланыСчетов[Объект.Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка);
				ЗаписатьXML(мЗаписьXML, ИмяПредопределенного, "Description");
			ИначеЕсли ИмяОбъекта = "ПланыВидовРасчета" Тогда
				ИмяПредопределенного = ПланыВидовРасчета[Объект.Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка);
				ЗаписатьXML(мЗаписьXML, ИмяПредопределенного, "Description");
			Иначе
				ЗаписатьXML(мЗаписьXML, ?(Объект.ДлинаКода > 0, Выборка.Код, Выборка.Представление), "Description");
			КонецЕсли;
			ЗаписатьXML(мЗаписьXML, Выборка.Представление, "Синоним");
			ЗаписатьXML(мЗаписьXML, ?(Объект.ДлинаНаименования > 0, Выборка.Наименование, Выборка.Представление), "Комментарий");
			ЗаписатьXML(мЗаписьXML, Истина, "Предопределенное");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Значения"
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьПредопределенныеЗначения()

Процедура ВыгрузитьТочкиМаршрутаБизнесПроцесса(Объект)
	
	Попытка
		
		КартаМаршрута = Объект.КартаМаршрута;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	мКоличествоОбъектов = мКоличествоОбъектов + 1;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	
		ИмяТипаОбъекта = "ТочкаМаршрутаБизнесПроцессаСсылка." + Объект.Имя;
		
		УИОбъекта = ПолучитьУИИмениТипа(ИмяТипаОбъекта);
		мОбъектВладелец = УИОбъекта;
		
		ЗаписатьXML(мЗаписьXML, УИОбъекта, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, мОбъектРодитель, "Parent");
		ЗаписатьXML(мЗаписьXML, ИмяТипаОбъекта, "Description");
		ЗаписатьXML(мЗаписьXML, Объект.Имя, "Имя");
		ЗаписатьXML(мЗаписьXML, Объект.Синоним, "Синоним");
		ЗаписатьXML(мЗаписьXML, Объект.Комментарий, "Комментарий");
		ЗаписатьXML(мЗаписьXML, "ТочкаМаршрутаБизнесПроцесса", "Тип");
		
		ВыгрузитьНастраиваемыеСвойстваОбъекта(Объект);
		
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для каждого ТочкаМаршрута из БизнесПроцессы[Объект.Имя].ТочкиМаршрута Цикл
		
		мКоличествоЗначений = мКоличествоЗначений + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Значения");
		
			УИЗначения = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИЗначения, "Ref");
			ЗаписатьXML(мЗаписьXML, Ложь, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, ТочкаМаршрута.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, ТочкаМаршрута.Имя, "Синоним");
			ЗаписатьXML(мЗаписьXML, ТочкаМаршрута.Имя, "Комментарий");
			ЗаписатьXML(мЗаписьXML, Истина, "Предопределенное");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Значения"
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьТочкиМаршрутаБизнесПроцесса()

Процедура ЗаменитьСсылкуВСтроке(ЗначениеРезультата, ТегНачала, ТегКонца, НоваяСтрокаGUID)
	
	ПозицияНачала = Найти(ЗначениеРезультата, ТегНачала);
	ПозицияОкончания = Найти(ЗначениеРезультата, ТегКонца);
	
	ДлинаНачальногоТега =СтрДлина(ТегНачала);
		
	СтарыйУникальныйНомер = Сред(ЗначениеРезультата, ПозицияНачала + ДлинаНачальногоТега, ПозицияОкончания - ПозицияНачала - ДлинаНачальногоТега);
		
	ЗначениеРезультата = СтрЗаменить(ЗначениеРезультата, ТегНачала + СтарыйУникальныйНомер + ТегКонца, ТегНачала + НоваяСтрокаGUID + ТегКонца);	
	
КонецПроцедуры

Процедура ЗаменитьСсылкуУЗаписи(ЗначениеРезультата, НазваниеТега, НоваяСтрокаGUID = "")
	
	Если ПустаяСтрока(НоваяСтрокаGUID) Тогда
		НоваяСтрокаGUID = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ТегНачала = "<" + НазваниеТега + ">";
	ТегКонца = "</"+ НазваниеТега + ">";
	ЗаменитьСсылкуВСтроке(ЗначениеРезультата, ТегНачала, ТегКонца, НоваяСтрокаGUID);
		
КонецПроцедуры

Процедура ВыгрузитьРегистраторы(Объект, Родитель = "00000000-0000-0000-0000-000000000000")
	
	ЗначениеРезультата = мСоответствиеРегистровИРегистраторов.Получить(Объект);
	
	Если ЗначениеРезультата = Неопределено 
		И мСоответствиеРегистраторовЗаполнено = Ложь Тогда
				
		мСоответствиеРегистраторовЗаполнено = Истина;
		// инициализируем
		
		МассивТипов = Новый Массив;
		
		Для каждого Документ из Метаданные.Документы Цикл
			
			ТипДанныхДокумента = Тип(СтрЗаменить(Документ.ПолноеИмя(), ".", "Ссылка."));
			
			Для Каждого ОбъектДвижения Из Документ.Движения Цикл
				
				ТекущаяСтрока = мСоответствиеРегистровИРегистраторов.Получить(ОбъектДвижения);
				
				Если ТекущаяСтрока = Неопределено Тогда
					МассивТипов = Новый Массив;
				Иначе
				   МассивТипов = ТекущаяСтрока;
			   	КонецЕсли;
			   
				МассивТипов.Добавить(ТипДанныхДокумента);
				
				мСоответствиеРегистровИРегистраторов.Вставить(ОбъектДвижения, МассивТипов);
				
			КонецЦикла;
			
		КонецЦикла;
					
		
		Для Каждого ЭлементСтруктуры Из мСоответствиеРегистровИРегистраторов Цикл
			
			Значение = ЭлементСтруктуры.Значение;
			
			МассивТипов = Значение;	
			
			РезультирующаяСтрока = "";
			
			Если МассивТипов.Количество() > 0 Тогда
				
				Свойство = Новый Структура("Имя, Синоним, Комментарий, Тип");
				
				Свойство.Имя = "Регистратор";
				Свойство.Синоним = "Регистратор";
				Свойство.Комментарий = "Регистратор";
				Свойство.Тип = Новый ОписаниеТипов(МассивТипов);
				
				ВременныйXML = Новый ЗаписьXML();
				ВременныйXML.УстановитьСтроку();
				
				ВыгрузитьСвойство(Свойство, "Свойство", Родитель, ВременныйXML);
				
				РезультирующаяСтрока = ВременныйXML.Закрыть();
				
			КонецЕсли;
			
			мСоответствиеРегистровИРегистраторов.Вставить(ЭлементСтруктуры.Ключ, РезультирующаяСтрока);
			
		КонецЦикла;
		
		ЗначениеРезультата = мСоответствиеРегистровИРегистраторов.Получить(Объект);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЗначениеРезультата) Тогда
		
		ЗаменитьСсылкуУЗаписи(ЗначениеРезультата, "Ref");
		ЗаменитьСсылкуУЗаписи(ЗначениеРезультата, "Parent", Родитель);
		НовыйВладелец = Строка(мОбъектВладелец);
		
		ЗаменитьСсылкуВСтроке(ЗначениеРезультата, "<Owner xsi:type=""CatalogRef.Объекты"">", "</Owner>", НовыйВладелец);
		
		мЗаписьXML.ЗаписатьБезОбработки(ЗначениеРезультата);
				
	КонецЕсли;	
					
КонецПроцедуры // ВыгрузитьРегистраторы()

Процедура ИнициализацияИндикатора(ИмяОбъекта)
	
	Если СостояниеИндикатораПрогресса = Неопределено ИЛИ Индикатор = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяОбъекта = "ПланыОбмена" Тогда
		
		Заголовок = "Выгрузка объектов ""План обмена""";
		
	ИначеЕсли ИмяОбъекта = "Константы" Тогда
		
		Заголовок = "Выгрузка объектов ""Константа""";
		
	ИначеЕсли ИмяОбъекта = "Справочники" Тогда
		
		Заголовок = "Выгрузка объектов ""Справочник""";
		
	ИначеЕсли ИмяОбъекта = "Документы" Тогда
		
		Заголовок = "Выгрузка объектов ""Документ""";
		
	ИначеЕсли ИмяОбъекта = "Перечисления" Тогда
		
		Заголовок = "Выгрузка объектов ""Перечисление""";
		
	ИначеЕсли ИмяОбъекта = "ПланыВидовХарактеристик" Тогда
		
		Заголовок = "Выгрузка объектов ""План видов характеристик""";
		
	ИначеЕсли ИмяОбъекта = "ПланыСчетов" Тогда
		
		Заголовок = "Выгрузка объектов ""План счетов""";
		
	ИначеЕсли ИмяОбъекта = "ПланыВидовРасчета" Тогда
		
		Заголовок = "Выгрузка объектов ""План видов расчета""";
		
	ИначеЕсли ИмяОбъекта = "РегистрыСведений" Тогда
		
		Заголовок = "Выгрузка объектов ""Регистр сведений""";
		
	ИначеЕсли ИмяОбъекта = "РегистрыНакопления" Тогда
		
		Заголовок = "Выгрузка объектов ""Регистр накопления""";
		
	ИначеЕсли ИмяОбъекта = "РегистрыБухгалтерии" Тогда
		
		Заголовок = "Выгрузка объектов ""Регистр бухгалтерии""";
		
	ИначеЕсли ИмяОбъекта = "РегистрыРасчета" Тогда
		
		Заголовок = "Выгрузка объектов ""Регистр расчета""";
		
	ИначеЕсли ИмяОбъекта = "БизнесПроцессы" Тогда
		
		Заголовок = "Выгрузка объектов ""Бизнес-процесс""";
		
	ИначеЕсли ИмяОбъекта = "Задачи" Тогда
		
		Заголовок = "Выгрузка объектов ""Задача""";
		
	КонецЕсли;
	
	СостояниеИндикатораПрогресса.Заголовок = Заголовок;
	Индикатор.МаксимальноеЗначение = Метаданные[ИмяОбъекта].Количество();
	Индикатор.Значение = 0;
	
КонецПроцедуры // ИнициализацияИндикатора()

Процедура ИнкрементацияИндикатора()
	
	Если Индикатор = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Индикатор.Значение = Индикатор.Значение + 1;
	
КонецПроцедуры // ИнкрементацияИндикатора()

Функция ПолучитьТип(Тип)
		
	Если Тип = мТипЧисло Тогда
		Возврат "Число";
    ИначеЕсли Тип = мТипБулево Тогда
		Возврат "Булево";
	ИначеЕсли Тип = мТипДата Тогда
		Возврат "Дата";	
	ИначеЕсли Тип = мТипСтрока Тогда
		Возврат "Строка";	
	ИначеЕсли Тип = мТипХранилищеЗначения Тогда
		Возврат "ХранилищеЗначения";
	ИначеЕсли Тип = мТипУникальныйИдентификатор Тогда
		Возврат "УникальныйИдентификатор";
    Иначе
		
		//+КД3
		ТипXML = XMLТип(Тип);
		Если ТипXML = Неопределено Тогда
			Результат = "";
		Иначе
			Результат = ТипXML.ИмяТипа;
		КонецЕсли;
		//-КД3
						
		Результат = СтрЗаменить(Результат, "CatalogRef", "СправочникСсылка");
		Результат = СтрЗаменить(Результат, "DocumentRef", "ДокументСсылка");
		Результат = СтрЗаменить(Результат, "EnumRef", "ПеречислениеСсылка");
		Результат = СтрЗаменить(Результат, "ChartOfAccountsRef", "ПланСчетовСсылка");
		Результат = СтрЗаменить(Результат, "ChartOfCharacteristicTypesRef", "ПланВидовХарактеристикСсылка");
		Результат = СтрЗаменить(Результат, "ChartOfCalculationTypesRef", "ПланВидовРасчетаСсылка");
		Результат = СтрЗаменить(Результат, "ExchangePlanRef", "ПланОбменаСсылка");
		Результат = СтрЗаменить(Результат, "BusinessProcessRef", "БизнесПроцессСсылка");
		Результат = СтрЗаменить(Результат, "BusinessProcessRoutePointRef", "ТочкаМаршрутаБизнесПроцессаСсылка");
		Результат = СтрЗаменить(Результат, "TaskRef", "ЗадачаСсылка");
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТип()

Функция ПолучитьТипОбъектаМетаданных(Объект)
	
	Результат = Объект.ПолноеИмя();
	
	// Ссылочные типы
	Результат = СтрЗаменить(Результат, "Справочник.",             "СправочникСсылка.");
	Результат = СтрЗаменить(Результат, "Документ.",               "ДокументСсылка.");
	Результат = СтрЗаменить(Результат, "ПланСчетов.",             "ПланСчетовСсылка.");
	Результат = СтрЗаменить(Результат, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
	Результат = СтрЗаменить(Результат, "ПланВидовРасчета.",       "ПланВидовРасчетаСсылка.");
	Результат = СтрЗаменить(Результат, "БизнесПроцесс.",          "БизнесПроцессСсылка.");
	Результат = СтрЗаменить(Результат, "Задача.",                 "ЗадачаСсылка.");
	
	// Регистры
	Результат = СтрЗаменить(Результат, "РегистрСведений.",    "РегистрСведенийЗапись.");
	Результат = СтрЗаменить(Результат, "РегистрНакопления.",  "РегистрНакопленияЗапись.");
	Результат = СтрЗаменить(Результат, "РегистрБухгалтерии.", "РегистрБухгалтерииЗапись.");
	Результат = СтрЗаменить(Результат, "РегистрРасчета.",     "РегистрРасчетаЗапись.");
	
	Возврат Результат;
	
КонецФункции // ПолучитьТипОбъектаМетаданных()

Функция ПолучитьУИИмениТипа(ИмяТипа)
	
	УИ = мСоответствиеИменТиповОбъектовУИ[ИмяТипа];
	
	Если УИ = Неопределено Тогда
		
		УИ = Новый УникальныйИдентификатор();
		мСоответствиеИменТиповОбъектовУИ.Вставить(ИмяТипа, УИ);
		
	КонецЕсли;
	
	Возврат УИ;
	
КонецФункции // ПолучитьУИИмениТипа()

Функция ПолучитьПредопределенныеТабличныеЧастиПВР(Объект)
	
	ТабличныеЧасти = Новый ТаблицаЗначений;
	ТабличныеЧасти.Колонки.Добавить("Имя");
	ТабличныеЧасти.Колонки.Добавить("Синоним");
	ТабличныеЧасти.Колонки.Добавить("Комментарий");
	ТабличныеЧасти.Колонки.Добавить("Реквизиты");
	
	// Таблица "БазовыеВидыРасчета"
	Если Объект.БазовыеВидыРасчета.Количество() > 0 Тогда
		
		МассивТиповВР = Новый Массив;
		
		//Типы определены в коллекции "БазовыеВидыРасчета"
		Для Каждого ОбъектМетаданныхПВР ИЗ Объект.БазовыеВидыРасчета Цикл
			
			МассивТиповВР.Добавить(Тип("ПланВидовРасчетаСсылка."+ОбъектМетаданныхПВР.Имя));
			
		КонецЦикла;
		
		ТабличнаяЧасть = ТабличныеЧасти.Добавить();
		ТабличнаяЧасть.Имя         = "БазовыеВидыРасчета";
		ТабличнаяЧасть.Синоним     = "Базовые виды расчета";
		ТабличнаяЧасть.Комментарий = "Предопределенный объект";
		ТабличнаяЧасть.Реквизиты   = ПолучитьРеквизитыПредопределеннойТабличнойЧастиПВР(МассивТиповВР);
		
	КонецЕсли;
	
	// Таблица "ВедущиеВидыРасчета"
	МассивТиповВР = Новый Массив;
	
	//Тип может быть любая ссылка ПВР
	Для Каждого ОбъектМетаданныхПВР ИЗ Метаданные["ПланыВидовРасчета"] Цикл
		
		МассивТиповВР.Добавить(Тип("ПланВидовРасчетаСсылка."+ОбъектМетаданныхПВР.Имя));
		
	КонецЦикла;
	
	ТабличнаяЧасть = ТабличныеЧасти.Добавить();
	ТабличнаяЧасть.Имя         = "ВедущиеВидыРасчета";
	ТабличнаяЧасть.Синоним     = "Ведущие виды расчета";
	ТабличнаяЧасть.Комментарий = "Предопределенный объект";
	ТабличнаяЧасть.Реквизиты   = ПолучитьРеквизитыПредопределеннойТабличнойЧастиПВР(МассивТиповВР);
	
	// Таблица "ВытесняющиеВидыРасчета"
	Если Объект.ИспользованиеПериодаДействия Тогда
		
		// Тип ВР - ссылка на ПВР-родитель, в котором заведен этот ВР
		МассивТиповВР = Новый Массив;
		МассивТиповВР.Добавить(Тип("ПланВидовРасчетаСсылка."+Объект.Имя));
		
		ТабличнаяЧасть = ТабличныеЧасти.Добавить();
		ТабличнаяЧасть.Имя         = "ВытесняющиеВидыРасчета";
		ТабличнаяЧасть.Синоним     = "Вытесняющие виды расчета";
		ТабличнаяЧасть.Комментарий = "Предопределенный объект";
		ТабличнаяЧасть.Реквизиты   = ПолучитьРеквизитыПредопределеннойТабличнойЧастиПВР(МассивТиповВР);
		
	КонецЕсли;
	
	Возврат ТабличныеЧасти;
КонецФункции

Функция ПолучитьРеквизитыПредопределеннойТабличнойЧастиПВР(МассивТиповВР)
	
	РеквизитыТабличнойЧасти = Новый ТаблицаЗначений;
	РеквизитыТабличнойЧасти.Колонки.Добавить("Имя");
	РеквизитыТабличнойЧасти.Колонки.Добавить("Синоним");
	РеквизитыТабличнойЧасти.Колонки.Добавить("Комментарий");
	РеквизитыТабличнойЧасти.Колонки.Добавить("Тип");
	
	Реквизит = РеквизитыТабличнойЧасти.Добавить();
	Реквизит.Имя         = "ВидРасчета";
	Реквизит.Синоним     = "Вид расчета";
	Реквизит.Комментарий = "";
	Реквизит.Тип         = Новый ОписаниеТипов(МассивТиповВР);
	
	Возврат РеквизитыТабличнойЧасти;
КонецФункции

Процедура ЗаполнитьТаблицуОбщихРеквизитов()
	
	ЕстьОбщиеРеквизиты = Ложь;
	
	Если Метаданные.ОбщиеРеквизиты.Количество() <> 0 Тогда
		
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			
			Если ОбщийРеквизит.ИспользованиеРазделенияДанных = Неопределено Тогда
				
				Автоиспользование = (ОбщийРеквизит.Автоиспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
				
				Если Не ЕстьОбщиеРеквизиты Тогда
					
					ИнициализироватьТаблицуОбщихРеквизитов();
					ЕстьОбщиеРеквизиты = Истина;
					
				КонецЕсли;
				
				Для Каждого Элемент Из ОбщийРеквизит.Состав Цикл
					
					Если Элемент.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
						Или (Элемент.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И Автоиспользование) Тогда
						
						НоваяСтрока = ТаблицаОбщихРеквизитов.Найти(Элемент.Метаданные.ПолноеИмя(), "Метаданные");
						
						Если НоваяСтрока = Неопределено Тогда
							
							НоваяСтрока = ТаблицаОбщихРеквизитов.Добавить();
							НоваяСтрока.Метаданные = Элемент.Метаданные.ПолноеИмя();
							НоваяСтрока.МассивОбщихРеквизитов = Новый Массив;
							
						КонецЕсли;
						
						НоваяСтрока.МассивОбщихРеквизитов.Добавить(ОбщийРеквизит);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуОбщихРеквизитов()
	
	ТаблицаОбщихРеквизитов = Новый ТаблицаЗначений;
	ТаблицаОбщихРеквизитов.Колонки.Добавить("Метаданные");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("МассивОбщихРеквизитов");
	
	ТаблицаОбщихРеквизитов.Индексы.Добавить("Метаданные");
	
КонецПроцедуры

// Возвращает текущее значение версии обработки
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Текущее значение версии обработки
//
Функция ВерсияОбъекта() Экспорт
	
	Возврат "2.1.8";
	
КонецФункции

Процедура КД3_ВыгрузитьПрочиеОбъекты(ИмяОбъекта, ПрефиксИмени, Представление)
	
	КоличествоОбъектов = Метаданные[ИмяОбъекта].Количество();
	
	Если КоличествоОбъектов = 0 Тогда
		
		Возврат;
		
	Иначе
		
		мКоличествоОбъектов = мКоличествоОбъектов + КоличествоОбъектов + 1;
		
	КонецЕсли;
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	    мОбъектРодитель = Новый УникальныйИдентификатор();
		ЗаписатьXML(мЗаписьXML, мОбъектРодитель, "Ref");
		ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Истина, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
		ЗаписатьXML(мЗаписьXML, ИмяОбъекта, "Description");
		ЗаписатьXML(мЗаписьXML, Представление, "Имя");
		ЗаписатьXML(мЗаписьXML, ИмяОбъекта, "Синоним");
		ЗаписатьXML(мЗаписьXML, "", "Комментарий");
		ЗаписатьXML(мЗаписьXML, "", "Тип");
	мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Объекты"
	
	ИнициализацияИндикатора(ИмяОбъекта);
	
	Для каждого Объект из Метаданные[ИмяОбъекта] Цикл
		
		КД3_ВыгрузитьПрочийОбъект(Объект, ПрефиксИмени);
		КД3_ВыгрузитьСвойстваПрочихОбъектов(Объект);
		КД3_ВыгрузитьТабличныеЧастиПрочихОбъектов(Объект);
		
		ИнкрементацияИндикатора();
		
	КонецЦикла;
	
КонецПроцедуры // КД3_ВыгрузитьПрочиеОбъекты()

Процедура КД3_ВыгрузитьПрочийОбъект(Объект, ПрефиксИмени)
	
	мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Объекты");
	
		ИмяТипаОбъекта = ПрефиксИмени + Объект.Имя;
		
		УИОбъекта = ПолучитьУИИмениТипа(ИмяТипаОбъекта);
		мОбъектВладелец = УИОбъекта;
		
		ЗаписатьXML(мЗаписьXML, УИОбъекта, "Ref");
		ЗаписатьXML(мЗаписьXML, Ложь, "IsFolder");
		ЗаписатьXML(мЗаписьXML, Истина, "DeletionMark");
		мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
			мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Конфигурации");
			мЗаписьXML.ЗаписатьТекст(Строка(мКонфигурацияВладелец));
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
		ЗаписатьXML(мЗаписьXML, мОбъектРодитель, "Parent");
		ЗаписатьXML(мЗаписьXML, ИмяТипаОбъекта, "Description");
		ЗаписатьXML(мЗаписьXML, Объект.Имя, "Имя");
		ЗаписатьXML(мЗаписьXML, Объект.Синоним, "Синоним");
		ЗаписатьXML(мЗаписьXML, Объект.Комментарий, "Комментарий");
		// КД3 Тип не указывается, так как объект не используется
		ЗаписатьXML(мЗаписьXML, "", "Тип");
		
		ВыгрузитьНастраиваемыеСвойстваОбъекта(Объект);
		
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // КД3_ВыгрузитьПрочийОбъект()

Процедура КД3_ВыгрузитьСвойстваПрочихОбъектов(Объект)
	
	Родитель = "00000000-0000-0000-0000-000000000000";
	
	~Реквизиты:
	
	Попытка
		
		Свойства = Объект.Реквизиты;
		
	Исключение
		
		Перейти ~КонецПроцедуры;
		
	КонецПопытки;
	
	Для каждого Свойство из Свойства Цикл
		
		ВыгрузитьСвойство(Свойство, "Реквизит", Родитель, Неопределено, Истина);
		
	КонецЦикла;
	
	~КонецПроцедуры:
	
КонецПроцедуры // КД3_ВыгрузитьСвойства()

Процедура КД3_ВыгрузитьТабличныеЧастиПрочихОбъектов(Объект)
	
	Попытка
		
		ТабличныеЧасти = Объект.ТабличныеЧасти;
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
		
		мКоличествоСвойств = мКоличествоСвойств + 1;
		
		мЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Свойства");
		
			УИСвойства = Новый УникальныйИдентификатор();
			
			ЗаписатьXML(мЗаписьXML, УИСвойства, "Ref");
			ЗаписатьXML(мЗаписьXML, Истина, "IsFolder");
			ЗаписатьXML(мЗаписьXML, Истина, "DeletionMark");
			мЗаписьXML.ЗаписатьНачалоЭлемента("Owner");
				мЗаписьXML.ЗаписатьАтрибут("xsi:type", "CatalogRef.Объекты");
				мЗаписьXML.ЗаписатьТекст(Строка(мОбъектВладелец));
			мЗаписьXML.ЗаписатьКонецЭлемента(); // "Owner"
			ЗаписатьXML(мЗаписьXML, "00000000-0000-0000-0000-000000000000", "Parent");
			ЗаписатьXML(мЗаписьXML, 0, "Code");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Имя, "Description");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Синоним, "Синоним");
			ЗаписатьXML(мЗаписьXML, ТабличнаяЧасть.Комментарий, "Комментарий");
			ЗаписатьXML(мЗаписьXML, "ТабличнаяЧасть", "Вид");
			ЗаписатьXML(мЗаписьXML, "", "ТипыСтрокой");
			ЗаписатьXML(мЗаписьXML, "", "Типы");
		
		мЗаписьXML.ЗаписатьКонецЭлемента(); // "CatalogObject.Свойства"
		
		Для каждого Свойство из ТабличнаяЧасть.Реквизиты Цикл
			
			ВыгрузитьСвойство(Свойство, "Реквизит", УИСвойства, Неопределено, Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // КД3_ВыгрузитьТабличныеЧасти()

мЗначенийСвойстваИндексирование = Метаданные.СвойстваОбъектов.Индексирование.Индексировать;
мЗначенийСвойстваИндексированиеСДопУпорядочиванием = Метаданные.СвойстваОбъектов.Индексирование.ИндексироватьСДопУпорядочиванием;

мСоответствиеРегистровИРегистраторов = Неопределено;
мСоответствиеРегистраторовЗаполнено = Ложь;

мТипСтрока = Тип("Строка");
мТипЧисло = Тип("Число");
мТипДата = Тип("Дата");
мТипБулево = Тип("Булево");
мТипХранилищеЗначения = Тип("ХранилищеЗначения");
мТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");