
Функция ИспользоватьРедакторКода() Экспорт
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Возврат Ложь;
	Иначе
		Возврат ЗначениеНастройки("ИспользоватьРедакторКода");
	КонецЕсли;
КонецФункции

Функция ИспользоватьКонтекстнуюПодсказку() Экспорт
	Возврат ЗначениеНастройки("ИспользоватьКонтекстнуюПодсказку");
КонецФункции

Функция ПарсерМодулей() Экспорт
	Возврат ЗначениеНастройки("ПарсерМодулей");
КонецФункции

Функция ЗагрузитьНастройки() Экспорт
	Настройки = НастройкиПоУмолчанию();
	Для Каждого КлючИЗначение Из Настройки Цикл
		НовоеЗначение = ХранилищеОбщихНастроек.Загрузить("КД3_Настройки", КлючИЗначение.Ключ);
		Если НовоеЗначение <> Неопределено Тогда
			Настройки.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат Настройки;
КонецФункции

Процедура СохранитьНастройки(ТекущиеНастройки) Экспорт
	Настройки = НастройкиПоУмолчанию();
	ЗаполнитьЗначенияСвойств(Настройки, ТекущиеНастройки);
	Для Каждого КлючИЗначение Из Настройки Цикл
		ХранилищеОбщихНастроек.Сохранить("КД3_Настройки", КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

Функция НастройкиПоУмолчанию() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("Тема", "bsl-white");
	Настройки.Вставить("ИспользоватьРедакторКода", Истина);
	Настройки.Вставить("ИспользоватьКонтекстнуюПодсказку", Истина);
	Настройки.Вставить("ОтображатьКартуКода", Ложь);
	Настройки.Вставить("ПодсветкаЯзыкаЗапросов", Ложь);
	Настройки.Вставить("УдалятьВременныеФайлыПриЗакрытии", Истина);
	Настройки.Вставить("ОтображатьНомераСтрок", Истина);
	Настройки.Вставить("КоличествоПотоков", 1);
	Настройки.Вставить("ПарсерМодулей", "RegExp");
	Возврат Настройки;
КонецФункции

Функция ВерсияКонсолиКода(ЭтоЛинуксКлиент) Экспорт
	ОписаниеВерсии = Новый Структура("Информация,Версия,ПодкаталогИсходников");
	ДанныеМакета = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИмяНастроекКонсолиКода(ЭтоЛинуксКлиент));
	Если ДанныеМакета = Неопределено Тогда
		ОписаниеВерсии.Вставить("Информация", "Загружена из макета");
		ОписаниеВерсии.Вставить("Версия", Метаданные.ОбщиеМакеты[ИмяМакетаКонсолиКода(ЭтоЛинуксКлиент)].Комментарий);
	Иначе
		ЗаполнитьЗначенияСвойств(ОписаниеВерсии, ДанныеМакета);
	КонецЕсли;
	ОписаниеВерсии.Вставить("ПодкаталогИсходников", ПодкаталогИсходников());
	Возврат ОписаниеВерсии;
КонецФункции

Функция ДвоичныеДанныеКонсолиКода(ЭтоЛинуксКлиент) Экспорт
	ДанныеАрхива = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИмяНастроекКонсолиКода(ЭтоЛинуксКлиент));
	Если ДанныеАрхива = Неопределено Тогда
		ДвоичныеДанные = ПолучитьОбщийМакет(ИмяМакетаКонсолиКода(ЭтоЛинуксКлиент));
	Иначе
		ДвоичныеДанные = ДанныеАрхива.ДвоичныеДанные;
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
КонецФункции

Процедура УстановитьВерсиюКонсолиКода(ЭтоЛинуксКлиент, АдресМакета, ИсточникИнфо = Неопределено) Экспорт
	Если АдресМакета = Неопределено Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИмяНастроекКонсолиКода(ЭтоЛинуксКлиент));
	Иначе
		ДанныеМакета = Новый Структура;
		ДанныеМакета.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(АдресМакета));
		ДанныеМакета.Вставить("Информация", "Загружена из " + ИсточникИнфо);
		ДанныеМакета.Вставить("Версия", Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddhhmmss;"));
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяНастроекКонсолиКода(ЭтоЛинуксКлиент), ДанныеМакета);
	КонецЕсли;
КонецПроцедуры

Функция ИмяНастроекКонсолиКода(ЭтоЛинуксКлиент)
	Возврат ?(ЭтоЛинуксКлиент, "КД3_bsl_console_linux", "КД3_bsl_console");
КонецФункции

Функция ИмяМакетаКонсолиКода(ЭтоЛинуксКлиент)
	Возврат ?(ЭтоЛинуксКлиент, "КД3_src_linux", "КД3_src");
КонецФункции

Функция ПодкаталогИсходников()
	// Получение уникального идентификатора текущей ИБ
	ДанныеИБ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("КД3", "ДанныеИБ");
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ДанныеИБ = Неопределено ИЛИ ДанныеИБ.СтрокаСоединения <> СтрокаСоединения Тогда
		ДанныеИБ = Новый Структура("СтрокаСоединения,ИД", СтрокаСоединения, СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("КД3", ДанныеИБ, "ДанныеИБ");
	КонецЕсли;
	Возврат "bsl_console_" + ДанныеИБ.ИД;
КонецФункции

Функция ЗначениеНастройки(ИмяНастройки)
	Настройки = НастройкиПоУмолчанию();
	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить("КД3_Настройки", ИмяНастройки);
	Возврат ?(СохраненноеЗначение = Неопределено, Настройки[ИмяНастройки], СохраненноеЗначение);
КонецФункции