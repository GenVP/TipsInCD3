
Функция ИспользоватьРедакторКода() Экспорт
	Настройки = НастройкиПоУмолчанию();
	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить("КД3_Настройки", "ИспользоватьРедакторКода");
	Возврат ?(СохраненноеЗначение = Неопределено, Настройки.ИспользоватьРедакторКода, СохраненноеЗначение);
КонецФункции

Функция ИспользоватьКонтекстнуюПодсказку() Экспорт
	Настройки = НастройкиПоУмолчанию();
	СохраненноеЗначение = ХранилищеОбщихНастроек.Загрузить("КД3_Настройки", "ИспользоватьКонтекстнуюПодсказку");
	Возврат ?(СохраненноеЗначение = Неопределено, Настройки.ИспользоватьРедакторКода, СохраненноеЗначение);
КонецФункции

Функция ЗагрузитьНастройки() Экспорт
	Настройки = НастройкиПоУмолчанию();
	Для Каждого КлючИЗначение Из Настройки Цикл
		НовоеЗначение = ХранилищеОбщихНастроек.Загрузить("КД3_Настройки", КлючИЗначение.Ключ);
		Если НовоеЗначение <> Неопределено Тогда
			Настройки.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат Настройки;
КонецФункции

Процедура СохранитьНастройки(ТекущиеНастройки) Экспорт
	Настройки = НастройкиПоУмолчанию();
	ЗаполнитьЗначенияСвойств(Настройки, ТекущиеНастройки);
	Для Каждого КлючИЗначение Из Настройки Цикл
		ХранилищеОбщихНастроек.Сохранить("КД3_Настройки", КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

Функция НастройкиПоУмолчанию() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("Тема", "bsl-white");
	Настройки.Вставить("ИспользоватьРедакторКода", Истина);
	Настройки.Вставить("ИспользоватьКонтекстнуюПодсказку", Истина);
	Настройки.Вставить("ОтображатьКартуКода", Ложь);
	Настройки.Вставить("ПодсветкаЯзыкаЗапросов", Ложь);
	Настройки.Вставить("УдалятьВременныеФайлыПриЗакрытии", Истина);
	Настройки.Вставить("ОтображатьНомераСтрок", Истина);
	Возврат Настройки;
КонецФункции

// Возвращает ключ под которым сохраняются описания метаданных конфигурации в кэше
//
// Параметры:
//  Конфигурация - СправочникСсылка.Конфигурации - конфигурация
//
// Возвращаемое значение:
//  Строка - ключ настроек
//
Функция КлючКэшаНастроек(Конфигурация) Экспорт
	Возврат "КД3." + XMLСтрока(Конфигурация);
КонецФункции

Функция ПолучитьФайлМакетаИсходников() Экспорт
	ДанныеМакета = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("КД3_bsl_console");
	Если ДанныеМакета = Неопределено Тогда
		ДанныеМакета = Новый Структура;
		ДанныеМакета.Вставить("ДвоичныеДанные", ПолучитьОбщийМакет("КД3_src"));
		ДанныеМакета.Вставить("Информация",
			"Загружена из макета ""КД3_src""
			|Версия " + Метаданные.ОбщиеМакеты.КД3_src.Комментарий);
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(ДанныеМакета);
КонецФункции

Процедура УстановитьФайлМакетаИсходников(АдресМакета, ПолноеИмяФайла) Экспорт
	Если АдресМакета = Неопределено Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("КД3_bsl_console");
	Иначе
		ВерсияОбработки = "";
		Если СтрЗаканчиваетсяНа(ПолноеИмяФайла, "console.epf") Тогда
			ДанныеМакета = ДвоичныеДанныеИсходниковИзФайлаОбработки(АдресМакета, ПолноеИмяФайла);
		Иначе
			ДанныеМакета = ДвоичныеДанныеИсходниковИзФайлаАрхива(АдресМакета, ПолноеИмяФайла);
		КонецЕсли;
		Если ДанныеМакета.ДвоичныеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("КД3_bsl_console", ДанныеМакета);
	КонецЕсли;
КонецПроцедуры

Функция ПодкаталогИсходников() Экспорт
	// Получение уникального идентификатора текущей ИБ
	УИД_ИБ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("КД3", "УИД_ИБ");
	Если УИД_ИБ = Неопределено Тогда
		УИД_ИБ = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("КД3", УИД_ИБ, "УИД_ИБ");
	КонецЕсли;
	КаталогИсходников = "bsl_console" + СтрЗаменить(Метаданные.ОбщиеМакеты.КД3_src.Комментарий, ".", "") + "_" + УИД_ИБ;
	Возврат КаталогИсходников;
КонецФункции

Функция ДвоичныеДанныеИсходниковИзФайлаОбработки(АдресМакета, ПолноеИмяФайла)
	
	ДанныеМакета = Новый Структура("ДвоичныеДанные");
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресМакета);
	Попытка
		ВремИмяФайла = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные.Записать(ВремИмяФайла);
		ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		ТестОбработка = ВнешниеОбработки.Создать(ВремИмяФайла, Истина, ЗащитаОтОпасныхДействий);
		УдалитьФайлы(ВремИмяФайла);
		ВерсияОбработки = ТестОбработка.СведенияОВнешнейОбработке().Версия;
	Исключение
		ТекстСообщения = "Не удалось прочитать данные обработки" + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат ДанныеМакета;
	КонецПопытки;
	Если ТестОбработка.Метаданные().Макеты.Найти("src") = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("В обработке не найден макет ""src"" с исходниками");
		Возврат ДанныеМакета;
	КонецЕсли;
	
	ТекстИнформация = СтрШаблон(
		"Загружена из файла:
		|%1
		|Дата загрузки: %2
		|Пользователь: %3
		|Версия: %4",
		ПолноеИмяФайла, ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь(), ВерсияОбработки);
	
	ДанныеМакета.ДвоичныеДанные = ТестОбработка.ПолучитьМакет("src");
	ДанныеМакета.Вставить("Информация", ТекстИнформация);
	
	Возврат ДанныеМакета;
	
КонецФункции

Функция ДвоичныеДанныеИсходниковИзФайлаАрхива(АдресМакета, ПолноеИмяФайла)
	
	ДанныеМакета = Новый Структура("ДвоичныеДанные");
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресМакета);
	ПотокДляЧтения = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ZipФайлАрхива = Новый ЧтениеZipФайла(ПотокДляЧтения);
	ФайлМаркер = ZipФайлАрхива.Элементы.Найти("index.html");
	Если ФайлМаркер = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю("В архиве не найден файл index.html исходников");
		Возврат ДанныеМакета;
	Конецесли;
	Если ФайлМаркер.Путь <> "" ИЛИ СтрНайти(ФайлМаркер.Путь, "src") <> 0 Тогда
		// Переданы исходники с вложенным каталогом "src"
		// Сохранение файлов из подкаталога "src" в отдельный архив
		ВремИмяФайла = ПолучитьИмяВременногоФайла("tmp");
		ZipФайлАрхива.ИзвлечьВсе(ВремИмяФайла);
		ZipФайлИсходников = Новый ЗаписьZipФайла;
		ZipФайлИсходников.Добавить(ВремИмяФайла + ПолучитьРазделительПутиСервера() + ФайлМаркер.Путь + "*.*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ДвоичныеДанные = ZipФайлИсходников.ПолучитьДвоичныеДанные();
		УдалитьФайлы(ВремИмяФайла);
	КонецЕсли;
	
	ТекстИнформация = СтрШаблон(
		"Загружена из файла:
		|%1
		|Дата загрузки: %2
		|Пользователь: %3",
		ПолноеИмяФайла, ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
	
	ДанныеМакета.ДвоичныеДанные = ДвоичныеДанные;
	ДанныеМакета.Вставить("Информация", ТекстИнформация);
	
	Возврат ДанныеМакета;
	
КонецФункции
