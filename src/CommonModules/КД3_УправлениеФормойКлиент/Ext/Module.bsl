
Процедура ИнициализацияРедактора(Форма, ИмяРеквизита, Объект, ТолькоПросмотр = Ложь) Экспорт
	ИмяОбработчика = Сред(ИмяРеквизита, 5);
	ТекстОбработчика = ?(ТолькоПросмотр, Форма[ИмяОбработчика], Объект[ИмяОбработчика]);
	КД3_РедакторКодаКлиент.ИнициализацияРедактора(Форма, ИмяРеквизита, ТекстОбработчика, ТолькоПросмотр);
КонецПроцедуры

Процедура ПередЗаписью(Форма, Отказ) Экспорт
	СохранитьИзмененныйОбработчик(Форма);
КонецПроцедуры

Процедура ПриСменеСтраницы(Форма, СтраницаИлиОбработчик) Экспорт
	
	СохранитьИзмененныйОбработчик(Форма);
	
	Если ТипЗнч(СтраницаИлиОбработчик) = Тип("Строка") Тогда
		ИмяОбработчика = СтраницаИлиОбработчик;
	Иначе
		ЭлементСписка = Форма.КД3_СтраницыОбработчиков.НайтиПоЗначению(СтраницаИлиОбработчик.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Возврат; // Это алгоритм или запрос
		КонецЕсли;
		ИмяОбработчика = ЭлементСписка.Представление;
	КонецЕсли;
	
	КД3_РедакторКодаКлиент.ИзвлечьИсходники();
	
	// Инициализация загрузки обработчика будет выполнена в процедуре формы
	// КД3_Подключаемый_ДокументСформирован после того, как он станет видимым
	ИмяРеквизита = "КД3_" + ИмяОбработчика;
	Если Форма[ИмяРеквизита] = "" Тогда
		Форма[ИмяРеквизита] = КД3_РедакторКодаКлиент.ПутьРедактораКода();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОбъектаКонфигурации(Форма, ОбъектКонфигурации, ЭтоКонвертацияXDTO, ДляКорреспондента) Экспорт
	
	ОбновитьСписокКонфигураций = Ложь;
	ОчиститьМетаданные = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ОбъектКонфигурации) Тогда
		// Если объект не заполнен, то получение конфигураций по конвертациям и проверка текущих конфигураций (как сейчас)
		ОбновитьСписокКонфигураций = Истина;
	Иначе
		// Если объект заполнен, то получение его конфигурации
		Конфигурация = КД3_УправлениеФормойВызовСервера.КонфигурацияОбъекта(ОбъектКонфигурации);
		ТекущаяКонфигурация = ?(ДляКорреспондента, Форма.КД3_КонфигурацияКорреспондента, Форма.КД3_Конфигурация);
		
		// 1 Если конфигурация не поменялась, то ничего не меняем
		Если Конфигурация = ТекущаяКонфигурация Тогда
			Возврат;
		КонецЕсли;
		
		СписокКонфигураций = ?(ДляКорреспондента, Форма.Элементы.КД3_КонфигурацияКорреспондента.СписокВыбора, Форма.Элементы.КД3_Конфигурация.СписокВыбора);
		Если СписокКонфигураций.Количество() > 1 Тогда
			// 2 Если конфигураций несколько (значит раньше объект был не заполнен):
			// 2.1 Если конфигурации нет в списке, то вывод ошибке и ничего не меняем
			Если СписокКонфигураций.НайтиПоЗначению(Конфигурация) = Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("Конфигурация объекта %1 не входит в состав конвертаций", Конфигурация));
				Возврат;
			КонецЕсли;
			// 2.2 Если конфигурация есть в списке, то обновление метаданных
			Если ДляКорреспондента Тогда
				Форма.КД3_КонфигурацияКорреспондента = Конфигурация;
			Иначе
				Форма.КД3_Конфигурация = Конфигурация;
			КонецЕсли;
			ОчиститьМетаданные = Истина;
			КД3_УправлениеФормойКлиент.ОчиститьМетаданныеКонфигурации(Форма, ДляКорреспондента);
		Иначе
			// 3 Если конфигурация одна (значит объект был заполнен или конфигурация всего одна)
			// 3.2 Получение доступных конфигураци по конвертациям и объекту и обновление метаданных (как сейчас)
			ОбновитьСписокКонфигураций = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьСписокКонфигураций Тогда
		ОчиститьМетаданные = Ложь;
		КД3_УправлениеФормойКлиентСервер.ПриИзмененииКонвертаций(Форма, ЭтоКонвертацияXDTO, ОчиститьМетаданные);
	КонецЕсли;
	Если ОчиститьМетаданные Тогда
		КД3_УправлениеФормойКлиент.ОчиститьМетаданныеКонфигурации(Форма, ДляКорреспондента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияМетаданных(Форма) Экспорт
	
	КД3_РедакторКодаКлиент.ИнициализацияМетаданных(Форма, Ложь);
	КД3_РедакторКодаКлиент.ИнициализацияМетаданных(Форма, Истина);
	
КонецПроцедуры

Процедура ОчиститьМетаданныеКонфигурации(Форма, ДляКорреспондента) Экспорт
	Для Каждого ЭлементСписка Из Форма.КД3_Обработчики Цикл
		Если ЭлементСписка.Пометка = ДляКорреспондента Тогда
			КД3_РедакторКодаКлиент.ОчиститьМетаданные(Форма, "КД3_" + ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытиеHTML(Форма, Элемент, ДанныеСобытия) Экспорт
	Событие = ДанныеСобытия.Event.eventData1C;
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Событие.event = "EVENT_GET_METADATA" Тогда
		Если КД3_НастройкиКлиент.ИспользоватьКонтекстнуюПодсказку() Тогда
			ВызватьОбновлениеМетаданных(Форма, Элемент.Имя, Событие.params)
		КонецЕсли;
	ИначеЕсли Событие.event = "EVENT_CONTENT_CHANGED" Тогда
		Форма.Модифицированность = Истина;
		Если Форма.КД3_ИзмененныйРеквизит <> Элемент.Имя Тогда
			СохранитьИзмененныйОбработчик(Форма);
			Форма.КД3_ИзмененныйРеквизит = Элемент.Имя;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КомандаРедактора(ЭтотОбъект, Команда) Экспорт
	ПозРазделителя = СтрНайти(Команда.Имя, "_", НаправлениеПоиска.СКонца);
	ИмяРеквизита = Лев(Команда.Имя, ПозРазделителя -1);
	ИмяКоманды = Сред(Команда.Имя, ПозРазделителя + 1);
	Если ИмяКоманды = "Закомментировать" Тогда
		КД3_РедакторКодаКлиент.Закомментировать(ЭтотОбъект, ИмяРеквизита);
	ИначеЕсли ИмяКоманды = "УбратьКомментарии" Тогда
		КД3_РедакторКодаКлиент.УбратьКомментарии(ЭтотОбъект, ИмяРеквизита);
	ИначеЕсли ИмяКоманды = "КонструкторФорматнойСтроки" Тогда
		ВызватьКонструкторФорматнойСтроки(ЭтотОбъект, ИмяРеквизита);
	ИначеЕсли ИмяКоманды = "Форматировать" Тогда
		КД3_РедакторКодаКлиент.Форматировать(ЭтотОбъект, ИмяРеквизита);
	ИначеЕсли ИмяКоманды = "ДобавитьПереносСтроки" Тогда
		КД3_РедакторКодаКлиент.ДобавитьПереносСтроки(ЭтотОбъект, ИмяРеквизита);
	ИначеЕсли ИмяКоманды = "УдалитьПереносСтроки" Тогда
		КД3_РедакторКодаКлиент.УдалитьПереносСтроки(ЭтотОбъект, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьИзмененныйОбработчик(Форма)
	
	Если ПустаяСтрока(Форма.КД3_ИзмененныйРеквизит) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = Сред(Форма.КД3_ИзмененныйРеквизит, 5);
	НовоеЗначение = КД3_РедакторКодаКлиент.ПолучитьТекст(Форма, Форма.КД3_ИзмененныйРеквизит);
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символ(13) + Символ(10), Символ(10));
	
	Форма.КД3_ИзмененныйРеквизит = "";
	
	Если НовоеЗначение = Форма.Объект[ИмяОбработчика] Тогда
		Возврат; // Произошла только замена LF на CR+LF
	КонецЕсли;
	Форма.Объект[ИмяОбработчика] = НовоеЗначение;
	
	СтраницаОбработчика = Форма.Элементы[ИмяОбработчика].Родитель;
	Если ТипЗнч(СтраницаОбработчика) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат; // Обработчик алгоритма или запроса
	КонецЕсли;
	СтраницаОбработчика.Картинка = ?(ПустаяСтрока(НовоеЗначение), Новый Картинка, БиблиотекаКартинок.Успешно);
	
КонецПроцедуры

Процедура ВызватьКонструкторФорматнойСтроки(Форма, ИмяРеквизита)
	
	ПараметрыСтроки = КД3_РедакторКодаКлиент.ПолучитьФорматнуюСтроку(Форма, ИмяРеквизита);
	
	ДопПараметры = Новый Структура("Форма,ИмяРеквизита", Форма, ИмяРеквизита);
	Если ПараметрыСтроки = Неопределено Тогда
		ДопПараметры.Вставить("ФорматНаяСтрока", "");
		ДопПараметры.Вставить("Позиция", Неопределено);
		
		Оповещение = Новый ОписаниеОповещения ("ОткрытьКонструкторФорматнойСтроки",
			ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_УправлениеФормойКлиент"), ДопПараметры);
		ТекстВопроса =
			"Форматная строка не найдена.
			|Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ДопПараметры.Вставить("ФорматНаяСтрока", ФорматнаяСтрока);
		ДопПараметры.Вставить("Позиция", ПараметрыСтроки.range);
		
		Оповещение = Новый ОписаниеОповещения ("ОткрытьКонструкторФорматнойСтроки",
			ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_УправлениеФормойКлиент"), ДопПараметры);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки",
		ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_УправлениеФормойКлиент"), ДопПараметры);
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст = ДопПараметры.ФорматнаяСтрока;
		Конструктор.Показать(Оповещение);
	Исключение
		ТекстСообщения = ИнформацияОбОшибке();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗакрытииКонструктораФорматнойСтроки(Текст, ДопПараметры) Экспорт
	
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
	Текст = СтрЗаменить(Текст, """", """""");
	Текст = """" + Текст + """";
	КД3_РедакторКодаКлиент.УстановитьТекст(ДопПараметры.Форма, ДопПараметры.ИмяРеквизита, Текст, ДопПараметры.Позиция);
	
КонецПроцедуры

Процедура ВызватьОбновлениеМетаданных(Форма, ИмяРеквизита, ПолноеИмяМетаданных)
	
	ИмяОбработчика = Сред(ИмяРеквизита, 5);
	ЭлементСписка = Форма.КД3_Обработчики.НайтиПоЗначению(ИмяОбработчика);
	Конфигурация = ?(ЭлементСписка.Пометка, Форма.КД3_КонфигурацияКорреспондент, Форма.КД3_Конфигурация);
	
	ОписаниеМетаданных = КД3_МетаданныеКлиент.ОписаниеМетаданных(Конфигурация, ПолноеИмяМетаданных);
	Если ОписаниеМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМодуль = СтрНачинаетсяС(ПолноеИмяМетаданных, "module");
	ТекстОшибки = КД3_РедакторКодаКлиент.ОбновитьМетаданные(Форма, ИмяРеквизита, ОписаниеМетаданных, ЭтоМодуль);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстСообщения = СтрШаблон("Ошибка обновления метаданных %1: %2", ПолноеИмяМетаданных, ТекстОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстПриТолькоПросмотр(Форма, ИмяОбработчика) Экспорт
	КД3_РедакторКодаКлиент.УстановитьТекстПриТолькоПросмотр(Форма, ИмяОбработчика);
КонецПроцедуры