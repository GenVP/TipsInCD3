#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьМетодыМодуля(ДанныеМодуля, ПолноеИмяФайла, ПараметрыЗагрузки) Экспорт
	
	ПодключитьВычислитель(ПараметрыЗагрузки);
	
	КД3_Вычислитель = ПараметрыЗагрузки.КД3_Вычислитель;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "UTF-8",,, Ложь);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если ТекстМодуля = Неопределено Тогда
		Возврат; // Пустой модуль
	КонецЕсли;
	
	Выражение = "^(^&[А-Яа-я\w]*\s*)?\s*((?:^[^\n\S]*\/\/[^\r\n]*\n)*)\s*(^&[А-Яа-я\w]*\s*)?(асинх\s+)?(процедура|функция)\s+([А-ЯЁа-яё\w]+)\s*\(([^)]*)\)\s*(экспорт)";
	Совпадения = ВычислительНайтиСовпадения(КД3_Вычислитель, ТекстМодуля, Выражение, "Директива0,Описание,Директива1,Асинх,Тип,Имя,Параметры,Экспорт");
	
	Для Каждого Совпадение Из Совпадения Цикл
		ОписаниеМетода = Совпадение.Описание;
		ВыделитьБлокОписания(КД3_Вычислитель, ОписаниеМетода, "Пример");
		ВыделитьБлокОписания(КД3_Вычислитель, ОписаниеМетода, "Возвращаемое значение");
		ОписаниеПараметры = ВыделитьБлокОписания(КД3_Вычислитель, ОписаниеМетода, "Параметры");
		ОписаниеМетода = УдалитьСлешиИзКомментария(КД3_Вычислитель, ОписаниеМетода);
		
		СтруктураПараметров = Новый Структура;
		
		ЗаполнитьПараметрыМетодаПоЗаголовку(КД3_Вычислитель, СтруктураПараметров, Совпадение.Параметры);
		ЗаполнитьПараметрыМетодаПоОписанию(КД3_Вычислитель, СтруктураПараметров, ОписаниеПараметры);
		
		ДанныеМетода = Новый Структура;
		ДанныеМетода.Вставить("name", Совпадение.Имя);
		ДанныеМетода.Вставить("name_en", Совпадение.Имя);
		ДанныеМетода.Вставить("description", УдалитьСлешиИзКомментария(КД3_Вычислитель, Совпадение.Описание));
		ДанныеМетода.Вставить("detail", ОписаниеМетода);
		ДанныеМетода.Вставить("returns", "");
		ДанныеМетода.Вставить("signature", Новый Структура("default", Новый Структура));
		
		ДанныеМетода.signature.default.Вставить("СтрокаПараметров", "(" + Совпадение.Параметры + ")");
		ДанныеМетода.signature.default.Вставить("Параметры", СтруктураПараметров);
		
		ДанныеМодуля.module.Вставить(Совпадение.Имя, ДанныеМетода);
	КонецЦикла;
	
	ДанныеМодуля.count = ДанныеМодуля.module.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодключитьВычислитель(ПараметрыЗагрузки)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	КД3_Вычислитель = Неопределено;
	Если ПараметрыЗагрузки.Свойство("КД3_Вычислитель", КД3_Вычислитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.23.0") < 0 Тогда
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
			Платформа = "Lin";
			Разрядность = "32";
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			Платформа = "Lin";
			Разрядность = "64";
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			Платформа = "Win";
			Разрядность = "32";
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			Платформа = "Win";
			Разрядность = "64";
		Иначе
			ВызватьИсключение "Не поддерживаемый тип платформы";
		КонецЕсли;
		Местоположение = "ОбщийМакет.КД3_RegEx" + Платформа + Разрядность;
		
		ПодключитьВнешнююКомпоненту(Местоположение, "ВычислительРегВыражений", ТипВнешнейКомпоненты.Native);
		КД3_Вычислитель = Новый("AddIn.ВычислительРегВыражений.RegEx");
		
		КД3_Вычислитель.IgnoreCase = Истина;
		КД3_Вычислитель.Global = Истина;
		КД3_Вычислитель.MultiLine = Истина;
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("КД3_Вычислитель", КД3_Вычислитель);
	
КонецПроцедуры

Функция ВыделитьБлокОписания(КД3_Вычислитель, ОписаниеМетода, ИмяБлока)
	
	Если ПустаяСтрока(ОписаниеМетода) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяБлокаРег = СтрЗаменить(НРег(ИмяБлока), " ", "\s+");
	Выражение = СтрЗаменить("^\s*\/\/\s*ИмяБлока\s*[:][\s\S]*", "ИмяБлока", ИмяБлокаРег);
	
	Совпадения = ВычислительНайтиСовпадения( КД3_Вычислитель, ОписаниеМетода, Выражение, "");
	Если Совпадения.Количество() <> 1 Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеМетода = Лев(ОписаниеМетода, Совпадения[0].Индекс);
	
	Возврат УдалитьСлешиИзКомментария(КД3_Вычислитель, Совпадения[0].Текст);
	
КонецФункции

Процедура ЗаполнитьПараметрыМетодаПоОписанию(КД3_Вычислитель, СтруктураПараметров, ОписаниеПараметры)
	
	Если СтруктураПараметров.Количество() = 0 ИЛИ ПустаяСтрока(ОписаниеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Индекс");
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Выражение = СтрЗаменить("^[\s]*Параметр\s*[-–]\s*\S*\s*[-–]", "Параметр", КлючИЗначение.Ключ);
		Совпадения = ВычислительНайтиСовпадения(КД3_Вычислитель, ОписаниеПараметры, Выражение, "");
		Если Совпадения.Количество() = 1 Тогда
			СтрокаТЗ = ТЗ.Добавить();
			СтрокаТЗ.Имя = КлючИЗначение.Ключ;
			СтрокаТЗ.Индекс = Совпадения[0].Индекс;
		КонецЕсли;
	КонецЦикла;
	ТЗ.Сортировать("Индекс");
	
	ИндексСтроки = 0;
	КоличествоСтрок = ТЗ.Количество();
	Пока ИндексСтроки < КоличествоСтрок Цикл
		СтрокаТЗ = ТЗ[ИндексСтроки];
		ИндексСтроки = ИндексСтроки + 1;
		Если ИндексСтроки = КоличествоСтрок Тогда
			ОписаниеПараметра = Сред(ОписаниеПараметры, СтрокаТЗ.Индекс);
		Иначе
			ОписаниеПараметра = Сред(ОписаниеПараметры, СтрокаТЗ.Индекс, ТЗ[ИндексСтроки].Индекс  - СтрокаТЗ.Индекс);
		КонецЕсли;
		СтруктураПараметров.Вставить(СтрокаТЗ.Имя, СокрЛ(ОписаниеПараметра));
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыМетодаПоЗаголовку(КД3_Вычислитель, СтруктураПараметров, СтрокаПараметров)
	
	Если СтрокаПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКомментарииИзЗаголовкаПараметров(СтрокаПараметров);
	
	Выражение = "[знач]?([А-Яа-я\w]+)\s*(?:=\s*[^,]*)?,";
	Совпадения = ВычислительНайтиСовпадения(КД3_Вычислитель, СтрокаПараметров + ",", Выражение, "Имя");
	Для Каждого Совпадение Из Совпадения Цикл
		СтруктураПараметров.Вставить(Совпадение.Имя, "");
	КонецЦикла;
	
КонецПроцедуры

Функция УдалитьСлешиИзКомментария(КД3_Вычислитель, ТекстКомментария)
	Возврат ВычеслительЗаменитьСовпадения(КД3_Вычислитель, ТекстКомментария, "(^\s*\/\/\s{0,2})", "");
КонецФункции

// Удаление комментариев из описания параметров метода
// Пример:
// Процедура ИмяПроцедуры(П1, //П2,
//		П3, П4 = Неопределено) Экспорт
//
Процедура УдалитьКомментарииИзЗаголовкаПараметров(СтрокаПараметров)
	
	ПозКомментария = СтрНайти(СтрокаПараметров, "//");
	НачПоз = 1;
	
	Пока ПозКомментария > 0 Цикл
		ПозРавно = СтрНайти(СтрокаПараметров, "=",, НачПоз);
		// Проверка "комментария" в случае: Функция Имя(П = " //", П2)
		Если ПозРавно = 0 ИЛИ ПозРавно > ПозКомментария Тогда
			ПозКавычек = 0; // Если равно перед комментарием нет, то и строкового значения быть не может
		Иначе
			ПозКавычек = СтрНайти(СтрокаПараметров, """", , ПозРавно + 1);
		КонецЕсли;
		Если ПозКавычек = 0 ИЛИ ПозКавычек > ПозКомментария Тогда
			// Удаление комментария
			ПозКонецСтроки = СтрНайти(СтрокаПараметров, Символы.ПС, , ПозКомментария);
			СтрокаПараметров = Лев(СтрокаПараметров, ПозКомментария - 1) + ?(ПозКонецСтроки = 0, "", Сред(СтрокаПараметров, ПозКонецСтроки + 1));
			Если ПозКонецСтроки = 0 Тогда
				Возврат; // Комментарий до конца строки
			КонецЕсли;
			// Поиск следующего комментария
			НачПоз = ПозКомментария;
			ПозКомментария = СтрНайти(СтрокаПараметров, "//",, НачПоз);
			Продолжить;
		КонецЕсли;
		// Строковое значение по умолчанию начинается до комментария.
		// Получение конечных кавычек и проверка их позиции до комментария
		Пока Истина Цикл
			ПозКавычек = СтрНайти(СтрокаПараметров, """", , ПозКавычек + 1);
			Если ПозКавычек =  0 ИЛИ ПозКавычек = СтрДлина(СтрокаПараметров) ИЛИ Сред(СтрокаПараметров, ПозКавычек + 1, 1) <> """" Тогда
				Прервать;
			КонецЕсли;
			ПозКавычек = ПозКавычек + 2; // Внутренние кавычки
		КонецЦикла;
		Если ПозКавычек = 0 Тогда
			Возврат; // Некорректный формат, не найдены конечные кавычки
		КонецЕсли;
		НачПоз = ПозКавычек + 1;
		Если ПозКавычек > ПозКомментария Тогда
			// Комментарий внутри кавычек. Поиск следующего комментария
			ПозКомментария = СтрНайти(СтрокаПараметров, "//",, НачПоз);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислительНайтиСовпадения(КД3_Вычислитель, Текст, Выражение, ИменаГрупп)
	
	Совпадения = Новый Массив;
	МассивГрупп = СтрРазделить(ИменаГрупп, ",", Ложь);
	
	Если КД3_Вычислитель = Неопределено Тогда
		РезультатыПоиска = Вычислить("СтрНайтиВсеПоРегулярномуВыражению(Текст, Выражение, Истина, Истина)");
		
		Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
			Совпадение = Новый Структура;
			Если МассивГрупп.Количество() = 0 Тогда
				Совпадение.Вставить("Индекс", РезультатПоиска.НачальнаяПозиция);
				Совпадение.Вставить("Текст", РезультатПоиска.Значение);
			Иначе
				Индекс = 0;
				Для Каждого ЗначениеГруппы Из РезультатПоиска.ПолучитьГруппы() Цикл
					Совпадение.Вставить(МассивГрупп[Индекс], ЗначениеГруппы.Значение);
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			Совпадения.Добавить(Совпадение);
		КонецЦикла;
	Иначе
		ТекстJSON = КД3_Вычислитель.MatchesJSON(Текст, Выражение);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		СовпаденияJSON = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
		
		Для Каждого СовпадениеJSON Из СовпаденияJSON Цикл
			Совпадение = Новый Структура;
			Если МассивГрупп.Количество() = 0 Тогда
				Совпадение.Вставить("Индекс", СовпадениеJSON.FirstIndex);
				Совпадение.Вставить("Текст", СовпадениеJSON.Value);
			Иначе
				Индекс = 0;
				Для Каждого ЗначениеГруппы Из СовпадениеJSON.SubMatches Цикл
					Совпадение.Вставить(МассивГрупп[Индекс], ЗначениеГруппы);
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			Совпадения.Добавить(Совпадение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Совпадения;
	
КонецФункции

Функция ВычеслительЗаменитьСовпадения(КД3_Вычислитель, Текст, Выражение, ТекстЗамены)
	Если КД3_Вычислитель = Неопределено Тогда
		Возврат Вычислить("СтрЗаменитьПоРегулярномуВыражению(Текст, Выражение, ТекстЗамены, Истина, Истина)");
	Иначе
		Возврат КД3_Вычислитель.Заменить(Текст, Выражение, ТекстЗамены);
	КонецЕсли;
КонецФункции

#КонецОбласти