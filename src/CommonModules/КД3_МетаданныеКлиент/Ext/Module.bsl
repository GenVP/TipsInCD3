
Процедура ПриОткрытии(Форма, Объект) Экспорт
	ИнициализацияОбработчиков(Форма, Объект);
КонецПроцедуры

Процедура ПередЗаписью(Форма, Объект, Отказ) Экспорт
	
	Если Не Отказ Тогда
		Для Каждого ЭлементСписка Из Форма["КД3_Обработчики"] Цикл
			ИмяОбработчика = ЭлементСписка.Значение;
			ИмяРеквизита = "КД3_" + ИмяОбработчика;
			Если Форма[ИмяРеквизита] <> "" Тогда
				ДокView = View(Форма, ИмяРеквизита);
				Если ДокView <> Неопределено Тогда
					НовоеЗначение = КД3_МетаданныеКлиент.ПолучитьТекст(Форма, ИмяРеквизита);
					Если НовоеЗначение <> Объект[ИмяОбработчика] Тогда
						Объект[ИмяОбработчика] = НовоеЗначение;
						Форма.Модифицированность = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзвлечьИсходники() Экспорт
	
	КаталогИсходников = КД3_Кэш()["КаталогИсходников"];
	Если КаталогИсходников = Неопределено Тогда
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		КаталогИсходников = КаталогВременныхФайлов + "bsl_console" + КД3_Метаданные.ВерсияИсходников() + "\";
		ТестФайл = Новый Файл(КаталогИсходников);
		Если НЕ ТестФайл.Существует() Тогда
			СоздатьКаталог(КаталогИсходников);
		КонецЕсли;
		
		// Получение файла макета общего для всех конфигураций
		ФайлМакета = КаталогИсходников + "bsl_console.zip";
		ТестФайл = Новый Файл(ФайлМакета);
		Если НЕ ТестФайл.Существует() Тогда
			ДанныеМакета = ПолучитьИзВременногоХранилища(КД3_Метаданные.ПолучитьФайлМакетаИсходников());
			ДанныеМакета.Записать(ФайлМакета);
		КонецЕсли;
		
		КД3_Кэш()["КаталогИсходников"] = КаталогИсходников;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОбработчиков(Форма, Объект) Экспорт
	
	КаталогИсходников = КД3_Кэш()["КаталогИсходников"];
	
	// Создание экземпляра для каждого обработчика. Экземпляр каждого обработчика должен
	// быть отдельным, иначе методы экземляра не будут успевать выполняться и будут ошибки.
	ФайлМакета = КаталогИсходников + "bsl_console.zip";
	ZipФайл = Новый ЧтениеZipФайла(ФайлМакета);
	Для Каждого ЭлементСписка Из Форма["КД3_Обработчики"] Цикл
		КаталогОбработчика = КаталогИсходников + ЭлементСписка.Значение + "\";
		ТестФайл = Новый Файл(КаталогОбработчика);
		Если НЕ ТестФайл.Существует() Тогда
			ZipФайл.ИзвлечьВсе(КаталогОбработчика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьМетаданные(Форма, ИмяИзмененногоОбработчика = Неопределено) Экспорт
	
	Если ИмяИзмененногоОбработчика = Неопределено Тогда
		Обработчики = Форма["КД3_Обработчики"].ВыгрузитьЗначения();
	Иначе
		Обработчики = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяИзмененногоОбработчика);
	КонецЕсли;
	
	Конфигурация = Форма["КД3_Конфигурация"];
	
	МетаданныеJSON = КД3_Кэш()[Конфигурация];
	Если МетаданныеJSON = Неопределено Тогда
		МетаданныеJSON = ПолучитьИзВременногоХранилища(КД3_Метаданные.КоллекцияМетаданных(Конфигурация));
		КД3_Кэш()[Конфигурация] = МетаданныеJSON;
	КонецЕсли;
	
	Для Каждого ИмяОбработчика Из Обработчики Цикл
		ИмяРеквизита = "КД3_" + ИмяОбработчика;
		Если Форма[ИмяРеквизита] <> "" Тогда
			ДокView = View(Форма, ИмяРеквизита);
			Если ДокView <> Неопределено Тогда
				Результат = ДокView.updateMetadata(МетаданныеJSON);
				Если ТипЗнч(Результат) <> Тип("Булево") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить метаданные для " + ИмяОбработчика + Символы.ПС + Результат.errorDescription);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция View(Форма, ИмяРеквизита)
	ДокHTML = Форма.Элементы[ИмяРеквизита].Документ;
	Если ДокHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДокHTML.defaultView;
КонецФункции

Процедура УстановитьТекст(Форма, ИмяРеквизита, Текст, Позиция = Неопределено) Экспорт
	View(Форма, ИмяРеквизита).setText(Текст, Позиция);
КонецПроцедуры

Функция ПолучитьТекст(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).getText();
КонецФункции

Функция ОчиститьТекст(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).eraseText();
КонецФункции
