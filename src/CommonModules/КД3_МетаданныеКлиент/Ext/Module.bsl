
Функция ИспользоватьРедакторКода() Экспорт
	Возврат КД3_Кэш()["КД3_Настройки_ИспользоватьРедакторКода"];
КонецФункции

Функция ИспользоватьКонтекстнуюПодсказку() Экспорт
	Возврат КД3_Кэш()["КД3_Настройки_ИспользоватьКонтекстнуюПодсказку"];
КонецФункции

Процедура ПередЗаписью(Форма, Отказ) Экспорт
	Если НЕ ИспользоватьРедакторКода() Тогда
		Возврат;
	КонецЕсли;
	СохранитьИзмененныйОбработчик(Форма);
КонецПроцедуры

Процедура ПриСменеСтраницы(Форма, СтраницаИлиОбработчик) Экспорт
	
	Если НЕ ИспользоватьРедакторКода() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьИзмененныйОбработчик(Форма);
	
	Если ТипЗнч(СтраницаИлиОбработчик) = Тип("Строка") Тогда
		ИмяОбработчика = СтраницаИлиОбработчик;
	Иначе
		ЭлементСписка = Форма.КД3_СтраницыОбработчиков.НайтиПоЗначению(СтраницаИлиОбработчик.Имя);
		Если ЭлементСписка = Неопределено Тогда
			Возврат; // Это алгоритм или запрос
		КонецЕсли;
		ИмяОбработчика = ЭлементСписка.Представление;
	КонецЕсли;
	
	ИзвлечьИсходники();
	
	// Инициализация загрузки страницы и метаданных обработчика в КД3_Подключаемый_ДокументСформирован как только он станет видимым
	ИмяРеквизита = "КД3_" + ИмяОбработчика;
	Если Форма[ИмяРеквизита] = "" Тогда
		Форма[ИмяРеквизита] = КД3_Кэш()["КаталогИсходников"] + "CommonEvent" + ПолучитьРазделительПутиКлиента() + "index.html";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзвлечьИсходники() Экспорт
	
	КаталогИсходников = КД3_Кэш()["КаталогИсходников"];
	Если КаталогИсходников = Неопределено Тогда
		
		ПодкаталогИсходников = КД3_Кэш()["ПодкаталогИсходников"];
		Если ПодкаталогИсходников = Неопределено Тогда
			ПодкаталогИсходников = КД3_Метаданные.ПодкаталогИсходников();
			КД3_Кэш()["ПодкаталогИсходников"] = ПодкаталогИсходников;
		Конецесли;
		
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		КаталогИсходников = КаталогВременныхФайлов + ПодкаталогИсходников + ПолучитьРазделительПутиКлиента();
		
		// Удаление каталогов старых версий
		СтарыеВерсии = НайтиФайлы(КаталогВременныхФайлов, "bsl_console*_*");
		Для Каждого Файл Из СтарыеВерсии Цикл
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЦикла;
		СоздатьКаталог(КаталогИсходников);
		
		// Получение файла макета общего для всех конфигураций
		КаталогОбработчика = КаталогИсходников + "CommonEvent" + ПолучитьРазделительПутиКлиента();
		ТестФайл = Новый Файл(КаталогОбработчика);
		Если НЕ ТестФайл.Существует() Тогда
			ДанныеМакета = ПолучитьИзВременногоХранилища(КД3_Метаданные.ПолучитьФайлМакетаИсходников());
			КД3_Кэш()["КонсольКодаИнформация"] = ДанныеМакета.Информация;
			ПотокДляЧтения = ДанныеМакета.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ZipФайл = Новый ЧтениеZipФайла(ПотокДляЧтения);
			Если НЕ ТестФайл.Существует() Тогда
				ZipФайл.ИзвлечьВсе(КаталогОбработчика);
			КонецЕсли;
		КонецЕсли;
		
		КД3_Кэш()["КаталогИсходников"] = КаталогИсходников;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИсходники() Экспорт
	КаталогИсходников = КД3_Кэш()["КаталогИсходников"];
	Если КаталогИсходников = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьФайлы(КаталогИсходников);
	КД3_Кэш()["КаталогИсходников"] = Неопределено;
КонецПроцедуры

Процедура ИнициализацияРедактора(Форма, ИмяРеквизита) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	Если ДокView = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Инфо = Новый СистемнаяИнформация;
		ДокView.init(Инфо.ВерсияПриложения);
		ДокView.clearMetadata();
		
		Тема = КД3_Кэш()["КД3_Настройки_Тема"];
		Если КД3_Кэш()["КД3_Настройки_ПодсветкаЯзыкаЗапросов"] Тогда
			Тема = Тема + "-query";
		КонецЕсли;
		Форма.Элементы[ИмяРеквизита].Документ.monaco.editor.setTheme(Тема);
		
		ОтображатьКартуКода = КД3_Кэш()["КД3_Настройки_ОтображатьКартуКода"];
		ДокView.minimap(ОтображатьКартуКода);
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКЛиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОповещатьОбИзменениях(Форма, ИмяРеквизита, Оповещать = Истина) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	Если ДокView = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДокView.enableModificationEvent(Оповещать);
	
КонецПроцедуры

Процедура УстановитьТекстПриТолькоПросмотр(Форма, ИмяРеквизита, Текст) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	Если ДокView = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьТолькоПросмотр(Форма, ИмяРеквизита, Ложь);
	ОчиститьТекст(Форма, ИмяРеквизита);
	Если НЕ ПустаяСтрока(Текст) Тогда
		УстановитьТекст(Форма, ИмяРеквизита, Текст);
	КонецЕсли;
	УстановитьТолькоПросмотр(Форма, ИмяРеквизита, Истина);
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотр(Форма, ИмяРеквизита, ТолькоПросмотр) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	Если ДокView = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДокView.setReadOnly(ТолькоПросмотр);
	
КонецПроцедуры

Процедура УстановитьТекст(Форма, ИмяРеквизита, Текст, Позиция = Неопределено, УчитыватьОтступПервойСтроки = Ложь) Экспорт
	ДокView = View(Форма, ИмяРеквизита);
	ДокView.setText(Текст, Позиция);
КонецПроцедуры

Функция ПолучитьТекст(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).getText();
КонецФункции

Функция ОчиститьТекст(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).eraseText();
КонецФункции

Процедура ОбновитьМетаданныеКонфигурации(Форма, ДляКорреспондента) Экспорт
	
	Для Каждого ЭлементСписка Из Форма.КД3_Обработчики Цикл
		Если ЭлементСписка.Пометка = ДляКорреспондента Тогда
			ДокView = View(Форма, "КД3_" + ЭлементСписка.Значение);
			Если ДокView = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДокView.clearMetadata();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСобытиеHTML(Форма, Элемент, ДанныеСобытия) Экспорт
	
	Событие = ДанныеСобытия.Event.eventData1C;
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
		ВызватьКонструкторФорматнойСтроки(Форма, Элемент.Имя, Событие.params);
	ИначеЕсли Событие.event = "EVENT_GET_METADATA" Тогда
		Если ИспользоватьКонтекстнуюПодсказку() Тогда
			ВызватьОбновлениеМетаданных(Форма, Элемент.Имя, Событие.params)
		КонецЕсли;
	ИначеЕсли Событие.event = "EVENT_CONTENT_CHANGED" Тогда
		Форма.Модифицированность = Истина;
		Если Форма.КД3_ИзмененныйРеквизит <> Элемент.Имя Тогда
			СохранитьИзмененныйОбработчик(Форма);
			Форма.КД3_ИзмененныйРеквизит = Элемент.Имя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИзмененныйОбработчик(Форма)
	
	Если ПустаяСтрока(Форма.КД3_ИзмененныйРеквизит) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = Сред(Форма.КД3_ИзмененныйРеквизит, 5);
	НовоеЗначение = КД3_МетаданныеКлиент.ПолучитьТекст(Форма, Форма.КД3_ИзмененныйРеквизит);
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символ(13) + Символ(10), Символ(10));
	
	Форма.КД3_ИзмененныйРеквизит = "";
	
	Если НовоеЗначение = Форма.Объект[ИмяОбработчика] Тогда
		Возврат; // Произошла только замена LF на CR+LF
	КонецЕсли;
	Форма.Объект[ИмяОбработчика] = НовоеЗначение;
	
	СтраницаОбработчика = Форма.Элементы[ИмяОбработчика].Родитель;
	Если ТипЗнч(СтраницаОбработчика) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат; // Обработчик алгоритма или запроса
	КонецЕсли;
	СтраницаОбработчика.Картинка = ?(ПустаяСтрока(НовоеЗначение), Новый Картинка, БиблиотекаКартинок.Успешно);
	
КонецПроцедуры

Процедура ВызватьКонструкторФорматнойСтроки(Форма, ИмяРеквизита, ПараметрыСтроки)
	
	ДопПараметры = Новый Структура("Форма,ИмяРеквизита", Форма, ИмяРеквизита);
	Если ПараметрыСтроки = Неопределено Тогда
		ДопПараметры.Вставить("ФорматНаяСтрока", "");
		ДопПараметры.Вставить("Позиция", Неопределено);
		
		Оповещение = Новый ОписаниеОповещения ("ОткрытьКонструкторФорматнойСтроки",
			ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_МетаданныеКлиент"), ДопПараметры);
		ТекстВопроса =
			"Форматная строка не найдена.
			|Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ДопПараметры.Вставить("ФорматНаяСтрока", СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", ""));
		ДопПараметры.Вставить("Позиция", ПараметрыСтроки.range);
		
		Оповещение = Новый ОписаниеОповещения ("ОткрытьКонструкторФорматнойСтроки",
			ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_МетаданныеКлиент"), ДопПараметры);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки",
		ОбщегоНазначенияКлиент.ОбщийМодуль("КД3_МетаданныеКлиент"), ДопПараметры);
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст = ДопПараметры.ФорматнаяСтрока;
		Конструктор.Показать(Оповещение);
	Исключение
		ТекстСообщения = ИнформацияОбОшибке();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗакрытииКонструктораФорматнойСтроки(Текст, ДопПараметры) Экспорт
	
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
	Текст = СтрЗаменить(Текст, """", """""");
	Текст = """" + Текст + """";
	УстановитьТекст(ДопПараметры.Форма, ДопПараметры.ИмяРеквизита, Текст, ДопПараметры.Позиция);
	
КонецПроцедуры

Процедура ПриЗагрузкеМетаданныхКонфигурации(Конфигурация) Экспорт
	КД3_Кэш()[Конфигурация] = Неопределено;
	Оповестить("КД3_ОбновитьМетаданные", Конфигурация);
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	Если ИмяСобытия = "КД3_ОбновитьМетаданные" Тогда
		КонфигурацииНаФорме = Новый Структура("КД3_Конфигурация,КД3_КонфигурацияКорреспондент");
		ЗаполнитьЗначенияСвойств(КонфигурацииНаФорме, Форма);
		Если Параметр = КонфигурацииНаФорме.КД3_Конфигурация Тогда
			ОбновитьМетаданныеКонфигурации(Форма, Ложь);
		КонецЕсли;
		Если Параметр = КонфигурацииНаФорме.КД3_КонфигурацияКорреспондент Тогда
			ОбновитьМетаданныеКонфигурации(Форма, Истина);
		КонецЕсли;
	Конецесли;
КонецПроцедуры

Процедура ВызватьОбновлениеМетаданных(Форма, ИмяРеквизита, ПараметрыЗапроса)
	
	ИмяОбработчика = Сред(ИмяРеквизита, 5);
	ЭлементСписка = Форма.КД3_Обработчики.НайтиПоЗначению(ИмяОбработчика);
	Конфигурация = ?(ЭлементСписка.Пометка, Форма.КД3_КонфигурацияКорреспондент, Форма.КД3_Конфигурация);
	
	МетаданныеКонфигурации = КД3_Кэш()[Конфигурация];
	Если МетаданныеКонфигурации = Неопределено Тогда
		МетаданныеКонфигурации = Новый Соответствие;
		КД3_Кэш()[Конфигурация] = МетаданныеКонфигурации;
	КонецЕсли;
	
	ОписаниеМетаданных = МетаданныеКонфигурации[ПараметрыЗапроса];
	Если ОписаниеМетаданных = Неопределено Тогда
		ОписаниеМетаданных = КД3_Метаданные.ОписаниеМетаданныхПоЗапросу(Конфигурация, ПараметрыЗапроса);
		МетаданныеКонфигурации[ПараметрыЗапроса] = ОписаниеМетаданных;
	КонецЕсли;
	
	ДокView = View(Форма, ИмяРеквизита);
	РезультатОбновления = ДокView.updateMetadata(ОписаниеМетаданных.МетаданныеJSON, ОписаниеМетаданных.ПутьМетаданных);
	Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
		ДокView.triggerSuggestions();
	Иначе
		ТекстСообщения = СтрШаблон("Ошибка обновления метаданных %1: %2",
			ПараметрыЗапроса, РезультатОбновления.errorDescription);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиВКэше(Настройки) Экспорт
	
	Кэш = КД3_Кэш();
	Для Каждого КлючИЗначение Из Настройки Цикл
		Кэш["КД3_Настройки_" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция View(Форма, ИмяРеквизита)
	
	Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДокHTML = Форма.Элементы[ИмяРеквизита].Документ;
	Если ДокHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДокHTML.defaultView;
	
КонецФункции
