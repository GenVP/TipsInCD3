
Процедура ИзвлечьИсходники() Экспорт
	
	КаталогИсходников = КД3_НастройкиКлиент.ЗначениеИзКэша("КаталогИсходников");
	Если КаталогИсходников = Неопределено Тогда
		
		ПодкаталогИсходников = КД3_НастройкиКлиент.ЗначениеИзКэша("ПодкаталогИсходников");
		Если ПодкаталогИсходников = Неопределено Тогда
			ПодкаталогИсходников = КД3_Настройки.ПодкаталогИсходников();
			КД3_НастройкиКлиент.ЗначениеВКэш("ПодкаталогИсходников", ПодкаталогИсходников);
		КонецЕсли;
		
		КаталогВременныхФайлов = Новый Файл(ПолучитьИмяВременногоФайла("bsl"));
		КаталогИсходников = КаталогВременныхФайлов.Путь + ПодкаталогИсходников + ПолучитьРазделительПутиКлиента();
		
		// Удаление каталогов старых версий
		СтарыеВерсии = НайтиФайлы(КаталогВременныхФайлов.Путь, "bsl_console*_*");
		Для Каждого Файл Из СтарыеВерсии Цикл
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЦикла;
		СоздатьКаталог(КаталогИсходников);
		
		// Получение файла макета общего для всех конфигураций
		КаталогОбработчика = КаталогИсходников + "CommonEvent" + ПолучитьРазделительПутиКлиента();
		ТестФайл = Новый Файл(КаталогОбработчика);
		Если НЕ ТестФайл.Существует() Тогда
			ДанныеМакета = ПолучитьИзВременногоХранилища(КД3_Настройки.ПолучитьФайлМакетаИсходников());
			КД3_НастройкиКлиент.ЗначениеВКэш("КонсольКодаИнформация", ДанныеМакета.Информация);
			ПотокДляЧтения = ДанныеМакета.ДвоичныеДанные.ОткрытьПотокДляЧтения();
			ZipФайл = Новый ЧтениеZipФайла(ПотокДляЧтения);
			Если НЕ ТестФайл.Существует() Тогда
				ZipФайл.ИзвлечьВсе(КаталогОбработчика);
			КонецЕсли;
		КонецЕсли;
		
		КД3_НастройкиКлиент.ЗначениеВКэш("КаталогИсходников", КаталогИсходников);
	КонецЕсли;
	
КонецПроцедуры

Функция ПутьРедактораКода() Экспорт
	
	Возврат КД3_НастройкиКлиент.ЗначениеИзКэша("КаталогИсходников")
		+ "CommonEvent" + ПолучитьРазделительПутиКлиента() + "index.html";
	
КонецФункции

Процедура УдалитьИсходники() Экспорт
	
	КаталогИсходников = КД3_НастройкиКлиент.ЗначениеИзКэша("КаталогИсходников");
	Если КаталогИсходников = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Попытка
		УдалитьФайлы(КаталогИсходников);
	Исключение
		ТекстСообщения = "Удаление каталога " + КаталогИсходников + Символы.ПС + ОписаниеОшибки();
		// Скорее всего папка исходников была открыта в проводнике в момент удаления
	КонецПопытки;
	КД3_НастройкиКлиент.ЗначениеВКэш("КаталогИсходников", Неопределено);
	
КонецПроцедуры

Процедура ИнициализацияРедактора(Форма, ИмяРеквизита, ТекстОбработчика, ТолькоПросмотр) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	Если ДокView = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Инфо = Новый СистемнаяИнформация;
		ДокView.init(Инфо.ВерсияПриложения);
		ДокView.clearMetadata();
		Если НЕ КД3_НастройкиКлиент.ЗначениеИзКэша("ОтображатьНомераСтрок") Тогда
			ДокView.hideLineNumbers();
		КонецЕсли;
		
		Тема = КД3_НастройкиКлиент.ЗначениеИзКэша("Тема");
		Если КД3_НастройкиКлиент.ЗначениеИзКэша("ПодсветкаЯзыкаЗапросов") Тогда
			Тема = Тема + "-query";
		КонецЕсли;
		Форма.Элементы[ИмяРеквизита].Документ.monaco.editor.setTheme(Тема);
		
		ДокView.disableContextMenu();
		ДокView.minimap(КД3_НастройкиКлиент.ЗначениеИзКэша("ОтображатьКартуКода"));
		
		ДокView.setText(ТекстОбработчика);
		
		Если ТолькоПросмотр Тогда
			ДокView.setReadOnly(Истина);
		Иначе
			ДокView.enableModificationEvent(Истина);
		КонецЕсли;
		
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКЛиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьТекстПриТолькоПросмотр(Форма, ИмяОбработчика) Экспорт
	View(Форма, "КД3_" + ИмяОбработчика).updateText(Форма[ИмяОбработчика]);
КонецПроцедуры

Процедура УстановитьТекст(Форма, ИмяРеквизита, Текст, Позиция = Неопределено) Экспорт
	View(Форма, ИмяРеквизита).setText(Текст, Позиция);
КонецПроцедуры

Функция ПолучитьТекст(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).getText();
КонецФункции

Процедура ОчиститьМетаданные(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).clearMetadata();
КонецПроцедуры

Функция ОбновитьМетаданные(Форма, ИмяРеквизита, ОписаниеМетаданных) Экспорт
	
	ДокView = View(Форма, ИмяРеквизита);
	РезультатОбновления = ДокView.updateMetadata(ОписаниеМетаданных.МетаданныеJSON, ОписаниеМетаданных.ПутьМетаданных);
	Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
		ДокView.triggerSuggestions();
		ТекстОшибки = "";
	Иначе
		ТекстОшибки = РезультатОбновления.errorDescription;
	КонецЕсли;
	Возврат ТекстОшибки;
	
КонецФункции

Процедура Закомментировать(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).addComment();
КонецПроцедуры

Процедура УбратьКомментарии(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).removeComment();
КонецПроцедуры

Процедура Форматировать(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).editor.trigger("", "editor.action.formatDocument");
КонецПроцедуры

Процедура ДобавитьПереносСтроки(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).addWordWrap();
КонецПроцедуры

Процедура УдалитьПереносСтроки(Форма, ИмяРеквизита) Экспорт
	View(Форма, ИмяРеквизита).removeWordWrap();
КонецПроцедуры

Функция ПолучитьФорматнуюСтроку(Форма, ИмяРеквизита) Экспорт
	Возврат View(Форма, ИмяРеквизита).getFormatString();
КонецФункции

Функция View(Форма, ИмяРеквизита)
	
	Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДокHTML = Форма.Элементы[ИмяРеквизита].Документ;
	Если ДокHTML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДокHTML.defaultView;
	
КонецФункции
