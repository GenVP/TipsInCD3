
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Настройки = КД3_Настройки.ЗагрузитьНастройки();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	Элементы.ГруппаНастройки.Доступность = ИспользоватьРедакторКода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьИнформациюПоКонсолиКода(Ложь);
	ОбновитьИнформациюПоКонсолиКода(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Настройки = ЗаписатьНастройкиНаСервере();
	КД3_НастройкиКлиент.СохранитьНастройкиВКэше(Настройки);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкиНаСервере()
	
	Настройки = КД3_Настройки.НастройкиПоУмолчанию();
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	КД3_Настройки.СохранитьНастройки(Настройки);
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьРедакторКодаПриИзменении(Элемент)
	Если НЕ ИспользоватьРедакторКода Тогда
		ИспользоватьКонтекстнуюПодсказку = Ложь;
	КонецЕсли;
	Элементы.ГруппаНастройки.Доступность = ИспользоватьРедакторКода;
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходниковНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФайловаяСистемаКлиент.ОткрытьПроводник(КаталогИсходников);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонсольКодаИзМакетаWin(Команда)
	КД3_Настройки.УстановитьВерсиюКонсолиКода(Ложь, Неопределено);
	КД3_РедакторКодаКлиент.УдалитьИсходники();
	ОбновитьИнформациюПоКонсолиКода(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонсольКодаИзМакетаLin(Команда)
	КД3_Настройки.УстановитьВерсиюКонсолиКода(Истина, Неопределено);
	КД3_РедакторКодаКлиент.УдалитьИсходники();
	ОбновитьИнформациюПоКонсолиКода(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонсольКодаИзФайлаWin(Команда)
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Файл архива zip (*.zip)'") + "|*.zip" );
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru='Выберите файл с архивом исходников'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКонсольКодаИзФайлаWinЗавершение", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонсольКодаИзGitHubDevelopWin(Команда)
	
	URL = "https://github.com/salexdv/bsl_console/archive/refs/heads/develop.zip"; 
	Попытка
		АдресИсходниковГитхаба = ПолучитьФайлИзИнтернет(URL, УникальныйИдентификатор);
		АдресФайлаЗагрузки = ИзвлечьSrcИзИсходниковGithub(АдресИсходниковГитхаба, УникальныйИдентификатор);
	Исключение
		ПоказатьПредупреждение(, "Не удалось загрузить архив исходников: " + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	КД3_Настройки.УстановитьВерсиюКонсолиКода(Ложь, АдресФайлаЗагрузки, "github/salexdv/bsl_console/develop");
	КД3_РедакторКодаКлиент.УдалитьИсходники();
	ОбновитьИнформациюПоКонсолиКода(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонсольКодаИзФайлаWinЗавершение(РезультатПомещенияФайлов, ДопПараметры) Экспорт
	
	АрхивИсходников = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки = РезультатПомещенияФайлов.ОписаниеОшибки;
	Если ПустаяСтрока(ТекстОшибки) И ПустаяСтрока(АрхивИсходников) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка передачи файла структуры конфигурации на сервер'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	АдресФайлаЗагрузки = ИзвлечьSrcИзИсходниковGithub(АрхивИсходников, УникальныйИдентификатор);

	КД3_Настройки.УстановитьВерсиюКонсолиКода(Ложь, АдресФайлаЗагрузки, РезультатПомещенияФайлов.Имя);
	КД3_РедакторКодаКлиент.УдалитьИсходники();
	ОбновитьИнформациюПоКонсолиКода(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоКонсолиКода(ЭтоЛинуксКлиент)
	КД3_РедакторКодаКлиент.ИзвлечьИсходники();
	КаталогИсходников = КД3_НастройкиКлиент.ЗначениеИзКэша("КаталогИсходников");
	ВерсияКонсолиКода = КД3_Настройки.ВерсияКонсолиКода(ЭтоЛинуксКлиент);
	Элементы["КонсольКодаИнформация" + ?(ЭтоЛинуксКлиент, "Lin", "Win")].Заголовок =
		ВерсияКонсолиКода.Информация + Символы.ПС + "Версия: " + ВерсияКонсолиКода.Версия;
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИзвлечьSrcИзИсходниковGithub(АдресАрхиваИсходников, УникальныйИдентификатор)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресАрхиваИсходников);
	
	ZipФайл = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
	ТестФайл = ZipФайл.Элементы.Найти("index.html"); 
	Если ТестФайл = Неопределено Тогда
		ВызватьИсключение "В архиве не найден index.html";
	ИначеЕсли ПустаяСтрока(ТестФайл.Путь) Тогда
		// Обычный архив с исходниками из src
		Возврат АдресАрхиваИсходников; 
	КонецЕсли; 

	КаталогИсходников = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогИсходников);
	
	ZipФайл.ИзвлечьВсе(КаталогИсходников);
	ZipФайл.Закрыть();
	
	Разделитель = ПолучитьРазделительПутиКлиента();
	АрхивИсходников = ПолучитьИмяВременногоФайла("zip");
	ZipФайл = Новый ЗаписьZipФайла(АрхивИсходников);
	КаталогВетки = НайтиФайлы(КаталогИсходников, "bsl_console*");
	Если НЕ КаталогВетки.Количество() = 1 Тогда
		ВызватьИсключение "В архиве не найден каталог bsl_console*";
	КонецЕсли;  
	ФайлыИсходников = НайтиФайлы(КаталогВетки[0].ПолноеИмя + Разделитель + "src", "*.*", Ложь);
	Для Каждого НайденныйФайл Из ФайлыИсходников Цикл
		Если СтрНачинаетсяС(НРег(НайденныйФайл.ИмяБезРасширения), "test") Тогда
			Продолжить;
		КонецЕсли;
		ZipФайл.Добавить(НайденныйФайл.ПолноеИмя + ?(НайденныйФайл.ЭтоКаталог(), Разделитель, ""),
			 РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЦикла;
	ZipФайл.Записать();
	
	АдресИсходников = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АрхивИсходников), УникальныйИдентификатор);
	
	УдалитьФайлы(КаталогИсходников);
	УдалитьФайлы(АрхивИсходников);
	
	Возврат АдресИсходников;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлИзИнтернет(URL, УникальныйИдентификатор, Перенаправления = Неопределено)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	Сервер        = СтруктураURI.Хост;
	ПутьНаСервере = СтруктураURI.ПутьНаСервере;
	Протокол      = СтруктураURI.Схема;
	Порт          = СтруктураURI.Порт;
	Если ПустаяСтрока(Протокол) Тогда 
		Протокол = "http";
	КонецЕсли;
	
	Если Протокол = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		Сервер,
		Порт,
		"",
		"",
		Неопределено,
		128,
		ЗащищенноеСоединение,
		Ложь);
	
	Сервер = Соединение.Сервер;
	Порт   = Соединение.Порт;
	
	ПутьДляСохранения = ПолучитьИмяВременногоФайла("zip");
	
	ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Новый Соответствие);
	ЗапросHTTP.Заголовки.Вставить("Accept-Charset", "UTF-8");
	ЗапросHTTP.Заголовки.Вставить("X-1C-Request-UID", Строка(Новый УникальныйИдентификатор));
	ОтветHTTP = Соединение.Получить(ЗапросHTTP, ПутьДляСохранения);
	
	Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
		Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
		Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
		Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
		Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect
		
		Если Перенаправления = Неопределено Тогда
			Перенаправления = Новый Массив;
		КонецЕсли;
		
		Если Перенаправления.Количество() > 7 Тогда
			ВызватьИсключение "Превышено количество перенаправлений.";
		Иначе
			НовыйURL = "";
			Для Каждого КлючИЗначение Из ОтветHTTP.Заголовки Цикл
				Если НРег(КлючИЗначение.Ключ) = "location" Тогда
					НовыйURL = КлючИЗначение.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПустаяСтрока(НовыйURL) Тогда
				ВызватьИсключение "Некорректное перенаправление";
			КонецЕсли;
			
			НовыйURL = СокрЛП(НовыйURL);
			Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
				ВызватьИсключение СтрШаблон("Циклическое перенаправление. Попытка перейти на %1 уже выполнялась ранее.", НовыйURL);
			КонецЕсли;
			Перенаправления.Добавить(URL);
			
			Если НЕ СтрНачинаетсяС(НовыйURL, "http") Тогда
				// <схема>://<хост>:<порт>/<путь>
				НовыйURL = СтрШаблон("%1://%2:%3/%4", Протокол, Сервер, Формат(Порт, "ЧГ="), НовыйURL);
			КонецЕсли;
			
			Возврат ПолучитьФайлИзИнтернет(НовыйURL, УникальныйИдентификатор, Перенаправления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтветHTTP.КодСостояния < 200 Или ОтветHTTP.КодСостояния >= 300 Тогда
		ВызватьИсключение "Ошибка получения файла. Код ответа: " + ОтветHTTP.КодСостояния;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьДляСохранения), УникальныйИдентификатор);

КонецФункции

#КонецОбласти