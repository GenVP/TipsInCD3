
&Вместо("ВыполнитьЗагрузкуМетаданных")
Процедура КД3_ВыполнитьЗагрузкуМетаданных(ОбщиеПеременные, АдресВременногоХранилища)
	
	ОбщиеПеременные.Вставить("КД3_ИспользоватьКонтекстнуюПодсказку", КД3_Метаданные.ИспользоватьКонтекстнуюПодсказку());
	
	ПродолжитьВызов(ОбщиеПеременные, АдресВременногоХранилища);
	
	Если НЕ ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку Тогда
		Возврат;
	КонецЕсли;
	
	КлючКонфигурации = КД3_Метаданные.КлючКэшаНастроек(ОбщиеПеременные.Конфигурация);
	
	Если НЕ ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(КлючКонфигурации);
	КонецЕсли;
	
	ПрочиеОбъекты = Неопределено;
	Если НЕ ОбщиеПеременные.Свойство("КД3_ПрочиеОбъекты", ПрочиеОбъекты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПрочиеОбъекты Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(КлючКонфигурации, КлючИЗначение.Значение, НРег(КлючИЗначение.Ключ));
	КонецЦикла;
	
КонецПроцедуры

&Вместо("ПрочитатьОбъектXML")
Процедура КД3_ПрочитатьОбъектXML(ЧтениеXML, ОбновлятьСостояние, ОбщиеПеременные)
	
	Перем Объект;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка чтения XML'");
		
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	ОбъектИД = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// IsFolder
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Owner
	Владелец = ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML), ОбщиеПеременные);
	Если ЗначениеЗаполнено(ОбщиеПеременные.Конфигурация) Тогда
		Владелец = ОбщиеПеременные.Конфигурация;
	КонецЕсли;
	
	// Parent
	РодительИД = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	Родитель = Неопределено;
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Имя
	Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Тип
	Тип = ПрочитатьXML(ЧтениеXML, Тип("ПеречислениеСсылка.ТипыОбъектов"));
	
	Если НЕ ЭтоГруппа И ЗначениеЗаполнено(Тип)
		И РодительИД <> "00000000-0000-0000-0000-000000000000" Тогда
		Родитель = ПолучитьСсылкуНаОбъект(РодительИД, ОбщиеПеременные);
	КонецЕсли;
	
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Иерархический
		Иерархический = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// ВидИерархии
		ВидИерархии = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// ОграничиватьКоличествоУровней
		ОграничиватьКоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КоличествоУровней
		КоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// СерииКодов
		СерииКодов = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// КонтрольУникальности
		КонтрольУникальности = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// АвтоНумерация
		АвтоНумерация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// Периодичность
		Периодичность = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Подчиненный
		Подчиненный = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
	КонецЕсли;
	
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка чтения XML'");
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	//+КД3
	Если ПометкаУдаления И ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку Тогда
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("РодительИД", РодительИД);
		ДанныеОбъекта.Вставить("ЭтоГруппа", ЭтоГруппа);
		ДанныеОбъекта.Вставить("ОбъектИД", ОбъектИД);
		ДанныеОбъекта.Вставить("Имя", Имя);
		ДанныеОбъекта.Вставить("Наименование", Наименование);
		КД3_ЗагрузитьПрочийОбъект(ДанныеОбъекта, ОбщиеПеременные);
		Возврат;
	КонецЕсли;
	//-КД3
	
	ТекстЗапросаОбъекты = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объекты.Ссылка КАК Объект
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|
	|ГДЕ
	|	Объекты.Имя = &Имя
	|	И Объекты.Владелец = &Владелец
	|	И Объекты.Родитель = &Родитель
	|	И Объекты.ЭтоГруппа = &ЭтоГруппа
	|	И Объекты.Тип = &Тип";
	Если НЕ ЭтоГруппа Тогда
		ТекстЗапросаОбъекты = СтрЗаменить(ТекстЗапросаОбъекты, "ПЕРВЫЕ 1",
			"ПЕРВЫЕ 1
			|	Объекты.Идентификатор КАК Идентификатор,");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		ТекстЗапросаОбъекты = СтрЗаменить(ТекстЗапросаОбъекты,"И Объекты.Родитель = &Родитель","");
	КонецЕсли;
	
	мЗапросОбъекты = Новый Запрос(ТекстЗапросаОбъекты);
	
	мЗапросОбъекты.УстановитьПараметр("Имя", Имя);
	мЗапросОбъекты.УстановитьПараметр("Владелец", Владелец);
	мЗапросОбъекты.УстановитьПараметр("Родитель", Родитель);
	мЗапросОбъекты.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	мЗапросОбъекты.УстановитьПараметр("Тип", ?(Тип = Неопределено, Перечисления.ТипыОбъектов.ПустаяСсылка(), Тип));
		
	РезультатЗапроса = мЗапросОбъекты.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			Объект = Справочники.Объекты.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			Объект = Справочники.Объекты.СоздатьЭлемент();
			Объект.Идентификатор = ОбъектИД;
			
		КонецЕсли;
	
		ЗаписыватьЗначение = Истина;
		
	Иначе
		
		// Получим объект по найденной ссылке
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЭтоГруппа Тогда
			УстановитьСоответствиеУИ(ОбъектИД, Выборка.Объект, ОбщиеПеременные)
		КонецЕсли;
		Если НЕ ЭтоГруппа И Выборка.Идентификатор <> ОбъектИД Тогда
			Объект = Выборка.Объект.ПолучитьОбъект();
			Объект.Идентификатор = ОбъектИД;
			ЗаписыватьЗначение = Истина;
		ИначеЕсли ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
			Возврат;
		Иначе
			Объект = Выборка.Объект.ПолучитьОбъект();
			ЗаписыватьЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Владелец
	УстановитьЗначениеПараметра(Объект.Владелец, Владелец, ЗаписыватьЗначение);
	
	УстановитьЗначениеПараметра(Объект.ПометкаУдаления, ПометкаУдаления, ЗаписыватьЗначение);
				
	// Родитель
	Если ЗначениеЗаполнено(Родитель) И НЕ ЗначениеЗаполнено(Объект.Родитель) Тогда
		УстановитьЗначениеПараметра(Объект.Родитель, Родитель, ЗаписыватьЗначение);
	КонецЕсли;
		
	// Наименование
	УстановитьЗначениеПараметра(Объект.Наименование, Наименование, ЗаписыватьЗначение);
		
	// Имя
	УстановитьЗначениеПараметра(Объект.Имя, Имя, ЗаписыватьЗначение);
		
	// Синоним
	УстановитьЗначениеПараметра(Объект.Синоним, Синоним, ЗаписыватьЗначение);
		
	// Комментарий
	УстановитьЗначениеПараметра(Объект.Комментарий, Комментарий, ЗаписыватьЗначение);
		
	// Тип
	УстановитьЗначениеПараметра(Объект.Тип, Тип, ЗаписыватьЗначение);
		
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Иерархический
		УстановитьЗначениеПараметра(Объект.Иерархический, Иерархический, ЗаписыватьЗначение);
				
		// ВидИерархии
		УстановитьЗначениеПараметра(Объект.ВидИерархии, ВидИерархии, ЗаписыватьЗначение);
				
		// ОграничиватьКоличествоУровней
		УстановитьЗначениеПараметра(Объект.ОграничиватьКоличествоУровней, ОграничиватьКоличествоУровней, ЗаписыватьЗначение);
				
		// КоличествоУровней
		УстановитьЗначениеПараметра(Объект.КоличествоУровней, КоличествоУровней, ЗаписыватьЗначение);
				
		// СерииКодов
		УстановитьЗначениеПараметра(Объект.СерииКодов, СерииКодов, ЗаписыватьЗначение);
				
		// КонтрольУникальности
		УстановитьЗначениеПараметра(Объект.КонтрольУникальности, КонтрольУникальности, ЗаписыватьЗначение);
				
		// АвтоНумерация
		УстановитьЗначениеПараметра(Объект.АвтоНумерация, АвтоНумерация, ЗаписыватьЗначение);
				
		// Периодичность
		УстановитьЗначениеПараметра(Объект.Периодичность, Периодичность, ЗаписыватьЗначение);
				
		// Подчиненный
		УстановитьЗначениеПараметра(Объект.Подчиненный, Подчиненный, ЗаписыватьЗначение);
				
	КонецЕсли;
	
	Если ЗаписыватьЗначение Тогда
		
		Объект.Записать();
		
	КонецЕсли;
	УстановитьСоответствиеУИ(ОбъектИД, Объект.Ссылка, ОбщиеПеременные);
	
	УдалитьИзОбъектовКонфигурации(Объект.Ссылка, ОбщиеПеременные);		
	
КонецПроцедуры // ПрочитатьОбъектXML()

&Вместо("ПрочитатьСвойствоXML")
Процедура КД3_ПрочитатьСвойствоXML(ЧтениеXML, ОбновлятьСостояние, ОбщиеПеременные)
	
	Перем Свойство;
	
	// Проверяем, что текущим узлом является НачалоЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка чтения XML'");
		
	КонецЕсли;
	
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Ref
	СвойствоИД = ПрочитатьXML(ЧтениеXML, Тип("Строка"));

	// IsFolder
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// DeletionMark
	ПометкаУдаления = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
	
	// Owner
	ВладелецИД = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	Владелец = НайтиСсылкуПоИдентификатору(ВладелецИД, Ложь, "Объекты", ОбщиеПеременные.Конфигурация);

	
	// Parent
	РодительИД = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	Родитель = НайтиСсылкуПоИдентификатору(РодительИД, Истина, "Свойства", Владелец);
	
	// Code
	Код = ПрочитатьXML(ЧтениеXML, Тип("Число"));
	
	// Description
	Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Синоним
	Синоним = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	// Комментарий
	Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Использование
		Использование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Индексирование
		Индексирование = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыЧисла_Длина
		КвалификаторыЧисла_Длина = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыЧисла_Точность
		КвалификаторыЧисла_Точность = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыЧисла_Неотрицательное
		КвалификаторыЧисла_Неотрицательное = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыСтроки_Длина
		КвалификаторыСтроки_Длина = ПрочитатьXML(ЧтениеXML, Тип("Число"));
		
		// КвалификаторыСтроки_Фиксированная
		КвалификаторыСтроки_Фиксированная = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
		// КвалификаторыДаты_Состав
		КвалификаторыДаты_Состав = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
		
		// Авторегистрация
		Авторегистрация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
		
	КонецЕсли;
	
	// Вид
	Вид = ПрочитатьXML(ЧтениеXML, Тип("ПеречислениеСсылка.ВидыСвойств"));
	
	// ТипыСтрокой
	ТипыСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
	
	Типы = Новый Массив;
	
	// Типы
	Если ЧтениеXML.Имя = "Типы" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		// Чтение следующего узла
		ЧтениеXML.Прочитать();
		
		Пока ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			
			// Чтение следующего узла
			ЧтениеXML.Прочитать();
			
			Типы.Добавить(ПолучитьСсылкуНаОбъект(ПрочитатьXML(ЧтениеXML, Тип("Строка")), ОбщиеПеременные));
			
			// Чтение следующего узла для завершение чтения элемента
			ЧтениеXML.Прочитать();
			
		КонецЦикла;
		
		// Чтение следующего узла для завершение чтения элемента
		ЧтениеXML.Прочитать();
		
	КонецЕсли;
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка чтения XML'");
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	
	//+КД3
	Если ПометкаУдаления И ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку Тогда
		ДанныеСвойства = Новый Структура;
		ДанныеСвойства.Вставить("ВладелецИД", ВладелецИД);
		ДанныеСвойства.Вставить("РодительИД", РодительИД);
		ДанныеСвойства.Вставить("СвойствоИД", СвойствоИД);
		ДанныеСвойства.Вставить("Вид", Вид);
		ДанныеСвойства.Вставить("Наименование", Наименование);
		ДанныеСвойства.Вставить("Синоним", Синоним);
		КД3_ЗагрузитьСвойствоПрочегоОбъекта(ДанныеСвойства, ОбщиеПеременные);
		Возврат;
	Конецесли;
	//-КД3
	
	ЭтоЭлементСоставаПланаОбмена = Вид = Перечисления.ВидыСвойств.ЭлементСоставаПланаОбмена И Наименование <> "{Состав}";
	
	Если ЭтоЭлементСоставаПланаОбмена Тогда
		
		ЗапросСвойства = Новый Запрос(
			"ВЫБРАТЬ
			|	Свойства.Ссылка КАК Свойство,
			|	Свойства.Идентификатор КАК Идентификатор
			|ИЗ
			|	Справочник.Свойства КАК Свойства
			|ГДЕ
			|	Свойства.Наименование = &Наименование
			|	И Свойства.Владелец = &Владелец
			|	И Свойства.Родитель = &Родитель
			|	И Свойства.ЭтоГруппа = &ЭтоГруппа
			|	И Свойства.Вид = &Вид
			|	И Свойства.Типы.Тип = &Тип");
		ЗапросСвойства.УстановитьПараметр("Тип", Типы[0]);
		
	Иначе
		
		ЗапросСвойства = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Свойства.Ссылка КАК Свойство,
		|	Свойства.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.Свойства КАК Свойства
		|
		|ГДЕ
		|	(Свойства.Наименование = &Наименование Или Свойства.Наименование = &Наименование2)
		|	И Свойства.Владелец = &Владелец
		|	И Свойства.Родитель = &Родитель
		|	И Свойства.ЭтоГруппа = &ЭтоГруппа
		|	И Свойства.Вид = &Вид");
		
	КонецЕсли;
	Наименование2 = Наименование;
	Если ЭтоГруппа И
		(Вид = Перечисления.ВидыСвойств.НаборДвиженийРегистраБухгалтерии Или
		Вид = Перечисления.ВидыСвойств.НаборДвиженийРегистраНакопления Или
		Вид = Перечисления.ВидыСвойств.НаборДвиженийРегистраРасчета Или
		Вид = Перечисления.ВидыСвойств.НаборДвиженийРегистраСведений Или
		Вид = Перечисления.ВидыСвойств.НаборЗаписейПодчиненногоРегистраСведений) Тогда
		Если СтрНайти(Наименование, "{") = 0 Тогда
			ТипОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец,"Тип");
			Если ТипОбъекта = Перечисления.ТипыОбъектов.Документ Тогда
				Наименование2 = "{" + Наименование + "}";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросСвойства.УстановитьПараметр("Наименование", Наименование);
	ЗапросСвойства.УстановитьПараметр("Наименование2", Наименование2);
	ЗапросСвойства.УстановитьПараметр("Владелец", Владелец);
	ЗапросСвойства.УстановитьПараметр("Родитель", Родитель);
	ЗапросСвойства.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	ЗапросСвойства.УстановитьПараметр("Вид", Вид);
	
	РезультатЗапроса = ЗапросСвойства.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда
			
			// Создаем группу
			Свойство = Справочники.Свойства.СоздатьГруппу();
			
		Иначе
			
			// Создаем элемент справочника
			Свойство = Справочники.Свойства.СоздатьЭлемент();
			
		КонецЕсли;
		Свойство.Идентификатор = СвойствоИД;
		
		ЗаписыватьЗначение = Истина;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СвойствоВыборки = Выборка.Свойство;
		Если Выборка.Идентификатор <> СвойствоИД Тогда
			Свойство = СвойствоВыборки.ПолучитьОбъект();
			Свойство.Идентификатор = СвойствоИД;
			ЗаписыватьЗначение = Истина;
		ИначеЕсли ОбщиеПеременные.ДобавлятьТолькоНовые Тогда
			Возврат;
		Иначе
			Свойство = СвойствоВыборки.ПолучитьОбъект();
			
			ЗаписыватьЗначение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Владелец
	УстановитьЗначениеПараметра(Свойство.Владелец, Владелец, ЗаписыватьЗначение);
	
	УстановитьЗначениеПараметра(Свойство.ПометкаУдаления, ПометкаУдаления, ЗаписыватьЗначение);
			
	// Родитель
	УстановитьЗначениеПараметра(Свойство.Родитель, Родитель, ЗаписыватьЗначение);
		
	// Код
	Свойство.Код = Код; // это свойство ни на что не влияет
			
	// Наименование
	Если Наименование2 <> Наименование Тогда
		УстановитьЗначениеПараметра(Свойство.Наименование, Наименование2, ЗаписыватьЗначение);
	Иначе
		УстановитьЗначениеПараметра(Свойство.Наименование, Наименование, ЗаписыватьЗначение);
	КонецЕсли;
	
	// Синоним
	УстановитьЗначениеПараметра(Свойство.Синоним, Синоним, ЗаписыватьЗначение);
		
	// Комментарий
	УстановитьЗначениеПараметра(Свойство.Комментарий, Комментарий, ЗаписыватьЗначение);
				
	// Следующие реквизиты для группы не определены
	Если ЭтоГруппа = Ложь Тогда
		
		// Использование
		УстановитьЗначениеПараметра(Свойство.Использование, Использование, ЗаписыватьЗначение);
				
		// Индексирование
		УстановитьЗначениеПараметра(Свойство.Индексирование, Индексирование, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Длина
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Длина, КвалификаторыЧисла_Длина, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Точность
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Точность, КвалификаторыЧисла_Точность, ЗаписыватьЗначение);
				
		// КвалификаторыЧисла_Неотрицательное
		УстановитьЗначениеПараметра(Свойство.КвалификаторыЧисла_Неотрицательное, КвалификаторыЧисла_Неотрицательное, ЗаписыватьЗначение);
				
		// КвалификаторыСтроки_Длина
		УстановитьЗначениеПараметра(Свойство.КвалификаторыСтроки_Длина, КвалификаторыСтроки_Длина, ЗаписыватьЗначение);
				
		// КвалификаторыСтроки_Фиксированная
		УстановитьЗначениеПараметра(Свойство.КвалификаторыСтроки_Фиксированная, КвалификаторыСтроки_Фиксированная, ЗаписыватьЗначение);
				
		// КвалификаторыДаты_Состав
		УстановитьЗначениеПараметра(Свойство.КвалификаторыДаты_Состав, КвалификаторыДаты_Состав, ЗаписыватьЗначение);
				
		// Авторегистрация
		УстановитьЗначениеПараметра(Свойство.Авторегистрация, Авторегистрация, ЗаписыватьЗначение);
				
	КонецЕсли;
	
	// Вид
	УстановитьЗначениеПараметра(Свойство.Вид, Вид, ЗаписыватьЗначение);
		
	// Типы
	
	Если Свойство.Типы.Количество() <> Типы.Количество() Тогда
		
		ЗаписыватьЗначение = Истина;
		
		Свойство.Типы.Очистить();
		
		Для Индекс = 0 По Типы.Количество() - 1 Цикл
			
			Свойство.Типы.Добавить().Тип = Типы[Индекс];
			
		КонецЦикла;
		
	Иначе
		
		Для Индекс = 0 По Типы.Количество() - 1 Цикл
			
			УстановитьЗначениеПараметра(Свойство.Типы[Индекс].Тип, Типы[Индекс], ЗаписыватьЗначение);
						
		КонецЦикла;
		
		
	КонецЕсли;
	
	// ТипыСтрокой
	УстановитьЗначениеПараметра(Свойство.ТипыСтрокой, глТипыСвойстваСтрокой(Свойство), ЗаписыватьЗначение);
	
	Если ЗаписыватьЗначение Тогда
		
		Свойство.Записать();
		
	КонецЕсли;
	
	УдалитьИзОбъектовКонфигурации(Свойство.Ссылка, ОбщиеПеременные);		
	
КонецПроцедуры // ПрочитатьСвойствоXML()

Процедура КД3_ЗагрузитьПрочийОбъект(ДанныеОбъекта, ОбщиеПеременные)
	
	Если ДанныеОбъекта.ЭтоГруппа Тогда
		ОбщиеПеременные.СоответствиеУИ.Вставить(ДанныеОбъекта.ОбъектИД, ДанныеОбъекта);
	Иначе
		ДанныеРодителя = ОбщиеПеременные.СоответствиеУИ[ДанныеОбъекта.РодительИД];
		Если ДанныеРодителя = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПрочиеОбъекты = Неопределено;
		Если НЕ ОбщиеПеременные.Свойство("КД3_ПрочиеОбъекты", ПрочиеОбъекты) Тогда
			ПрочиеОбъекты = Новый Соответствие;
			ОбщиеПеременные.Вставить("КД3_ПрочиеОбъекты", ПрочиеОбъекты);
		КонецЕсли;
		
		ДанныеКоллекции = ПрочиеОбъекты[ДанныеРодителя.Наименование];
		Если ДанныеКоллекции = Неопределено Тогда
			ДанныеКоллекции = Новый Структура;
			ПрочиеОбъекты[ДанныеРодителя.Наименование] = ДанныеКоллекции;
		КонецЕсли;
		
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("properties", Новый Структура);
		СтруктураОбъекта.Вставить("predefined", Новый Структура);
		СтруктураОбъекта.Вставить("resources", Новый Структура);
		СтруктураОбъекта.Вставить("tabulars", Новый Структура);
		
		ДанныеКоллекции.Вставить(ДанныеОбъекта.Имя, СтруктураОбъекта);
		
		ОбщиеПеременные.СоответствиеУИ[ДанныеОбъекта.ОбъектИД] = СтруктураОбъекта;
	КонецЕсли;
	
КонецПроцедуры

Процедура КД3_ЗагрузитьСвойствоПрочегоОбъекта(ДанныеСвойства, ОбщиеПеременные)
	
	СтруктураОбъекта = ОбщиеПеременные.СоответствиеУИ[ДанныеСвойства.ВладелецИД];
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСвойства.Вид = Перечисления.ВидыСвойств.Реквизит Тогда
		Если ДанныеСвойства.РодительИД = "00000000-0000-0000-0000-000000000000" Тогда
			КоллекцияДляДобавления = СтруктураОбъекта.properties;
		Иначе
			КоллекцияДляДобавления = ОбщиеПеременные.СоответствиеУИ[ДанныеСвойства.РодительИД];
		КонецЕсли;
		ОписаниеСвойства = Новый Структура("name", ДанныеСвойства.Синоним);
		КоллекцияДляДобавления.Вставить(ДанныеСвойства.Наименование, ОписаниеСвойства);
		
	ИначеЕсли ДанныеСвойства.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть Тогда
		ОписаниеТабличнойЧасти = Новый Структура;
		ОписаниеСвойства = Новый Структура("name", "ТЧ: " + ДанныеСвойства.Синоним);
		СтруктураОбъекта.properties.Вставить(ДанныеСвойства.Наименование, ОписаниеСвойства);
		СтруктураОбъекта.tabulars.Вставить(ДанныеСвойства.Наименование, ОписаниеТабличнойЧасти);
		ОбщиеПеременные.СоответствиеУИ[ДанныеСвойства.СвойствоИД] = ОписаниеТабличнойЧасти;
	КонецЕсли;
	
КонецПроцедуры
