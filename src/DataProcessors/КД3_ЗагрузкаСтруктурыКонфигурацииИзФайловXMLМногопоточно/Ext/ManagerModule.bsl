#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс
// Выполняет загузку метаданных из файлов.
// Параметры:
//   ОбщиеПеременные - Структура - Переменные, которые используются при работе.
//   АдресВременногоХранилища - Произвольный - Адрес, в который будет помещен результат выполнения процедуры.
Процедура ВыполнитьЗагрузкуМетаданных(ОбщиеПеременные, АдресВременногоХранилища) Экспорт
	ОбщиеПеременные.Вставить("ЗагрузитьНовую", (ОбщиеПеременные.СпособЗагрузки = 0));
	ОбщиеПеременные.Вставить("Отказ", Ложь);
	ОбщиеПеременные.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	//+КД3
	Если ОбщиеПеременные.Свойство("КД3_СообщатьПрогресс") Тогда
		// 6 - общее количество вызовов КД3_СообщитьПрогресс в ВыполнитьЗагрузкуМетаданных()
		// 16 - общее количество выгружаемых групп объектов в ОбработатьКаталогиСДанными()
		ГруппНаКонфигурацию = ?(ОбщиеПеременные.ТолькоОбновитьПланыОбмена, 1, 16);
		КоличествоОбъектов = 6 - 1 + ГруппНаКонфигурацию;
		Если ОбщиеПеременные.ЕстьРасширения Тогда
			КоличествоОбъектов = КоличествоОбъектов + ГруппНаКонфигурацию * ОбщиеПеременные.КаталогиРасширений.Количество();
		КонецЕсли;
		КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, КоличествоОбъектов, 0);
	КонецЕсли;
	//-КД3
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Чтение данных конфигурации", 0, 0);
	//-КД3
	ПрочитатьДанныеОКонфигурации(ОбщиеПеременные);
	Если ОбщиеПеременные.Отказ Тогда
		Возврат;
	КонецЕсли;
	//+КД3
	Если ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку Тогда
		НастройкиКонфигурации = КД3_Метаданные.НастройкиКонфигурации(ОбщиеПеременные.Конфигурация);
		ИзменитьНастройкиКонфигурации = ОбщиеПеременные.ЗагрузитьНовую;
		Если НЕ ОбщиеПеременные.ЗагрузитьНовую Тогда
			// Удаление старых индексов метаданных для конфигурации
			КД3_Метаданные.УдалитьОписаниеМетаданных(ОбщиеПеременные.Конфигурация, НастройкиКонфигурации);
			// Изменения настроек хранения индексов для конфигурации на выбранные в форме обработки
			Если НастройкиКонфигурации.МестоХраненияИндексов <> ОбщиеПеременные.КД3_МестоХраненияИндексов
			 ИЛИ НастройкиКонфигурации.КаталогИндексов <> ОбщиеПеременные.КД3_КаталогИндексов
			 ИЛИ НастройкиКонфигурации.ЗагружатьМетодыМодулей <> ОбщиеПеременные.КД3_ЗагружатьМетодыМодулей
			 ИЛИ (НЕ НастройкиКонфигурации.ЗагружатьИзФайлов И ОбщиеПеременные.КД3_СохранитьКаталогДляКонфигурации) Тогда
				ИзменитьНастройкиКонфигурации = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИзменитьНастройкиКонфигурации Тогда
			Если ОбщиеПеременные.КД3_СохранитьКаталогДляКонфигурации  Тогда
				КД3_СохранитьКаталогКонфигурации(ОбщиеПеременные, НастройкиКонфигурации);
				НастройкиКонфигурации.ЗагружатьИзФайлов = Истина;
			КонецЕсли;
			НастройкиКонфигурации.МестоХраненияИндексов = ОбщиеПеременные.КД3_МестоХраненияИндексов;
			НастройкиКонфигурации.КаталогИндексов = ОбщиеПеременные.КД3_КаталогИндексов;
			НастройкиКонфигурации.ЗагружатьМетодыМодулей = ОбщиеПеременные.КД3_ЗагружатьМетодыМодулей;
			КД3_Метаданные.ИзменитьНастройкиКонфигурации(ОбщиеПеременные.Конфигурация, НастройкиКонфигурации);
		КонецЕсли;
		ОбщиеПеременные.Вставить("КД3_НастройкиКонфигурации", НастройкиКонфигурации);
		ОбщиеПеременные.Вставить("КД3_ПарсерМодулей", КД3_Настройки.ПарсерМодулей());
	КонецЕсли;
	//-КД3
	// Начало загрузки.
	
	СостояниеНаборЗаписей = РегистрыСведений.СостоянияЗагрузокМетаданных.СоздатьНаборЗаписей();
	СостояниеНаборЗаписей.Отбор.Релиз.Установить(ОбщиеПеременные.Конфигурация);
	ЗаписьСостояние = СостояниеНаборЗаписей.Добавить();
	ЗаписьСостояние.Релиз = ОбщиеПеременные.Конфигурация;
	ЗаписьСостояние.ДатаНачала = ТекущаяДатаСеанса();
	СостояниеНаборЗаписей.Записать();
	
	//+КД3
	Если ОбщиеПеременные.КД3_КоличествоПотоков = 1 Тогда
		КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Получение существующих объектов", 0);
		КД3_ПолучитьСуществующиеСсылки(ОбщиеПеременные, Неопределено, Истина);
	Иначе
		// Пустые массивы существующих ссылок для корректной работы типовых процедуры поиска
		ОбщиеПеременные.Вставить("СуществующиеОбъекты", Новый Массив);
		ОбщиеПеременные.Вставить("СуществующиеСвойства", Новый Массив);
		ОбщиеПеременные.Вставить("СуществующиеЗначения", Новый Массив);
	КонецЕсли;
	// Соответствие для отложенного заполнения типа свойства БизнесПроцесс
	ОбщиеПеременные.Вставить("КД3_ОтложеннаяПривязкаБизнесПроцессаКЗадаче", Новый Соответствие);
	//-КД3
	СоздатьОбъектыПростыеТипы(ОбщиеПеременные);
	
	ОбщиеПеременные.Вставить("ОтложенноеЗаполнениеТиповСвойств", Новый Соответствие());
	
	ТабРегистраторыИРегистры = Новый ТаблицаЗначений;
	ТабРегистраторыИРегистры.Колонки.Добавить("Регистр");
	ТабРегистраторыИРегистры.Колонки.Добавить("Регистратор");
	ТабРегистраторыИРегистры.Колонки.Добавить("ЗапрещеноПроведениеДокумента");
	
	ОбщиеПеременные.Вставить("РегистраторыИРегистры", ТабРегистраторыИРегистры);
	ОбщиеПеременные.Вставить("ЭтоРасширение", Ложь);
	ОбщиеПеременные.Вставить("ПутьКФайламРасширения", "");
	
	ОбработатьКаталогиСДанными(ОбщиеПеременные);
	
	Если ОбщиеПеременные.ЕстьРасширения Тогда
		Для Каждого ПутьКФайламРасширения Из ОбщиеПеременные.КаталогиРасширений Цикл
			Если НЕ ЗначениеЗаполнено(ПутьКФайламРасширения) Тогда
				Продолжить;
			КонецЕсли;
			ОбщиеПеременные.Вставить("ЭтоРасширение", Истина);
			ОбщиеПеременные.Вставить("ПутьКФайламРасширения", ПутьКФайламРасширения);
			ОбработатьКаталогиСДанными(ОбщиеПеременные);
		КонецЦикла;
	КонецЕсли;
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Заполнение типов планов видов расчета", 0);
	//-КД3
	Если НЕ ОбщиеПеременные.ТолькоОбновитьПланыОбмена Тогда
		// Предопределенные ТЧ планов видов расчета.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Объекты.Ссылка,
			|	ВЫБОР КОГДА Свойства.Ссылка is null ТОГДА ЛОЖЬ
			|		ИНАЧЕ
			|	ИСТИНА Конец КАК ЕстьПериодДействияБазовый
			|ИЗ Справочник.Объекты КАК Объекты
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
			|ПО Свойства.Владелец = Объекты.Ссылка
			|	И Свойства.Наименование = ""ПериодДействияБазовый""
			|ГДЕ Объекты.Владелец = &Конфигурация
			| И НЕ Объекты.ЭтоГруппа И Объекты.Родитель <> ЗНАЧЕНИЕ(Справочник.Объекты.ПустаяСсылка) И Объекты.ПометкаУдаления = ЛОЖЬ
			|	И Объекты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПланВидовРасчета)";
		Запрос.УстановитьПараметр("Конфигурация", ОбщиеПеременные.Конфигурация);
		Результат = Запрос.Выполнить();
		ВсеПВР = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщиеПеременные.Вставить("СоздаватьПредопределенныеСвойства", Истина);
			ДобавитьТабличныеЧастиВПланВидовРасчета(Выборка.Ссылка, ОбщиеПеременные, ВсеПВР, Выборка.ЕстьПериодДействияБазовый);
		КонецЦикла;
	КонецЕсли;
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Заполнение типов свойств", 0);
	Если ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств.Количество() > 0 Тогда
		КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств.Количество(), 1);
	КонецЕсли;
	//-КД3
	// Заполнение типов загруженных свойств.
	Для Каждого СвойстваИТипы Из ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств Цикл
		//+КД3
		КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "", 1);
		//-КД3
		ТипыСвойства = СвойстваИТипы.Значение;
		Попытка
			СвойствоОбъект = СвойстваИТипы.Ключ.ПолучитьОбъект();
		Исключение
			Продолжить;
		КонецПопытки;
		СвойствоОбъект.Типы.Очистить();
		ТипыЗаполнены = Ложь;
		ТипыСтрокой = "";
		Для Каждого ТипСвойства Из ТипыСвойства Цикл
			Если СтрНайти(НРег(ТипСвойства), "definedtype.") > 0 И ОбщиеПеременные.Свойство("ОпределяемыеТипы") Тогда
				ПозицияТочки = СтрНайти(ТипСвойства, ".");
				ИмяТипа = Сред(ТипСвойства, ПозицияТочки + 1);
				ТипыВсе = Неопределено;
				Если ОбщиеПеременные.ОпределяемыеТипы.Свойство(ИмяТипа, ТипыВсе) Тогда
					Для Каждого ТекТип Из ТипыВсе Цикл
						СтрокаТип = СвойствоОбъект.Типы.Добавить();
						СтрокаТип.Тип = ТекТип;
						ТипыСтрокой = ТипыСтрокой + СокрЛП(ТекТип) + ",";
					КонецЦикла;
					ТипыЗаполнены = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			РодительОбъекта = Неопределено;
			ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(ТипСвойства, РодительОбъекта, ОбщиеПеременные);
			Если ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
				ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительОбъекта,ОбщиеПеременные.Конфигурация);
				Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
					СтрокаТип = СвойствоОбъект.Типы.Добавить();
					СтрокаТип.Тип = ОбъектСсылка;
					ТипыЗаполнены = Истина;
					ТипыСтрокой = ТипыСтрокой + СокрЛП(ОбъектСсылка) + ",";
				КонецЕсли;
			ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ТипСвойства) Тогда
				// Возможен простой тип вперемешку со ссылочными.
				ТипСсылка = Неопределено;
				Если ОбщиеПеременные.ПростыеТипы.Свойство(ТипСвойства, ТипСсылка) Тогда
					СтрокаТип = СвойствоОбъект.Типы.Добавить();
					СтрокаТип.Тип = ТипСсылка;
					ТипыЗаполнены = Истина;
					ТипыСтрокой = ТипыСтрокой + СокрЛП(ТипСвойства) + ",";
				КонецЕсли;
			Иначе
				// Проверка на простой тип в перечне составного типа.
				ПозСкобки = СтрНайти(ТипСвойства, "(");
				Если ПозСкобки > 0 Тогда
					Часть1 = Лев(ТипСвойства, ПозСкобки - 1);
				Иначе
					Часть1 = СокрЛП(ТипСвойства);
				КонецЕсли;
				ПростойТипОбъект = Неопределено;
				Попытка
					ОбщиеПеременные.ПростыеТипы.Свойство(Часть1, ПростойТипОбъект);
				Исключение
					ПростойТипОбъект = Неопределено;
				КонецПопытки;
				Если ПростойТипОбъект <> Неопределено Тогда
					СтрокаТип = СвойствоОбъект.Типы.Добавить();
					СтрокаТип.Тип = ПростойТипОбъект;
					ТипыЗаполнены = Истина;
					ТипыСтрокой = ТипыСтрокой + СокрЛП(ТипСвойства) + ",";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ТипыЗаполнены Тогда
			СвойствоОбъект.ТипыСтрокой = Лев(ТипыСтрокой, СтрДлина(ТипыСтрокой) - 1);
			СвойствоОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	//+КД3
	КД3_ЗагрузкаМетаданных.ЗавершитьПрогресс(ОбщиеПеременные, 1);
	//-КД3
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Привязка задач к бизнес-процессам", 0);
	Для Каждого КлючИЗначение Из ОбщиеПеременные.КД3_ОтложеннаяПривязкаБизнесПроцессаКЗадаче Цикл
		ПривязатьБизнесПроцессКЗадаче(КлючИЗначение.Ключ, КлючИЗначение.Значение, ОбщиеПеременные);
	КонецЦикла;
	//-КД3
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Заполнение типов регистраторов", 0);
	//-КД3
	// Заполнение типов у регистраторов - свойств регистра.
	// Заполнение движений по регистрам у документов-регистраторов.
	Если НЕ ОбщиеПеременные.ТолькоОбновитьПланыОбмена И ОбщиеПеременные.ВариантЗагрузкиДвижений > 0 Тогда
		Если ОбщиеПеременные.ЕстьРасширения Тогда
			ОбщиеПеременные.РегистраторыИРегистры.Свернуть("Регистр, Регистратор, ЗапрещеноПроведениеДокумента");
		КонецЕсли;
		ОбщиеПеременные.РегистраторыИРегистры.Сортировать("Регистр, Регистратор");
		ТекстЗапросаСвойстваРегистра = "ВЫБРАТЬ
		|	Наименование,
		|	Синоним,
		|	Комментарий,
		|	Идентификатор,
		|	КвалификаторыЧисла_Длина,
		|	КвалификаторыЧисла_Точность,
		|	КвалификаторыЧисла_Неотрицательное,
		|	КвалификаторыСтроки_Фиксированная,
		|	КвалификаторыДаты_Состав,
		|	КвалификаторыЧисла_Длина,
		|	Вид,
		|	ТипыСтрокой,
		|	Типы
		|ИЗ Справочник.Свойства
		|ГДЕ Владелец.Владелец = &Конфигурация И Владелец = &Владелец И ЭтоГруппа = ЛОЖЬ
		|	И НЕ ПометкаУдаления";
		ВидыСвойств = Новый Массив;
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Измерение);
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Реквизит);
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Ресурс);
		ВидыСвойств.Добавить(Перечисления.ВидыСвойств.Свойство);

		//+КД3
		Если ОбщиеПеременные.РегистраторыИРегистры.Количество() > 0 Тогда
			КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, ОбщиеПеременные.РегистраторыИРегистры.Количество(), 1);
		КонецЕсли;
		//-КД3
		ТекРегистр = "";
		ОбъектРегистратор = Неопределено;
		Для Каждого Строка Из ОбщиеПеременные.РегистраторыИРегистры Цикл
			//+КД3
			КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "", 1);
			//-КД3
			Если ОбщиеПеременные.ВариантЗагрузкиДвижений = 1 И Строка.ЗапрещеноПроведениеДокумента = Ложь Тогда
				Продолжить;
			КонецЕсли;
			Если ТекРегистр = "" Или ТекРегистр <> Строка.Регистр Тогда
				
				Если ОбъектРегистратор <> Неопределено Тогда
					ОбъектРегистратор.ТипыСтрокой = Лев(ТипыСтрокой, СтрДлина(ТипыСтрокой) - 1);
					ОбъектРегистратор.Записать();
				КонецЕсли;
				РодительОбъекта = Неопределено;
				ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(Строка.Регистр, РодительОбъекта, ОбщиеПеременные);
				Если НЕ ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
					ОбъектРегистратор = Неопределено;
					Продолжить;
				КонецЕсли;
				ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительОбъекта,ОбщиеПеременные.Конфигурация);
				Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
					ОбъектРегистратор = Неопределено;
					Продолжить;
				КонецЕсли;
				// Зачитываем структуру регистра для последующего использования.
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапросаСвойстваРегистра;
				Запрос.УстановитьПараметр("Конфигурация", ОбщиеПеременные.Конфигурация);
				Запрос.УстановитьПараметр("Владелец", ОбъектСсылка);
				Запрос.УстановитьПараметр("ВидыСвойств", ВидыСвойств);
				ИзмеренияРегистра = Запрос.Выполнить().Выгрузить();		
				
				ДанныеРегистра = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Имя, Тип");
				СвойствоРегистратор = Справочники.Свойства.НайтиПоНаименованию("Регистратор", Истина,, ОбъектСсылка);
				Если ЗначениеЗаполнено(СвойствоРегистратор) Тогда
					ОбъектРегистратор = СвойствоРегистратор.ПолучитьОбъект();
					ОбъектРегистратор.Типы.Очистить();
					ТипыСтрокой = "";
				КонецЕсли;
			КонецЕсли;
			// Добавление свойств - движений в регистратор.
			Если ИзмеренияРегистра.Количество() > 0 Тогда
				НайтиСоздатьСвойстваНаборДвижений(Строка.Регистратор, ДанныеРегистра, ИзмеренияРегистра, ОбщиеПеременные);
			КонецЕсли;
			Если ОбъектРегистратор = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТип = ОбъектРегистратор.Типы.Добавить();
			СтрокаТип.Тип = Строка.Регистратор;
			ТипыСтрокой = ТипыСтрокой + СокрЛП(Строка.Регистратор) + ",";
		КонецЦикла;
		Если СвойствоРегистратор <> Неопределено И ОбъектРегистратор <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТипыСтрокой) Тогда
				ОбъектРегистратор.ТипыСтрокой = Лев(ТипыСтрокой, СтрДлина(ТипыСтрокой) - 1);
			КонецЕсли;
			ОбъектРегистратор.Записать();
		КонецЕсли;
	КонецЕсли;
	//+КД3
	КД3_ЗагрузкаМетаданных.ЗавершитьПрогресс(ОбщиеПеременные, 1);
	//-КД3
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Пометка на удаление неактуальных объектов", 0);
	Если НЕ ОбщиеПеременные.ЗагрузитьНовую Тогда
		//+КД3
		КоличествоОбъектов =
			  ОбщиеПеременные.СуществующиеОбъекты.Количество()
			+ ОбщиеПеременные.СуществующиеСвойства.Количество()
			+ ОбщиеПеременные.СуществующиеЗначения.Количество();
		Если КоличествоОбъектов > 0 Тогда
			КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, КоличествоОбъектов, 1);
		КонецЕсли;
		//-КД3
		КД3_УдалитьОтсутствующиеСсылки(ОбщиеПеременные, ОбщиеПеременные.СуществующиеОбъекты);
		КД3_УдалитьОтсутствующиеСсылки(ОбщиеПеременные, ОбщиеПеременные.СуществующиеСвойства);
		КД3_УдалитьОтсутствующиеСсылки(ОбщиеПеременные, ОбщиеПеременные.СуществующиеЗначения);
		//+КД3
		КД3_ЗагрузкаМетаданных.ЗавершитьПрогресс(ОбщиеПеременные, 1);
		//-КД3
	КонецЕсли;
	//-КД3
	
	//+КД3
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "Удаление временных файлов", 0);
	//-КД3
	Если НЕ ОбщиеПеременные.КД3_ЭтоСервер Тогда
		// Удаление временных файлов
		Для Каждого ПомФайл Из ОбщиеПеременные.ПомещенныеФайлы Цикл
			Попытка
				УдалитьФайлы(ПомФайл.Хранение);
			Исключение
				ПомФайл.Хранение = "";
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Результат загрузки.
	СостояниеНаборЗаписей = РегистрыСведений.СостоянияЗагрузокМетаданных.СоздатьНаборЗаписей();
	СостояниеНаборЗаписей.Отбор.Релиз.Установить(ОбщиеПеременные.Конфигурация);
	СостояниеНаборЗаписей.Прочитать();	
	ЗаписьСостояние = СостояниеНаборЗаписей[0];
	ЗаписьСостояние.ДатаОкончания = ТекущаяДатаСеанса();
	ЗаписьСостояние.Результат = ?(ОбщиеПеременные.Отказ, Перечисления.РезультатыВыполненияОбмена.Ошибка, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	СостояниеНаборЗаписей.Записать();
	
	Если АдресВременногоХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(НЕ ОбщиеПеременные.Отказ, АдресВременногоХранилища);
	КонецЕсли;
КонецПроцедуры // ВыполнитьЗагрузкуМетаданных()
#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Процедура ПрочитатьДанныеОКонфигурации(ОбщиеПеременные)
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ИмяФайлаДляПоиска = "Configuration.xml";
		ТекстСообщенияОбОшибке = НСтр("ru='В каталоге не найден файл Configuration.xml'");
	Иначе
		ИмяФайлаДляПоиска = ".project";
		ТекстСообщенияОбОшибке = НСтр("ru='В каталоге не найден файл project'");
	КонецЕсли;
	ИмяФайлаСведений = НайтиПомещенныеФайлыПоИмени(ОбщиеПеременные.ПомещенныеФайлы, ИмяФайлаДляПоиска, ОбщиеПеременные);
	Если ИмяФайлаСведений = "" Тогда
		ЗаписатьСообщениеОбОшибке(ОбщиеПеременные, ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;

	ИмяКонфигурации = "";
	СинонимКонфигурации = "";
	ВерсияКонфигурации = "";
	КомментарийКонфигурации = "";
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаСведений);	
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ЧтениеXML.Прочитать(); // MetaDataObject
		Если НЕ (ЧтениеXML.Имя = "MetaDataObject" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЗаписатьСообщениеОбОшибке(ОбщиеПеременные, НСтр("ru='Файл не содержит описания конфигурации'"));
			Возврат;
		КонецЕсли;
		ЧтениеXML.Прочитать(); // Configuration
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "Properties" Тогда
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Если ЧтениеXML.Имя = "Name" Тогда
								ИмяКонфигурации = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
							ИначеЕсли ЧтениеXML.Имя = "Synonym" Тогда
								СинонимКонфигурации = ПрочитатьСиноним(ЧтениеXML);
							ИначеЕсли ЧтениеXML.Имя = "Version" Тогда
								ВерсияКонфигурации = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
							Иначе
								ЧтениеXML.Пропустить();
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
			Иначе
				ЧтениеXML.Пропустить();
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЧтениеXML.Прочитать(); // projectDescription
		Если НЕ (ЧтениеXML.Имя = "projectDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ЗаписатьСообщениеОбОшибке(ОбщиеПеременные, НСтр("ru='Файл не содержит описания конфигурации'"));
			Возврат;
		КонецЕсли;
		ЧтениеXML.Прочитать();
		Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "projectDescription") Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "name" Тогда
					ИмяКонфигурации = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ИначеЕсли ЧтениеXML.Имя = "synonym" Тогда
					СинонимКонфигурации = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ИначеЕсли ЧтениеXML.Имя = "comment" Тогда
					КомментарийКонфигурации = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Иначе
					ЧтениеXML.Пропустить();
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(ЧтениеXML.Имя) Тогда
				Прервать;
			Иначе
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		ЗаписатьСообщениеОбОшибке(ОбщиеПеременные, НСтр("ru='Не удалось идентифицировать конфигурацию'"));
		Возврат;
	КонецЕсли;
	Если ОбщиеПеременные.ЗагрузитьНовую Тогда
		КонфигурацияОбъект = Справочники.Релизы.СоздатьЭлемент();
		КонфигурацияОбъект.Синоним = СинонимКонфигурации;
		КонфигурацияОбъект.Комментарий = КомментарийКонфигурации;
		КонфигурацияОбъект.КонфигурацияВладелец = Справочники.Конфигурации.НайтиПоНаименованию(ИмяКонфигурации);
		Если НЕ ЗначениеЗаполнено(КонфигурацияОбъект.КонфигурацияВладелец) Тогда
			КонфигурацияОбъект.КонфигурацияВладелец = Справочники.Конфигурации.НеизвестнаяКонфигурация;
		КонецЕсли;
	Иначе
		КонфигурацияОбъект = ОбщиеПеременные.Конфигурация.ПолучитьОбъект();
	КонецЕсли;
	КонфигурацияОбъект.Имя = ИмяКонфигурации;
	Если НЕ ЗначениеЗаполнено(КонфигурацияОбъект.Наименование) Тогда
		КонфигурацияОбъект.Наименование = ИмяКонфигурации + " " + ВерсияКонфигурации;
	КонецЕсли;
	КонфигурацияОбъект.Версия = ВерсияКонфигурации;
	КонфигурацияОбъект.ДатаОбновления = ТекущаяДатаСеанса();
	КонфигурацияОбъект.Записать();
	Если ОбщиеПеременные.ЗагрузитьНовую Тогда
		ОбщиеПеременные.Вставить("Конфигурация", КонфигурацияОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьКаталогиСДанными(ОбщиеПеременные)
	
	ГруппыОбъектов = Новый ТаблицаЗначений;
	ГруппыОбъектов.Колонки.Добавить("ПараметрыЗадания");
	ГруппыОбъектов.Колонки.Добавить("АдресРезультата");
	ГруппыОбъектов.Колонки.Добавить("ИД");
	
	Если ОбщиеПеременные.ТолькоОбновитьПланыОбмена Тогда
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПланыОбмена", "ExchangePlans", "ПланОбменаСсылка", Перечисления.ТипыОбъектов.ПланОбмена);
	Иначе
		// Справочники.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "Справочники", "Catalogs", "СправочникСсылка", Перечисления.ТипыОбъектов.Справочник);
		// Документы.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "Документы", "Documents", "ДокументСсылка", Перечисления.ТипыОбъектов.Документ);
		// Перечисления.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "Перечисления", "Enums", "ПеречислениеСсылка", Перечисления.ТипыОбъектов.Перечисление);
		// Задачи.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "Задачи", "Tasks", "ЗадачаСсылка", Перечисления.ТипыОбъектов.Задача);
		// Бизнес процессы.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "БизнесПроцессы", "BusinessProcesses", "БизнесПроцессСсылка", Перечисления.ТипыОбъектов.БизнесПроцесс);
		// Планы счетов.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПланыСчетов", "ChartsOfAccounts", "ПланСчетовСсылка", Перечисления.ТипыОбъектов.ПланСчетов);
		// Планы видов расчетов.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПланыВидовРасчета", "ChartsOfCalculationTypes", "ПланВидовРасчетаСсылка", Перечисления.ТипыОбъектов.ПланВидовРасчета);
		// Планы видов характеристик.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПланыВидовХарактеристик", "ChartsOfCharacteristicTypes", "ПланВидовХарактеристикСсылка", Перечисления.ТипыОбъектов.ПланВидовХарактеристик);
		// Регистры.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "РегистрыБухгалтерии", "AccountingRegisters", "РегистрБухгалтерииЗапись", Перечисления.ТипыОбъектов.РегистрБухгалтерии);
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "РегистрыНакопления", "AccumulationRegisters", "РегистрНакопленияЗапись", Перечисления.ТипыОбъектов.РегистрНакопления);
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "РегистрыРасчета", "CalculationRegisters", "РегистрРасчетаЗапись", Перечисления.ТипыОбъектов.РегистрРасчета);
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "РегистрыСведений", "InformationRegisters", "РегистрСведенийЗапись", Перечисления.ТипыОбъектов.РегистрСведений);
		// Планы обмена.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПланыОбмена", "ExchangePlans", "ПланОбменаСсылка", Перечисления.ТипыОбъектов.ПланОбмена);
		// Подписки на события.
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "ПодпискиНаСобытия", "EventSubscriptions", "ПодпискаНаСобытие", Перечисления.ТипыОбъектов.ПодпискаНаСобытие);
		// Константы.
		//ОбработатьКонстанты(ОбщиеПеременные);
		КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "Константы", "Constants", "Константа", Перечисления.ТипыОбъектов.НаборКонстант);
		//+КД3
		Если ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку И ОбщиеПеременные.КД3_МестоХраненияИндексов <> 0 Тогда
			КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, "КД3_ОбщиеМодули",,,);
		КонецЕсли;
		//-КД3
	КонецЕсли;
	
	КД3_ОбработатьГруппыОбъектовМногопоточно(ОбщиеПеременные, ГруппыОбъектов);
	
	// Определяемые типы.
	ОбработатьОпределяемыеТипы(ОбщиеПеременные);
	
КонецПроцедуры

Процедура ОбработатьГруппуОбъектов(ОбщиеПеременные, ИмяГруппы, ИмяКаталога, ПрефиксИменЭлементов, ТипОбъекта)
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "\" + ИмяКаталога + "\", ".xml", ОбщиеПеременные);
	Иначе
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "src\" + ИмяКаталога + "\", ".mdo", ОбщиеПеременные);
	КонецЕсли;
	Если ВложенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//+КД3
	КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, ВложенныеФайлы.Количество());
	//-КД3
	// Поиск / создание группы.
	ТекущийРодитель = Справочники.Объекты.НайтиПоНаименованию(ИмяГруппы, Истина,,ОбщиеПеременные.Конфигурация);
	Если НЕ ЗначениеЗаполнено(ТекущийРодитель) Тогда
		ОбъектПапка = Справочники.Объекты.СоздатьГруппу();
		ОбъектПапка.Наименование = ИмяГруппы;
		ОбъектПапка.Имя = ИмяГруппы;
		ОбъектПапка.Синоним = ИмяГруппы;
		ОбъектПапка.Владелец = ОбщиеПеременные.Конфигурация;
		ОбъектПапка.Записать();
		ТекущийРодитель = ОбъектПапка.Ссылка;
	КонецЕсли;
	Для Каждого ВложенныйФайл Из ВложенныеФайлы Цикл
		//+КД3
		КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ИмяГруппы);
		//-КД3
		Если ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытие Тогда
			ЗагрузитьПодпискуНаСобытие(ОбщиеПеременные, ТекущийРодитель, ВложенныйФайл, ПрефиксИменЭлементов, ТипОбъекта);
		Иначе
			ЗагрузитьОбъектМетаданных(ОбщиеПеременные, ТекущийРодитель, ВложенныйФайл, ПрефиксИменЭлементов, ТипОбъекта);
			//+КД3
			Если ОбщиеПеременные.КД3_ЗагружатьМетодыМодулей И НЕ ОбщиеПеременные.КД3_НастройкиКонфигурации.ЗагружатьИзФайлов Тогда
				// При выборе места хранения индексов в каталоге или информационной базе и не заполненном расписании
				// загрузки из исходных кодов загружаются все модули, иначе только глобальных контекст
				ВидыМодулей = Новый Массив;
				ВидыМодулей.Добавить("Manager");
				ВидыМодулей.Добавить("Object");
				Для Каждого ВидМодуля Из ВидыМодулей Цикл
					ФайлОбъекта = Новый Файл(ВложенныйФайл.ИсходноеИмяФайла);
					КлючКоллекции = Неопределено;
					КД3_ЗагрузкаМетаданных.ЗагрузитьМодульОбъекта(ОбщиеПеременные, КлючКоллекции, ОбщиеПеременные.Конфигурация, ВидМодуля, НРЕг(ИмяГруппы), ФайлОбъекта.ИмяБезРасширения);
				КонецЦикла;
			КонецЕсли;
			//-КД3
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьОбъектМетаданных(ОбщиеПеременные, ТекущийРодитель, ВложенныйФайл, ПрефиксИменЭлементов, ТипОбъекта)
	ДанныеОбъекта = Новый Структура();
	ДанныеОбъекта.Вставить("ИмяЗадачиБизнесПроцесса", "");
	ДанныеОбъекта.Вставить("ПланСчетов", "");
	ДанныеОбъекта.Вставить("ПериодичностьРегистраСведений", "");
	ДанныеОбъекта.Вставить("РежимЗаписиРегистраСведений", "");
	ДанныеОбъекта.Вставить("ПланВидовРасчета", "");
	ДанныеОбъекта.Вставить("Корреспонденция", Ложь);
	ДанныеОбъекта.Вставить("ЕстьБазовыйПериод", Ложь);
	ДанныеОбъекта.Вставить("ЕстьПериодДействия", Ложь);
	ДанныеОбъекта.Вставить("ТипыВладельца", Новый Массив);
	ДанныеОбъекта.Вставить("МассивРегистров", Новый Массив);
	ДанныеОбъекта.Вставить("ТипыЗначенийХарактеристик", Новый Массив);
	ДанныеОбъекта.Вставить("ПредопределенныеСвойства", Новый Структура); 
	ДанныеОбъекта.Вставить("ТекущийРодитель", ТекущийРодитель);
	ДанныеОбъекта.Вставить("ПрефиксИменЭлементов", ПрефиксИменЭлементов);
	ДанныеОбъекта.Вставить("ТипОбъекта", ТипОбъекта);
	ДанныеОбъекта.Вставить("ЗапрещеноПроведениеДокумента", Ложь);
	ДанныеОбъекта.Вставить("ДобавленНовый", Ложь);
	ДанныеОбъекта.Вставить("ТипРегистраНакопления", Неопределено);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВложенныйФайл.ТекущееИмяФайла);

	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ТекОбъект = ПрочитатьСведенияОбОбъектеИзXML(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные);
	Иначе
		ТекОбъект = ПрочитатьСведенияОбОбъектеИзEDT(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные);
	КонецЕсли;
	Если ТекОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.ДобавленНовый Или НЕ ОбщиеПеременные.ТолькоДобавлятьНовые
		Или НЕ ОбщиеПеременные.ТолькоОбновитьПланыОбмена Тогда
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИмяЗадачиБизнесПроцесса) Тогда
			// Бизнес - процесс, привязка к задаче. Надо заполнить тип свойства БизнесПроцесс у соотв задачи.
			//+КД3
			//ПривязатьБизнесПроцессКЗадаче(ДанныеОбъекта.ИмяЗадачиБизнесПроцесса, ТекОбъект.Ссылка, ОбщиеПеременные);
			ОбщиеПеременные.КД3_ОтложеннаяПривязкаБизнесПроцессаКЗадаче.Вставить(ДанныеОбъекта.ИмяЗадачиБизнесПроцесса, ТекОбъект.Ссылка);
			//-КД3
		КонецЕсли;
	КонецЕсли;
	Если ДанныеОбъекта.МассивРегистров.Количество() > 0 Тогда
		Для Каждого Регистр Из ДанныеОбъекта.МассивРегистров Цикл
			СтрокаТЗ = ОбщиеПеременные.РегистраторыИРегистры.Добавить();
			СтрокаТЗ.Регистратор = ТекОбъект.Ссылка;
			СтрокаТЗ.Регистр = Регистр;
			СтрокаТЗ.ЗапрещеноПроведениеДокумента = ДанныеОбъекта.ЗапрещеноПроведениеДокумента;
		КонецЦикла;
	КонецЕсли;
	// Дочерние объекты (свойства).
	// Предопределенные свойства для разных типов объектов.
	Если НЕ ДанныеОбъекта.ДобавленНовый И ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
		ОбщиеПеременные.Вставить("СоздаватьПредопределенныеСвойства", Ложь);
	Иначе
		ОбщиеПеременные.Вставить("СоздаватьПредопределенныеСвойства", Истина);
	КонецЕсли;
	Если ДанныеОбъекта.ТипыВладельца.Количество() > 0 Тогда
		ДобавитьПредопределенноеСвойство("Владелец", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ДанныеОбъекта.ТипыВладельца);
	КонецЕсли;
	Если ТекОбъект.Иерархический Тогда
		Если ТекОбъект.ВидИерархии <> "ИерархияЭлементов" Тогда
			ДобавитьПредопределенноеСвойство("ЭтоГруппа", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		КонецЕсли;
		ДобавитьПредопределенноеСвойство("Родитель", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ТекОбъект.Ссылка);
	КонецЕсли;
	Если ТипОбъекта = Перечисления.ТипыОбъектов.Документ Тогда
		ДобавитьПредопределенноеСвойство("Проведен", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Дата", Новый Структура("КвалификаторыДаты_Состав", "Дата и время"));
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Справочник
		Или ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик Тогда
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Предопределенный", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Реквизит, ОбщиеПеременные, "Булево");
		Если ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик И ДанныеОбъекта.ТипыЗначенийХарактеристик.Количество() > 0 Тогда
			ДобавитьПредопределенноеСвойство("ТипЗначения", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Реквизит, ОбщиеПеременные, ДанныеОбъекта.ТипыЗначенийХарактеристик);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.БизнесПроцесс Тогда
		ДобавитьПредопределенноеСвойство("Стартован", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Завершен", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("ВедущаяЗадача", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Дата", Новый Структура("КвалификаторыДаты_Состав", "Дата и время"));
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Задача Тогда
		ДобавитьПредопределенноеСвойство("Выполнена", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Дата", Новый Структура("КвалификаторыДаты_Состав", "Дата и время"));
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		//+КД3
		// Добавление предопределенных свойств без типов для котроля удаления ссылок свойств.
		// Типы будут добавлены в основном потоке после обработки всех объекетов.
		ДобавитьПредопределенноеСвойство("БизнесПроцесс", Неопределено, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		//-КД3
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
		ДобавитьПредопределенноеСвойство("Период", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		ДобавитьПредопределенноеСвойство("Активность", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Регистратор", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		// Счета
		Если ДанныеОбъекта.Корреспонденция Тогда
			ДобавитьПредопределенноеСвойство("СчетДт", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ДанныеОбъекта.ПланСчетов);
			ДобавитьПредопределенноеСвойство("СчетКт", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ДанныеОбъекта.ПланСчетов);
			ДобавитьПредопределенноеСвойство("СубконтоДт", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.ВидыСубконтоСчета, ОбщиеПеременные);
			ДобавитьПредопределенноеСвойство("СубконтоКт", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.ВидыСубконтоСчета, ОбщиеПеременные);
		Иначе
			ДобавитьПредопределенноеСвойство("Счет", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ДанныеОбъекта.ПланСчетов);
			ДобавитьПредопределенноеСвойство("Субконто", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.ВидыСубконтоСчета, ОбщиеПеременные);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		ДобавитьПредопределенноеСвойство("Период", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		ДобавитьПредопределенноеСвойство("Активность", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Регистратор", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		Если ДанныеОбъекта.ТипРегистраНакопления = "Остатки" Тогда
			ДобавитьПредопределенноеСвойство("ВидДвижения", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрСведений Тогда
		ДобавитьПредопределенноеСвойство("Активность", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		Если ДанныеОбъекта.ПериодичностьРегистраСведений <> "Nonperiodical" Тогда
			ДобавитьПредопределенноеСвойство("Период", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		КонецЕсли;
		Если ДанныеОбъекта.РежимЗаписиРегистраСведений = "RecorderSubordinate" Тогда
			ДобавитьПредопределенноеСвойство("Регистратор", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
		ДобавитьПредопределенноеСвойство("ПериодРегистрации", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		ДобавитьПредопределенноеСвойство("Активность", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Сторно", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Регистратор", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		ДобавитьПредопределенноеСвойство("ВидРасчета", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, ДанныеОбъекта.ПланВидовРасчета);
		Если ДанныеОбъекта.ЕстьПериодДействия Тогда
			ДобавитьПредопределенноеСвойство("ПериодДействия", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
			ДобавитьПредопределенноеСвойство("ПериодДействияНачало", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
			ДобавитьПредопределенноеСвойство("ПериодДействияКонец", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		КонецЕсли;
		Если ДанныеОбъекта.ЕстьБазовыйПериод Тогда
			ДобавитьПредопределенноеСвойство("БазовыйПериодНачало", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
			ДобавитьПредопределенноеСвойство("БазовыйПериодКонец", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовРасчета Тогда
		Если ДанныеОбъекта.ЕстьПериодДействия Тогда
			ДобавитьПредопределенноеСвойство("ПериодДействияБазовый", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Дата");
		КонецЕсли;
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		//+КД3
		// Добавление предопределенных свойств без типов для котроля удаления ссылок свойств.
		// Типы будут добавлены в основном потоке после обработки всех объекетов.
		ДобавитьТабличныеЧастиВПланВидовРасчета(ТекОбъект.Ссылка, ОбщиеПеременные, Неопределено, ДанныеОбъекта.ЕстьПериодДействия);
		//-КД3
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена Тогда
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("ЭтотУзел", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		КвалификаторыНомера = Новый Структура("КвалификаторыЧисла_Неотрицательное", Истина);
		ДанныеОбъекта.ПредопределенныеСвойства.Вставить("НомерОтправленного", КвалификаторыНомера);
		ДанныеОбъекта.ПредопределенныеСвойства.Вставить("НомерПринятого", КвалификаторыНомера);
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ПланСчетов Тогда
		ДобавитьПредопределенноеСвойство("Забалансовый", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("ПометкаУдаления", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
		ДобавитьПредопределенноеСвойство("Предопределенный", ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, "Булево");
	КонецЕсли;
	Для Каждого ПС Из ДанныеОбъекта.ПредопределенныеСвойства Цикл
		ДобавитьПредопределенноеСвойство(ПС.Ключ, ТекОбъект.Ссылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные,, ПС.Значение);
	КонецЦикла;
	ДанныеОбъекта.Вставить("ТекОбъект", ТекОбъект);
	// Продолжение чтения данных из файла.
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ПозицияТочки = СтрНайти(ВложенныйФайл.ИсходноеИмяФайла, ".", НаправлениеПоиска.СКонца);
		Если ПозицияТочки > 0 Тогда
			ДанныеОбъекта.Вставить("ПутьКПодчиненным", Лев(ВложенныйФайл.ИсходноеИмяФайла, ПозицияТочки - 1));
		КонецЕсли;
		ПрочитатьСведенияОСвойствахИзXML(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные);
	Иначе
		ПрочитатьСведенияОСвойствахИзEDT(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные);
	КонецЕсли;
КонецПроцедуры

Функция ПрочитатьСведенияОбОбъектеИзXML(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные)
	ЧтениеXML.Прочитать(); // MetaDataObject
	ЧтениеXML.Прочитать(); // Объект - документ, справочник и т.п.
	УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid");
	ЧтениеXML.Прочитать(); // InternalInfo
	ЧтениеXML.Пропустить();
	ЧтениеXML.Прочитать(); // Properties
	ТекОбъект = Неопределено;
	Имя = "";
	Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		// Попытка найти объект по УИДу
		ТекСсылка = Справочники.Объекты.НайтиПоРеквизиту("Идентификатор", УникальныйИдентификатор, ДанныеОбъекта.ТекущийРодитель, ОбщиеПеременные.Конфигурация);
		Если ЗначениеЗаполнено(ТекСсылка) Тогда
			ТекОбъект = ТекСсылка.ПолучитьОбъект();
			Если ТекОбъект.ПометкаУдаления Тогда
				ТекОбъект.ПометкаУдаления = Ложь;
				Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
					ТекОбъект.Записать();
				КонецЕсли;
			Иначе
				УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Чтение блока Properties - заполнение реквизитов Объекта.
	// Также здесь читаются некоторые параметры свойств.
	Пока НЕ (ЧтениеXML.Имя = "Properties" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента)  Цикл
		Если НЕ ЗначениеЗаполнено(ЧтениеXML.Имя) Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "Name" Тогда
				Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				// Не нашли объект по УИДу либо не задан УИД.
				Если ТекОбъект = Неопределено Тогда
					ТекСсылка = Справочники.Объекты.НайтиПоНаименованию(ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя, Истина, ДанныеОбъекта.ТекущийРодитель, ОбщиеПеременные.Конфигурация);
					Если НЕ ЗначениеЗаполнено(ТекСсылка)
						ИЛИ (ЗначениеЗаполнено(УникальныйИдентификатор)
						И ЗначениеЗаполнено(ТекСсылка.Идентификатор)
						И ТекСсылка.Идентификатор <> УникальныйИдентификатор)
						И НЕ ОбщиеПеременные.ЭтоРасширение Тогда
						ТекОбъект = Справочники.Объекты.СоздатьЭлемент();
						ТекОбъект.Наименование = ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя;
						ТекОбъект.Идентификатор = УникальныйИдентификатор;
						ТекОбъект.Имя = Имя;
						ТекОбъект.Родитель = ДанныеОбъекта.ТекущийРодитель;
						ТекОбъект.Владелец = ОбщиеПеременные.Конфигурация;
						ТекОбъект.Тип = ДанныеОбъекта.ТипОбъекта;
						ДанныеОбъекта.Вставить("ДобавленНовый", Истина);
					Иначе
						ТекОбъект = ТекСсылка.ПолучитьОбъект();
						Если НЕ ЗначениеЗаполнено(ТекОбъект.Идентификатор) Или НЕ ОбщиеПеременные.ЭтоРасширение Тогда
							ТекОбъект.Идентификатор = УникальныйИдентификатор;
						КонецЕсли;
						Если ТекОбъект.ПометкаУдаления Тогда
							ТекОбъект.ПометкаУдаления = Ложь;
							Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
								ТекОбъект.Записать();
							КонецЕсли;
						Иначе
							УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Обновление наименования.
					ТекОбъект.Наименование = ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя;
					ТекОбъект.Имя = Имя;
				КонецЕсли;
				ДанныеОбъекта.ТипыВладельца = Новый Массив;
			ИначеЕсли ЧтениеXML.Имя = "Synonym" Тогда
				ТекОбъект.Синоним = ПрочитатьСиноним(ЧтениеXML);
			ИначеЕсли ЧтениеXML.Имя = "Comment" Тогда
				ТекОбъект.Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "Hierarchical" Тогда
				ТекОбъект.Иерархический = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "Correspondence" Тогда
				ДанныеОбъекта.Корреспонденция = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли  ЧтениеXML.Имя = "ChartOfAccounts" Тогда
				ДанныеОбъекта.ПланСчетов = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "InformationRegisterPeriodicity" Тогда
				ДанныеОбъекта.ПериодичностьРегистраСведений = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "WriteMode" Тогда
				ДанныеОбъекта.РежимЗаписиРегистраСведений = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "HierarchyType" Тогда
				ТипИерархииСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ТипИерархииСтрокой = "HierarchyFoldersAndItems" Тогда
					ТекОбъект.ВидИерархии = "ИерархияГруппИЭлементов";
				ИначеЕсли ТипИерархииСтрокой = "HierarchyOfItems" Тогда
					ТекОбъект.ВидИерархии = "ИерархияЭлементов";
				Иначе
					ТекОбъект.ВидИерархии = "ИерархияГрупп";
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "LimitLevelCount" Тогда
				ТекОбъект.ОграничиватьКоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "LevelCount" Тогда
				ТекОбъект.КоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Число"));
			ИначеЕсли ЧтениеXML.Имя = "CodeSeries" Тогда
				СерииКодовСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если СерииКодовСтрокой = "WithinOwnerSubordination" Тогда
					ТекОбъект.СерииКодов = "ВПределахПодчиненияВладельцу";
				ИначеЕсли СерииКодовСтрокой = "WholeCatalog" Тогда
					ТекОбъект.СерииКодов = "ВоВсемСправочнике";
				Иначе
					ТекОбъект.СерииКодов = "ВПределахПодчинения";
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "CheckUnique" Тогда
				ТекОбъект.КонтрольУникальности = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "Autonumbering" Тогда
				ТекОбъект.Автонумерация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "NumberPeriodicity" Тогда
				ПериодичностьСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ПериодичностьСтрокой = "Nonperiodical" Тогда
					ТекОбъект.Периодичность = "Непериодический";
				ИначеЕсли ПериодичностьСтрокой = "Year" Тогда
					ТекОбъект.Периодичность = "Год";
				ИначеЕсли ПериодичностьСтрокой = "Month" Тогда
					ТекОбъект.Периодичность = "Месяц";
				ИначеЕсли ПериодичностьСтрокой = "Quarter" Тогда
					ТекОбъект.Периодичность = "Квартал";
				ИначеЕсли ПериодичностьСтрокой = "Day" Тогда
					ТекОбъект.Периодичность = "День"; 
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "NumberLength" Тогда
				ДлинаНомера =  ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаНомера > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Номер", Новый Структура("КвалификаторыСтроки_Длина", ДлинаНомера));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "NumberAllowedLength" Тогда
				ДопустимаяДлинаНомера = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ДопустимаяДлинаНомера = "Fixed" И ДанныеОбъекта.ПредопределенныеСвойства.Свойство("Номер") Тогда
					КвалификаторНомера = ДанныеОбъекта.ПредопределенныеСвойства.Номер;
					КвалификаторНомера.Вставить("КвалификаторыСтроки_Фиксированная", Истина);
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Номер", КвалификаторНомера);
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "CodeLength" Тогда
				ДлинаКода = ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаКода > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Код", Новый Структура("КвалификаторыСтроки_Длина", ДлинаКода));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "DescriptionLength" Тогда
				ДлинаНаименования = ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаНаименования > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Наименование", Новый Структура("КвалификаторыСтроки_Длина", ДлинаНаименования));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "Task" Тогда
				ДанныеОбъекта.ИмяЗадачиБизнесПроцесса = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "ChartOfCalculationTypes" Тогда
				ДанныеОбъекта.ПланВидовРасчета = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "BasePeriod" Тогда
				ДанныеОбъекта.ЕстьБазовыйПериод = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "ActionPeriod" Или ЧтениеXML.Имя = "ActionPeriodUse" Тогда
				ДанныеОбъекта.ЕстьПериодДействия = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "Owners" Тогда
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
						И ЧтениеXML.Имя = "Owners" Тогда
						Прервать;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
						И ЧтениеXML.Имя = "xr:Item" Тогда
						// Есть владельцы.
						ТекОбъект.Подчиненный = Истина;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ТекОбъект.Подчиненный Тогда
						ИмяТипаВладельца = ЧтениеXML.Значение;
						ДанныеОбъекта.ТипыВладельца.Добавить(ИмяТипаВладельца);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЧтениеXML.Имя = "RegisterRecords" Тогда
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
						И ЧтениеXML.Имя = "RegisterRecords" Тогда
						Прервать;
					ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
						ИмяТипаРегистра = ЧтениеXML.Значение;
						ДанныеОбъекта.МассивРегистров.Добавить(ИмяТипаРегистра);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЧтениеXML.Имя = "RegisterType" Тогда
				// Тип регистра накопления
				ТипРегистра = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ТипРегистра = "Balance" Тогда
					ДанныеОбъекта.ТипРегистраНакопления = "Остатки";
				ИначеЕсли ТипРегистра = "Turnovers" Тогда
					ДанныеОбъекта.ТипРегистраНакопления = "Обороты";
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "Type" Тогда
				// Для плана видов характеристик.
				Квалификаторы = Новый Структура;
				ПростойТип = "";
				ПрочитатьТипы(ЧтениеXML, ДанныеОбъекта.ТипыЗначенийХарактеристик, ПростойТип, Квалификаторы);
			ИначеЕсли ЧтениеXML.Имя = "Posting" Тогда
				ЕстьПроведение = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ЕстьПроведение = "Deny" Тогда
					ДанныеОбъекта.ЗапрещеноПроведениеДокумента = Истина;
				КонецЕсли;
			Иначе
				ЧтениеXML.Прочитать();
			КонецЕсли;
		Иначе
			ЧтениеXML.Прочитать();
		КонецЕсли;
	КонецЦикла;
	Если ТекОбъект <> Неопределено
		И (НЕ ОбщиеПеременные.ТолькоДобавлятьНовые Или ДанныеОбъекта.ДобавленНовый) Тогда
		ТекОбъект.Записать();
	КонецЕсли;
	Возврат ТекОбъект;
КонецФункции

Функция ПрочитатьСведенияОбОбъектеИзEDT(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные)
	УникальныйИдентификатор = "";
	ЧтениеXML.Прочитать(); // mdclass
	УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid");
	ЧтениеXML.Прочитать(); // producedTypes
	ЧтениеXML.Пропустить();
	Имя = "";
	Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		// Попытка найти объект по УИДу
		ТекСсылка = Справочники.Объекты.НайтиПоРеквизиту("Идентификатор", УникальныйИдентификатор, ДанныеОбъекта.ТекущийРодитель, ОбщиеПеременные.Конфигурация);
		Если ЗначениеЗаполнено(ТекСсылка) Тогда
			ТекОбъект = ТекСсылка.ПолучитьОбъект();
			Если ТекОбъект.ПометкаУдаления Тогда
				ТекОбъект.ПометкаУдаления = Ложь;
				Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
					ТекОбъект.Записать();
				КонецЕсли;
			Иначе
				УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(ЧтениеXML.Имя) И НЕ (ЧтениеXML.Имя = "attributes" Или ЧтениеXML.Имя = "predefined"
		Или ЧтениеXML.Имя = "dimensions" Или ЧтениеXML.Имя = "resources"
		Или ЧтениеXML.Имя = "enumValues" Или ЧтениеXML.Имя = "tabularSections"
		Или ЧтениеXML.Имя = "content") Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "name" Тогда
				Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				// Не нашли объект по УИДу либо не задан УИД.
				Если ТекОбъект = Неопределено Тогда 
					ТекСсылка = Справочники.Объекты.НайтиПоНаименованию(ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя, Истина, ДанныеОбъекта.ТекущийРодитель, ОбщиеПеременные.Конфигурация);
					Если НЕ ЗначениеЗаполнено(ТекСсылка) ИЛИ (ЗначениеЗаполнено(УникальныйИдентификатор)
						И ЗначениеЗаполнено(ТекСсылка.Идентификатор)
						И ТекСсылка.Идентификатор <> УникальныйИдентификатор)
						И НЕ ОбщиеПеременные.ЭтоРасширение Тогда

						ТекОбъект = Справочники.Объекты.СоздатьЭлемент();
						ТекОбъект.Наименование = ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя;
						ТекОбъект.Идентификатор = УникальныйИдентификатор;
						ТекОбъект.Имя = Имя;
						ТекОбъект.Родитель = ДанныеОбъекта.ТекущийРодитель;
						ТекОбъект.Владелец = ОбщиеПеременные.Конфигурация;
						ТекОбъект.Тип = ДанныеОбъекта.ТипОбъекта;
						ДанныеОбъекта.ДобавленНовый = Истина;
					Иначе
						ТекОбъект = ТекСсылка.ПолучитьОбъект();
						Если ТекОбъект.ПометкаУдаления Тогда
							ТекОбъект.ПометкаУдаления = Ложь;
							Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
								ТекОбъект.Записать();
							КонецЕсли;
						Иначе
							УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Обновление наименования.
					ТекОбъект.Наименование = ДанныеОбъекта.ПрефиксИменЭлементов + "." + Имя;
					ТекОбъект.Имя = Имя;
				КонецЕсли;
				ДанныеОбъекта.ТипыВладельца = Новый Массив;
			ИначеЕсли ЧтениеXML.Имя = "synonym" Тогда
				ТекОбъект.Синоним = ПрочитатьСиноним(ЧтениеXML);
			ИначеЕсли ЧтениеXML.Имя = "explanation" Тогда
				ТекОбъект.Комментарий = ПрочитатьСиноним(ЧтениеXML);
			ИначеЕсли ЧтениеXML.Имя = "standardAttributes"
				Или ЧтениеXML.Имя = "standardTabularSections" Тогда
				ЧтениеXML.Пропустить();
			ИначеЕсли ЧтениеXML.Имя = "owners" Тогда
				ИмяТипаВладельца = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ЗначениеЗаполнено(ИмяТипаВладельца) Тогда
					ТекОбъект.Подчиненный = Истина;
					ДанныеОбъекта.ТипыВладельца.Добавить(ИмяТипаВладельца);
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "codeLength" Тогда
				ДлинаКода = ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаКода > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Код", Новый Структура("КвалификаторыСтроки_Длина", ДлинаКода));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "numberLength" Тогда
				ДлинаНомера = ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаНомера > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Номер", Новый Структура("КвалификаторыСтроки_Длина", ДлинаНомера));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "levelCount" Тогда
				ТекОбъект.КоличествоУровней = ПрочитатьXML(ЧтениеXML, Тип("Число"));
			ИначеЕсли ЧтениеXML.Имя = "descriptionLength" Тогда
				ДлинаНаименования = ПрочитатьXML(ЧтениеXML, Тип("Число"));
				Если ДлинаНаименования > 0 Тогда
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Наименование", Новый Структура("КвалификаторыСтроки_Длина", ДлинаНаименования));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "hierarchical" Тогда
				ТекОбъект.Иерархический = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "checkUnique" Тогда
				ТекОбъект.КонтрольУникальности = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "autonumbering" Тогда
				ТекОбъект.Автонумерация = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "numberAllowedLength" Тогда
				ДопустимаяДлинаНомера = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ДопустимаяДлинаНомера = "Fixed" И ДанныеОбъекта.ПредопределенныеСвойства.Свойство("Номер") Тогда
					КвалификаторНомера = ДанныеОбъекта.ПредопределенныеСвойства.Номер;
					КвалификаторНомера.Вставить("КвалификаторыСтроки_Фиксированная", Истина);
					ДанныеОбъекта.ПредопределенныеСвойства.Вставить("Номер", КвалификаторНомера);
				КонецЕсли;

			ИначеЕсли ЧтениеXML.Имя = "codeSeries" Тогда
				СерииКодовСтрокой = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если СерииКодовСтрокой = "WithinOwnerSubordination" Тогда
					ТекОбъект.СерииКодов = "ВПределахПодчиненияВладельцу";
				ИначеЕсли СерииКодовСтрокой = "WholeCatalog" Тогда
					ТекОбъект.СерииКодов = "ВоВсемСправочнике";
				Иначе
					ТекОбъект.СерииКодов = "ВПределахПодчинения";
				КонецЕсли; 
			ИначеЕсли ЧтениеXML.Имя = "correspondence" Тогда
				ДанныеОбъекта.Корреспонденция = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли  ЧтениеXML.Имя = "chartOfAccounts" Тогда
				ДанныеОбъекта.ПланСчетов = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "task" Тогда
				ДанныеОбъекта.ИмяЗадачиБизнесПроцесса = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "basePeriod" Тогда
				ДанныеОбъекта.ЕстьБазовыйПериод = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "actionPeriod" Или ЧтениеXML.Имя = "ActionPeriodUse" Тогда
				ДанныеОбъекта.ЕстьПериодДействия = ПрочитатьXML(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ЧтениеXML.Имя = "chartOfCalculationTypes" Тогда
				ДанныеОбъекта.ПланВидовРасчета = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "informationRegisterPeriodicity" Тогда
				ДанныеОбъекта.ПериодичностьРегистраСведений = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ЧтениеXML.Имя = "writeMode" Тогда
				ДанныеОбъекта.РежимЗаписиРегистраСведений = ПрочитатьXML(ЧтениеXML, Тип("Строка")); 
			ИначеЕсли НРег(ЧтениеXML.Имя) = "type" Тогда
				// Для плана видов характеристик.
				Квалификаторы = Новый Структура;
				ПростойТип = "";
				ПрочитатьТипы(ЧтениеXML, ДанныеОбъекта.ТипыЗначенийХарактеристик, ПростойТип, Квалификаторы);
			ИначеЕсли ЧтениеXML.Имя = "registerRecords" Тогда
				// Движения по регистрам
				ИмяТипаРегистра = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ДанныеОбъекта.МассивРегистров.Добавить(ИмяТипаРегистра);
			ИначеЕсли НРег(ЧтениеXML.Имя) = "registertype" Тогда
				// Тип регистра накопления
				ТипРегистра = НРег(ПрочитатьXML(ЧтениеXML, Тип("Строка")));
				Если ТипРегистра = "balance" Тогда
					ДанныеОбъекта.ТипРегистраНакопления = "Остатки";
				ИначеЕсли ТипРегистра = "turnovers" Тогда
					ДанныеОбъекта.ТипРегистраНакопления = "Обороты";
				КонецЕсли;

			ИначеЕсли ЧтениеXML.Имя = "posting" Тогда
				ЕстьПроведение = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				Если ЕстьПроведение = "Deny" Тогда
					ДанныеОбъекта.ЗапрещеноПроведениеДокумента = Истина;
				КонецЕсли; 
			Иначе
				ЧтениеXML.Пропустить(); 
			КонецЕсли;
		Иначе
			ЧтениеXML.Прочитать();
		КонецЕсли;
	КонецЦикла;
	Если НЕ ОбщиеПеременные.ТолькоДобавлятьНовые Или ДанныеОбъекта.ДобавленНовый Тогда
		ТекОбъект.Записать();
	КонецЕсли;
	Возврат ТекОбъект;
КонецФункции

Процедура ПрочитатьСведенияОСвойствахИзXML(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные)
	ТекОбъект = ДанныеОбъекта.ТекОбъект;
	ЧтениеXML.Прочитать();

	ТекСвойство = Неопределено;
	ТекГруппа = Неопределено;
	ТекТипыСвойства = Новый Массив;
	ТекущийРодительСвойства = Неопределено;
	ЭтоТЧ = Ложь;
	УИДСвойства = "";
	Если ЧтениеXML.Имя = "ChildObjects" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "TabularSection" Тогда
					ЭтоТЧ = Истина;
					ЧтениеXML.Прочитать(); // InternalInfo
					ЧтениеXML.Пропустить();
					ЧтениеXML.Прочитать(); // Properties
					ТекГруппа = Справочники.Свойства.СоздатьГруппу();
					ТекГруппа.Владелец = ТекОбъект.Ссылка;
					ТекГруппа.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть;
					УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
					Продолжить;
				ИначеЕсли ЧтениеXML.Имя = "Command" Тогда
					ЧтениеXML.Пропустить();
					Продолжить;
				ИначеЕсли ЧтениеXML.Имя = "Attribute"
					Или ЧтениеXML.Имя = "Dimension"
					Или ЧтениеXML.Имя = "Resource"
					Или (ЧтениеXML.Имя = "AccountingFlag" И ДанныеОбъекта.ТипОбъекта <> Перечисления.ТипыОбъектов.РегистрБухгалтерии) Тогда
					ТекСвойство = Справочники.Свойства.СоздатьЭлемент();
					ТекСвойство.Владелец = ТекОбъект.Ссылка;
					Если ЧтениеXML.Имя = "Attribute" Или ЧтениеXML.Имя = "AccountingFlag" Тогда
						ТекСвойство.Вид = Перечисления.ВидыСвойств.Реквизит;
						Если ТекущийРодительСвойства <> Неопределено Тогда
							ТекСвойство.Родитель = ТекущийРодительСвойства;
						КонецЕсли;
					ИначеЕсли ЧтениеXML.Имя = "Dimension" Тогда
						ТекСвойство.Вид = Перечисления.ВидыСвойств.Измерение;
						Баланс = Ложь;
					ИначеЕсли ЧтениеXML.Имя = "Resource" Тогда
						ТекСвойство.Вид = Перечисления.ВидыСвойств.Ресурс;
						Баланс = Ложь; 
					КонецЕсли;
					ТекТипыСвойства = Новый Массив;
					УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
				ИначеЕсли ЧтениеXML.Имя = "EnumValue" Тогда
					ЭтоТЧ = Ложь;
					ТекСвойство = Справочники.Значения.СоздатьЭлемент();
					ТекСвойство.Владелец = ТекОбъект.Ссылка;
					ТекСвойство.Предопределенное = Истина;
					УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
				ИначеЕсли ЧтениеXML.Имя = "Name" Тогда
					Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
						ЧтениеXML.Пропустить();
						Продолжить;
					КонецЕсли;
					Наименование = одЗначениеЭлемента(ЧтениеXML);
					Если ЭтоТЧ Тогда
						ТекГруппа.Наименование = Наименование;
						ТекГруппа.Идентификатор = УИДСвойства;
					Иначе
						ТекСвойство.Наименование = Наименование;
						ТекСвойство.Идентификатор = УИДСвойства;
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Synonym" Тогда
					Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
						ЧтениеXML.Пропустить();
						Продолжить;
					КонецЕсли;

					ТекСиноним = ПрочитатьСиноним(ЧтениеXML);
					Если ЭтоТЧ Тогда
						ТекГруппа.Синоним = ТекСиноним;
					Иначе
						ТекСвойство.Синоним = ТекСиноним;
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Comment" Тогда
					Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
						ЧтениеXML.Пропустить();
						Продолжить;
					КонецЕсли;
					Если ЭтоТЧ Тогда
						ТекГруппа.Комментарий = одЗначениеЭлемента(ЧтениеXML);
					Иначе
						ТекСвойство.Комментарий = одЗначениеЭлемента(ЧтениеXML);
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Type" Тогда
					Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
						ЧтениеXML.Пропустить();
						Продолжить;
					КонецЕсли; 
					Квалификаторы = Новый Структура;
					ПростойТип = "";
					ПрочитатьТипы(ЧтениеXML, ТекТипыСвойства, ПростойТип, Квалификаторы);
					Для Каждого Квалификатор Из Квалификаторы Цикл
						ТекСвойство[Квалификатор.Ключ] = Квалификатор.Значение;
					КонецЦикла;
					Если ПростойТип <> "" Тогда
						ЗаполнитьПростойТипСвойства(ОбщиеПеременные, ТекСвойство, ПростойТип, ТекТипыСвойства);
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Balance" Тогда
					// Регистр бухгалтерии, Балансовое или не балансовое измерение/ресурс.
					Баланс = одЗначениеЭлемента(ЧтениеXML, Тип("Булево"));
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если ЧтениеXML.Имя = "Attribute" Или ЧтениеXML.Имя = "Dimension"
					Или ЧтениеXML.Имя = "Resource" 
					Или (ЧтениеXML.Имя = "AccountingFlag" И ДанныеОбъекта.ТипОбъекта <> Перечисления.ТипыОбъектов.РегистрБухгалтерии) Тогда
					Если (ЧтениеXML.Имя <> "Attribute" И ЧтениеXML.Имя <> "AccountingFlag") 
						И ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрБухгалтерии
						И ДанныеОбъекта.Корреспонденция
						И НЕ Баланс Тогда
						// Измерения/ресурса два - Дт и Кт
						// УИД очищаем т.к. становится не информативно.
						ИсходноеИмя = ТекСвойство.Наименование;
						ТекСвойство.Идентификатор = "";
						ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь, ИсходноеИмя + "Дт");
						ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
						
						// Создаем второе свойство
						ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь, ИсходноеИмя + "Кт");
						ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
					Иначе
						ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь);
						ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Properties" И ЭтоТЧ Тогда
					ТекГруппаСсылка = ПереопределитьСвойствоИлиЗначение(ТекГруппа, ОбщиеПеременные, Истина);
					ЭтоТЧ = Ложь;
					ТекущийРодительСвойства = ТекГруппаСсылка;
				ИначеЕсли ЧтениеXML.Имя = "TabularSection" Тогда
					ТекущийРодитель = Неопределено;
					ЭтоТЧ = Ложь;
					ТекущийРодительСвойства = Неопределено;
					ТекГруппа = Ложь;
				ИначеЕсли ЧтениеXML.Имя = "EnumValue" Тогда
					ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	Если ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.Справочник
		Или ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовРасчета
		Или ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
		Или ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ПланСчетов Тогда
		// Предопределенные значения в отдельном файле.
		Если НЕ ДанныеОбъекта.Свойство("ПутьКПодчиненным") Тогда
			Возврат;
		КонецЕсли;
		ПутьКПредопределенным = ДанныеОбъекта.ПутьКПодчиненным + "\Ext\Predefined.xml"; 
		ФайлСПредопределенными = НайтиПомещенныеФайлыПоИмени(ОбщиеПеременные.ПомещенныеФайлы, ПутьКПредопределенным, ОбщиеПеременные);
		Если ФайлСПредопределенными = "" Тогда
			Возврат;
		КонецЕсли;

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлСПредопределенными);
		ИерархияЗначений = Новый Массив;

		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "Item" Тогда
					Если ТекСвойство <> Неопределено Тогда
						Если НЕ ЗначениеЗаполнено(ТекСвойство.Ссылка) Тогда
							ТекСвойство.Записать();
						КонецЕсли;
						ИерархияЗначений.Добавить(ТекСвойство.Ссылка);
					КонецЕсли;

					ТекСвойство = Справочники.Значения.СоздатьЭлемент();
					ТекСвойство.Владелец = ТекОбъект.Ссылка;
					ТекСвойство.Предопределенное = Истина;
					УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
					Если ИерархияЗначений.Количество() > 0 Тогда
						ТекСвойство.Родитель = ИерархияЗначений[ИерархияЗначений.Количество() - 1];
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Name" Тогда
					Наименование = одЗначениеЭлемента(ЧтениеXML);
					// Пробуем найти существующее значение.
					СвойствоСсылка = Неопределено;
					НайденоПоУИД = Истина;
					Если ЗначениеЗаполнено(УИДСвойства) Тогда
						СвойствоСсылка = Справочники.Значения.НайтиПоРеквизиту("Идентификатор", УИДСвойства,, ТекОбъект.Ссылка);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
						НайденоПоУИД = Ложь;
						СвойствоСсылка = Справочники.Значения.НайтиПоНаименованию(Наименование, Истина,, ТекОбъект.Ссылка);
					КонецЕсли;
					Если ЗначениеЗаполнено(СвойствоСсылка) 
						И (НайденоПоУИД Или НЕ ЗначениеЗаполнено(СвойствоСсылка.Идентификатор) Или ОбщиеПеременные.ЭтоРасширение) Тогда
						// Переопределяем переменную содержащую текущее значение.
						ТекущийРодитель = ТекСвойство.Родитель;
						ТекСвойство = СвойствоСсылка.ПолучитьОбъект();
						Если ТекСвойство.ПометкаУдаления Тогда
							ТекСвойство.ПометкаУдаления = Ложь;
						КонецЕсли;
						Если НЕ НайденоПоУИД Тогда
							ТекСвойство.Идентификатор = УИДСвойства;
						КонецЕсли;
						ТекСвойство.Наименование = Наименование; 
						ТекСвойство.Родитель = ТекущийРодитель;
						УдалитьОбъектИзСписка(СвойствоСсылка, ОбщиеПеременные.СуществующиеЗначения);
					Иначе	
						ТекСвойство.Наименование = Наименование;
						ТекСвойство.Идентификатор = УИДСвойства;
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "Description" Тогда
					ТекСвойство.Синоним = одЗначениеЭлемента(ЧтениеXML);
				ИначеЕсли ЧтениеXML.Имя = "ChildItems" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
				И ЧтениеXML.Имя = "Item" Тогда
				Если ТекСвойство = Неопределено Тогда
					Если  ИерархияЗначений.Количество() > 0 Тогда
						ИерархияЗначений.Удалить(ИерархияЗначений.Количество()-1);
					КонецЕсли;
				Иначе
					ТекСвойство.Записать();
					ТекСвойство = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена Тогда
		// Состав в отдельном файле.
		Если НЕ ДанныеОбъекта.Свойство("ПутьКПодчиненным") Тогда
			Возврат;
		КонецЕсли;

		ПутьКСоставу = ДанныеОбъекта.ПутьКПодчиненным + "\Ext\Content.xml"; 
		ФайлССоставом = НайтиПомещенныеФайлыПоИмени(ОбщиеПеременные.ПомещенныеФайлы, ПутьКСоставу, ОбщиеПеременные);
		Если ФайлССоставом = "" Тогда
			Возврат;
		КонецЕсли;
		ТЧСоставСсылка = Справочники.Свойства.НайтиПоНаименованию("{Состав}", Истина,, ТекОбъект.Ссылка);
		Если ЗначениеЗаполнено(ТЧСоставСсылка) Тогда
			Если ТЧСоставСсылка.ПометкаУдаления Тогда
				ТЧСоставОбъект = ТЧСоставСсылка.ПолучитьОбъект();
				ТЧСоставОбъект.ПометкаУдаления = Ложь;
				ТЧСоставОбъект.Записать();
			КонецЕсли;
			УдалитьОбъектИзСписка(ТЧСоставСсылка, ОбщиеПеременные.СуществующиеСвойства);
		Иначе
			ТЧСоставОбъект = Справочники.Свойства.СоздатьГруппу();
			ТЧСоставОбъект.Владелец = ТекОбъект.Ссылка;
			ТЧСоставОбъект.Наименование = "{Состав}";
			ТЧСоставОбъект.Синоним = "{Состав}";
			ТЧСоставОбъект.Вид = Перечисления.ВидыСвойств.СоставПланаОбмена;
			ТЧСоставОбъект.Записать();
			ТЧСоставСсылка = ТЧСоставОбъект.Ссылка;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлССоставом);
		ЧтениеXML.Прочитать(); // ExchangePlanContent
		СвойствоОбъект = Неопределено;
		Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
				И ЧтениеXML.Имя = "ExchangePlanContent") Цикл
			Если  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ЧтениеXML.Имя = "Metadata" Тогда
				ИмяОбъекта = одЗначениеЭлемента(ЧтениеXML); 
				РодительОбъекта = Неопределено;
				СвойствоОбъект = Неопределено;
				ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(ИмяОбъекта, РодительОбъекта, ОбщиеПеременные);
				Если ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
					ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительОбъекта,ОбщиеПеременные.Конфигурация);
					Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
						ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Имя, Синоним, Наименование");
						СвойствоОбъект = НайтиСоздатьСвойствоПоНаименованию(ДанныеОбъекта.Имя, ТекОбъект.Ссылка, ОбщиеПеременные, ТЧСоставСсылка);
						СвойствоОбъект.Вид = Перечисления.ВидыСвойств.ЭлементСоставаПланаОбмена;
						СвойствоОбъект.Наименование = ДанныеОбъекта.Имя;
						СвойствоОбъект.Синоним = ДанныеОбъекта.Синоним;
						СвойствоОбъект.ТипыСтрокой = ДанныеОбъекта.Наименование;
						СтрокаТип = СвойствоОбъект.Типы.Добавить();
						СтрокаТип.Тип = ОбъектСсылка;
						СвойствоОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ЧтениеXML.Имя = "AutoRecord" И СвойствоОбъект <> Неопределено Тогда
				АвторегистрацияСтрокой = одЗначениеЭлемента(ЧтениеXML);
				СвойствоОбъект.Авторегистрация = (АвторегистрацияСтрокой <> "Deny");
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
				И ЧтениеXML.Имя = "Item" И СвойствоОбъект <> Неопределено Тогда
				СвойствоОбъект.Записать();
				ЧтениеXML.Прочитать();
			Иначе
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЧтениеXML.Закрыть();

КонецПроцедуры

Процедура ПрочитатьСведенияОСвойствахИзEDT(ЧтениеXML, ДанныеОбъекта, ОбщиеПеременные)
	ТекОбъект = ДанныеОбъекта.ТекОбъект;

	ТекСвойство = Неопределено;
	ТекГруппа = Неопределено;
	ТекТипыСвойства = Новый Массив;
	ТекущийРодительСвойства = Неопределено;
	ИерархияЗначений = Новый Массив;
	ЭтоТЧ = Ложь;
	ЭтоЗначение = Ложь;
	УИДСвойства = "";
	ТЧСоставСсылка = Неопределено;
	Если НЕ ЗначениеЗаполнено(ЧтениеXML.Имя) Тогда
		ЧтениеXML.Пропустить();
	КонецЕсли;
	Пока ЧтениеXML.Имя <> "mdclass" И ЗначениеЗаполнено(ЧтениеXML.Имя) Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "tabularSections" Тогда
				ЭтоТЧ = Истина;
				УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
				ЧтениеXML.Прочитать(); // producedTypes
				ЧтениеXML.Пропустить();
				ЧтениеXML.Прочитать(); // name
				ТекГруппа = Справочники.Свойства.СоздатьГруппу();
				ТекГруппа.Владелец = ТекОбъект.Ссылка;
				ТекГруппа.Наименование = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ТекГруппа.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть;
				ТекГруппа.Идентификатор = УИДСвойства;
				ТекСвойство = Неопределено;
				ТекущийРодительСвойства = Неопределено;
				Продолжить;
			ИначеЕсли ЧтениеXML.Имя = "attributes"
				Или ЧтениеXML.Имя = "dimensions"
				Или ЧтениеXML.Имя = "resources" Тогда
				ТекСвойство = Справочники.Свойства.СоздатьЭлемент();
				ТекСвойство.Владелец = ТекОбъект.Ссылка;
				Если ЧтениеXML.Имя = "attributes" Тогда
					ТекСвойство.Вид = Перечисления.ВидыСвойств.Реквизит;
				ИначеЕсли ЧтениеXML.Имя = "dimensions" Тогда
					ТекСвойство.Вид = Перечисления.ВидыСвойств.Измерение;
					Баланс = Ложь;
				ИначеЕсли ЧтениеXML.Имя = "resources" Тогда
					ТекСвойство.Вид = Перечисления.ВидыСвойств.Ресурс;
					Баланс = Ложь; 
				КонецЕсли;
				ТекТипыСвойства = Новый Массив;
				УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
				ТекСвойство.Идентификатор = УИДСвойства;

				Если ЭтоТЧ Тогда
					Если ТекущийРодительСвойства = Неопределено Тогда
						ТекущийРодительСвойства = ПереопределитьСвойствоИлиЗначение(ТекГруппа, ОбщиеПеременные, Истина);
					КонецЕсли;
					ТекСвойство.Родитель = ТекущийРодительСвойства;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "predefined" Тогда
				// Начало узла с предопределенными.
				// Читаем дальше.
			ИначеЕсли ЧтениеXML.Имя = "items"
				Или ЧтениеXML.Имя = "enumValues"
				Или (ЧтениеXML.Имя = "content" И ЭтоЗначение = Истина)
				Или (ЧтениеXML.Имя = "childItems" И ЭтоЗначение = Истина) Тогда
				ЭтоЗначение = Истина;
				ЭтоТЧ = Ложь;
				УИДСвойства = одАтрибут(ЧтениеXML, "uuid");
				ТекРодитель = Неопределено;
				Если ТекСвойство <> Неопределено Тогда
					ТекРодитель = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные);
					ИерархияЗначений.Добавить(ТекРодитель);
				КонецЕсли;
				ТекСвойство = Справочники.Значения.СоздатьЭлемент();
				ТекСвойство.Владелец = ТекОбъект.Ссылка;
				ТекСвойство.Предопределенное = Истина;
				ТекСвойство.Идентификатор = УИДСвойства;
				Если ИерархияЗначений.Количество() > 0 Тогда
					ТекСвойство.Родитель = ИерархияЗначений[ИерархияЗначений.Количество() - 1];
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "name" Тогда
				Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
					ЧтениеXML.Пропустить();
					Продолжить;
				КонецЕсли;				
				Наименование = одЗначениеЭлемента(ЧтениеXML);
				Если ЭтоТЧ И ТекСвойство = Неопределено Тогда
					ТекГруппа.Наименование = Наименование;
				Иначе
					ТекСвойство.Наименование = Наименование;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "synonym" Тогда
				Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
					ЧтениеXML.Пропустить();
					Продолжить;
				КонецЕсли;
				ТекСиноним = ПрочитатьСиноним(ЧтениеXML);
				Если ЭтоТЧ И ТекСвойство = Неопределено Тогда
					ТекГруппа.Синоним = ТекСиноним;
				Иначе
					ТекСвойство.Синоним = ТекСиноним;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "toolTip" Тогда
				Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
					ЧтениеXML.Пропустить();
					Продолжить;
				КонецЕсли;
				ТекКомментарий = ПрочитатьСиноним(ЧтениеXML);
				Если ЭтоТЧ И ТекСвойство = Неопределено Тогда
					ТекГруппа.Комментарий = ТекКомментарий;
				Иначе
					ТекСвойство.Комментарий = ТекКомментарий;
				КонецЕсли;
			ИначеЕсли НРег(ЧтениеXML.Имя) = "type" Тогда
				Если ТекГруппа = Неопределено И ТекСвойство = Неопределено Тогда
					ЧтениеXML.Пропустить();
					Продолжить;
				КонецЕсли;
				Квалификаторы = Новый Структура;
				ПростойТип = "";
				ПрочитатьТипы(ЧтениеXML, ТекТипыСвойства, ПростойТип, Квалификаторы);
				Если ТипЗнч(ТекСвойство) = Тип("СправочникОбъект.Значения") Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Квалификатор Из Квалификаторы Цикл
					ТекСвойство[Квалификатор.Ключ] = Квалификатор.Значение;
				КонецЦикла;
				Если ПростойТип <> "" Тогда
					ЗаполнитьПростойТипСвойства(ОбщиеПеременные, ТекСвойство, ПростойТип, ТекТипыСвойства);
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "balance" Тогда
				// Регистр бухгалтерии, Балансовое или не балансовое измерение/ресурс.
				Баланс = одЗначениеЭлемента(ЧтениеXML, Тип("Булево"));
			ИначеЕсли ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена И ЧтениеXML.Имя = "content" Тогда
				// Состав плана обмена.
				Если ТЧСоставСсылка = Неопределено Тогда
					ТЧСоставСсылка = Справочники.Свойства.НайтиПоНаименованию("{Состав}", Истина,, ТекОбъект.Ссылка);
					Если ЗначениеЗаполнено(ТЧСоставСсылка) Тогда
						Если ТЧСоставСсылка.ПометкаУдаления Тогда
							ТЧСоставОбъект = ТЧСоставСсылка.ПолучитьОбъект();
							ТЧСоставОбъект.ПометкаУдаления = Ложь;
							ТЧСоставОбъект.Записать();
						КонецЕсли;
						УдалитьОбъектИзСписка(ТЧСоставСсылка, ОбщиеПеременные.СуществующиеСвойства);
					Иначе
						ТЧСоставОбъект = Справочники.Свойства.СоздатьГруппу();
						ТЧСоставОбъект.Владелец = ТекОбъект.Ссылка;
						ТЧСоставОбъект.Наименование = "{Состав}";
						ТЧСоставОбъект.Синоним = "{Состав}";
						ТЧСоставОбъект.Вид = Перечисления.ВидыСвойств.СоставПланаОбмена;
						ТЧСоставОбъект.Записать();
						ТЧСоставСсылка = ТЧСоставОбъект.Ссылка;
					КонецЕсли; 
				КонецЕсли;
				ЧтениеXML.Прочитать(); // mdObject
				ИмяОбъектаМД = одЗначениеЭлемента(ЧтениеXML);
				РодительПО = Неопределено;
				СвойствоПО = Неопределено;
				ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(ИмяОбъектаМД, РодительПО, ОбщиеПеременные);
				Если ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
					ОбъектПОСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительПО,ОбщиеПеременные.Конфигурация);
					Если ЗначениеЗаполнено(ОбъектПОСсылка) Тогда
						ДанныеТекОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПОСсылка, "Имя, Синоним, Наименование");
					Иначе
						ДанныеТекОбъекта = Новый Структура("Имя, Синоним, Наименование");
						ДанныеТекОбъекта.Наименование = ПолноеИмяОбъекта;
						ПозТочки = СтрНайти(ПолноеИмяОбъекта, ".");
						Если ПозТочки > 0 Тогда
							ДанныеТекОбъекта.Синоним = Сред(ПолноеИмяОбъекта, ПозТочки + 1);
						Иначе
							ДанныеТекОбъекта.Синоним = ПолноеИмяОбъекта;
						КонецЕсли;
						ДанныеТекОбъекта.Имя = ДанныеТекОбъекта.Синоним;
					КонецЕсли;
					СвойствоПО = НайтиСоздатьСвойствоПоНаименованию(ДанныеТекОбъекта.Имя, ТекОбъект.Ссылка, ОбщиеПеременные, ТЧСоставСсылка);
					СвойствоПО.Вид = Перечисления.ВидыСвойств.ЭлементСоставаПланаОбмена;
					СвойствоПО.Наименование = ДанныеТекОбъекта.Имя;
					СвойствоПО.Синоним = ДанныеТекОбъекта.Синоним;
					СвойствоПО.ТипыСтрокой = ДанныеТекОбъекта.Наименование;
					СтрокаТип = СвойствоПО.Типы.Добавить();
					СтрокаТип.Тип = ОбъектПОСсылка;
					СвойствоПО.Записать();
				КонецЕсли;
			Иначе
				ЧтениеXML.Пропустить(); 
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "attributes" Или ЧтениеXML.Имя = "dimensions"
				Или ЧтениеXML.Имя = "resources" Тогда
				Если ЧтениеXML.Имя <> "attributes"  
					И ДанныеОбъекта.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрБухгалтерии
					И ДанныеОбъекта.Корреспонденция
					И НЕ Баланс Тогда
					// Измерения/ресурса два - Дт и Кт
					// УИД очищаем т.к. становится не информативно.
					ИсходноеИмя = ТекСвойство.Наименование;
					ТекСвойство.Идентификатор = "";
					ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь, ИсходноеИмя + "Дт");
					ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
					
					// Создаем второе свойство
					ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь, ИсходноеИмя + "Кт");
					ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
				Иначе
					ТекСвойствоСсылка = ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные, Ложь);
					ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства);
					ТекСвойство = Неопределено;
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "tabularSections" Тогда
				ЭтоТЧ = Ложь;
				ТекущийРодительСвойства = Неопределено;
			
			ИначеЕсли ЧтениеXML.Имя = "items" Или ЧтениеXML.Имя = "enumValues"
				Или ((ЧтениеXML.Имя = "content" Или ЧтениеXML.Имя = "childItems") И ЭтоЗначение) Тогда
				Если ТекСвойство = Неопределено Тогда
					Если ИерархияЗначений.Количество() > 0 Тогда
						ИерархияЗначений.Удалить(ИерархияЗначений.Количество() - 1);
					КонецЕсли;
				Иначе
					ПереопределитьСвойствоИлиЗначение(ТекСвойство, ОбщиеПеременные);
					ТекСвойство = Неопределено;
				КонецЕсли;
				Если (ЧтениеXML.Имя = "items" Или ЧтениеXML.Имя = "enumValues") Тогда
					ЭтоЗначение = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЧтениеXML.Прочитать();
	КонецЦикла;
	ЧтениеXML.Закрыть();
КонецПроцедуры

Функция ПереопределитьСвойствоИлиЗначение(ЭталонныйОбъект, ОбщиеПеременные, ЭтоТЧ = Ложь, Знач Наименование = "")
	// Пробуем найти существующую группу или свойство.
	СвойствоСсылка = Неопределено;
	НайденоПоУИД = Истина;
	ЭтоЗначение = Ложь;
	Если ТипЗнч(ЭталонныйОбъект) = Тип("СправочникОбъект.Значения") Тогда
		МенеджерОбъекта = Справочники.Значения;
		ЭтоЗначение = Истина;
		ТекущийРодитель = Неопределено;
	Иначе
		МенеджерОбъекта = Справочники.Свойства;
		ТекущийРодитель = ЭталонныйОбъект.Родитель;
	КонецЕсли;
	УИД = ЭталонныйОбъект.Идентификатор;
	Если ЗначениеЗаполнено(УИД) Тогда
		Если ТекущийРодитель = Неопределено Тогда
			СвойствоСсылка = МенеджерОбъекта.НайтиПоРеквизиту("Идентификатор", УИД,, ЭталонныйОбъект.Владелец);
		Иначе
			СвойствоСсылка = МенеджерОбъекта.НайтиПоРеквизиту("Идентификатор", УИД,ТекущийРодитель, ЭталонныйОбъект.Владелец);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
		НайденоПоУИД = Ложь;
		НаименованиеДляПоиска = Наименование;
		Если НаименованиеДляПоиска = "" Тогда
			НаименованиеДляПоиска = ЭталонныйОбъект.Наименование;
		КонецЕсли;
		Если ТекущийРодитель = Неопределено Тогда
			СвойствоСсылка = МенеджерОбъекта.НайтиПоНаименованию(НаименованиеДляПоиска, Истина,, ЭталонныйОбъект.Владелец);
		Иначе
			СвойствоСсылка = МенеджерОбъекта.НайтиПоНаименованию(НаименованиеДляПоиска, Истина,ТекущийРодитель, ЭталонныйОбъект.Владелец);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СвойствоСсылка) 
		И (ЭтоЗначение Или СвойствоСсылка.ЭтоГруппа = ЭтоТЧ)
		И (НайденоПоУИД Или НЕ ЗначениеЗаполнено(СвойствоСсылка.Идентификатор) Или ОбщиеПеременные.ЭтоРасширение) Тогда
		Записывать = Ложь;
		// Переопределяем переменную содержащую текущую группу или свойство.
		Если ЭтоТЧ Тогда
			ТекГруппа = СвойствоСсылка.ПолучитьОбъект();
			Если ТекГруппа.ПометкаУдаления Тогда
				ТекГруппа.ПометкаУдаления = Ложь;
				Записывать = Истина;
			КонецЕсли;
			Если НЕ НайденоПоУИД Тогда
				ТекГруппа.Идентификатор = УИД;
				Записывать = Истина;
			КонецЕсли;
			Если НЕ ОбщиеПеременные.ТолькоДобавлятьНовые  Тогда
				Если ЗначениеЗаполнено(Наименование) Тогда
					ТекГруппа.Наименование = Наименование;
				Иначе
					ТекГруппа.Наименование = ЭталонныйОбъект.Наименование;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТекГруппа, ЭталонныйОбъект, "Синоним, Комментарий, Вид");
				Записывать = Истина;
			КонецЕсли;
			Если Записывать Тогда
				ТекГруппа.Записать();
			КонецЕсли;
		Иначе
			ТекСвойство = СвойствоСсылка.ПолучитьОбъект();
			Если ТекСвойство.ПометкаУдаления Тогда
				ТекСвойство.ПометкаУдаления = Ложь;
				Записывать = Истина;
			КонецЕсли;
			Если НЕ НайденоПоУИД И ЗначениеЗаполнено(УИД) Тогда
				ТекСвойство.Идентификатор = УИД;
				Записывать = Истина;
			КонецЕсли;
			Если НЕ ОбщиеПеременные.ТолькоДобавлятьНовые  Тогда
				Записывать = Истина;
				Если ЗначениеЗаполнено(Наименование) Тогда   					
					ТекСвойство.Наименование = Наименование;
				ИначеЕсли НайденоПоУИД Тогда
					ТекСвойство.Наименование = ЭталонныйОбъект.Наименование;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТекСвойство, ЭталонныйОбъект,,"Наименование, Идентификатор, Код, Владелец");
				ТекСвойство.Типы.Загрузить(ЭталонныйОбъект.Типы.Выгрузить());
			КонецЕсли;
			Если Записывать Тогда
				ТекСвойство.Записать();
			КонецЕсли;
		КонецЕсли;
		Если ЭтоЗначение Тогда
			УдалитьОбъектИзСписка(СвойствоСсылка, ОбщиеПеременные.СуществующиеЗначения);
		Иначе
			УдалитьОбъектИзСписка(СвойствоСсылка, ОбщиеПеременные.СуществующиеСвойства);
		КонецЕсли;
		Возврат СвойствоСсылка;
	Иначе
		Если ЗначениеЗаполнено(Наименование) Тогда
			ЭталонныйОбъект.Наименование = Наименование;
		КонецЕсли;
		ЭталонныйОбъект.Записать();
		Возврат ЭталонныйОбъект.Ссылка;
	КонецЕсли;

КонецФункции

Процедура ЗагрузитьПодпискуНаСобытие(ОбщиеПеременные, ТекущийРодитель, ВложенныйФайл, ПрефиксИменЭлементов, ТипОбъекта)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВложенныйФайл.ТекущееИмяФайла);
	УникальныйИдентификатор = "";
	Имя = "";
	ТекОбъект = Неопределено;
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ЧтениеXML.Прочитать(); // MetaDataObject
		ЧтениеXML.Прочитать(); // Объект - подписка на событие
		УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid");
		ЧтениеXML.Прочитать(); // Properties
	Иначе
		ЧтениеXML.Прочитать(); // mdclass
		УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid"); 
	КонецЕсли;
	Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		// Попытка найти объект по УИДу
		ТекСсылка = Справочники.Объекты.НайтиПоРеквизиту("Идентификатор", УникальныйИдентификатор, ТекущийРодитель, ОбщиеПеременные.Конфигурация);
		Если ЗначениеЗаполнено(ТекСсылка) Тогда
			ТекОбъект = ТекСсылка.ПолучитьОбъект();
			Если ТекОбъект.ПометкаУдаления Тогда
				ТекОбъект.ПометкаУдаления = Ложь;
				Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
					ТекОбъект.Записать();
				КонецЕсли;
			Иначе
				УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
			КонецЕсли;
			Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ОбщиеПеременные.ИсточникДанных = 1 Тогда
		ЧтениеXML.Прочитать(); 
	КонецЕсли;
	Пока НЕ ((ЧтениеXML.Имя = "Properties" ИЛИ ЧтениеXML.Имя = "mdclass") И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента)
		И ЗначениеЗаполнено(ЧтениеXML.Имя) Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекИмяУзла = НРег(ЧтениеXML.Имя);
			Если ТекИмяУзла = "name" Тогда
				Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				// Не нашли объект по УИДу либо не задан УИД.
				Если ТекОбъект = Неопределено Тогда
					ТекСсылка = Справочники.Объекты.НайтиПоНаименованию(ПрефиксИменЭлементов + "." + Имя, Истина, ТекущийРодитель, ОбщиеПеременные.Конфигурация);
					Если НЕ ЗначениеЗаполнено(ТекСсылка)
						ИЛИ (ЗначениеЗаполнено(УникальныйИдентификатор)
						И ЗначениеЗаполнено(ТекСсылка.Идентификатор)
						И ТекСсылка.Идентификатор <> УникальныйИдентификатор
						И НЕ ОбщиеПеременные.ЭтоРасширение) Тогда
						ТекОбъект = Справочники.Объекты.СоздатьЭлемент();
						ТекОбъект.Наименование = ПрефиксИменЭлементов + "." + Имя;
						ТекОбъект.Идентификатор = УникальныйИдентификатор;
						ТекОбъект.Имя = Имя;
						ТекОбъект.Родитель = ТекущийРодитель;
						ТекОбъект.Владелец = ОбщиеПеременные.Конфигурация;
						ТекОбъект.Тип = ТипОбъекта;
					Иначе
						ТекОбъект = ТекСсылка.ПолучитьОбъект();
						ТекОбъект.Идентификатор = УникальныйИдентификатор;
						Если ТекОбъект.ПометкаУдаления Тогда
							ТекОбъект.ПометкаУдаления = Ложь;
							Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
								ТекОбъект.Записать();
							КонецЕсли;
						Иначе
							УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеОбъекты);
						КонецЕсли;
						Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
							ЧтениеXML.Закрыть();
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекИмяУзла = "synonym" Тогда
				ТекОбъект.Синоним = ПрочитатьСиноним(ЧтениеXML);
			ИначеЕсли ТекИмяУзла = "comment" Тогда
				ТекОбъект.Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
			ИначеЕсли ТекИмяУзла = "source" Тогда
				ТекОбъект.Записать();
				// Источник подписки на события будет загружаться в свойства - объект должен быть записан.
				Квалификаторы = Новый Структура;
				ПростойТип = "";
				ИсточникиПодписки = Новый Массив;
				ПрочитатьТипы(ЧтениеXML, ИсточникиПодписки, ПростойТип, Квалификаторы);
				Для Каждого Источник Из ИсточникиПодписки Цикл
					РодительОбъекта = Неопределено;
					ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(Источник, РодительОбъекта, ОбщиеПеременные);
					Если НЕ ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
						// Возможно это константа. Добавим набор констант (один) вместо отдельных значений констант.
						Если СтрНайти(Источник, "ConstantValueManager") > 0 Тогда
							СвойствоОбъект = НайтиСоздатьСвойствоПоНаименованию("КонстантыНабор", ТекОбъект.Ссылка, ОбщиеПеременные);
							ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию("КонстантыНабор", Истина, ,ОбщиеПеременные.Конфигурация);
							СвойствоОбъект.Вид = Перечисления.ВидыСвойств.ИсточникПодпискиНаСобытие;
							СвойствоОбъект.Наименование = "КонстантыНабор";
							СвойствоОбъект.Синоним = "Набор констант";
							СвойствоОбъект.ТипыСтрокой = "КонстантыНабор";
							СтрокаТип = СвойствоОбъект.Типы.Добавить();
							СтрокаТип.Тип = ОбъектСсылка;
							СвойствоОбъект.Записать();						
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительОбъекта,ОбщиеПеременные.Конфигурация);
					Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеТекОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Наименование, Имя, Синоним");
					СвойствоОбъект = НайтиСоздатьСвойствоПоНаименованию(ДанныеТекОбъекта.Имя, ТекОбъект.Ссылка, ОбщиеПеременные);
					СвойствоОбъект.Вид = Перечисления.ВидыСвойств.ИсточникПодпискиНаСобытие;
					СвойствоОбъект.Наименование = ДанныеТекОбъекта.Имя;
					СвойствоОбъект.Синоним = ДанныеТекОбъекта.Синоним;
					СвойствоОбъект.ТипыСтрокой = ДанныеТекОбъекта.Наименование;
					СтрокаТип = СвойствоОбъект.Типы.Добавить();
					СтрокаТип.Тип = ОбъектСсылка;
					СвойствоОбъект.Записать();
				КонецЦикла;
				ЧтениеXML.Прочитать();
				
			Иначе
				ЧтениеXML.Пропустить();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЧтениеXML.Прочитать();
	КонецЦикла;
	ЧтениеXML.Закрыть();
КонецПроцедуры

Процедура ПрочитатьТипы(ЧтениеXML, ТекТипыСвойства, ПростойТипСтрокой, Квалификаторы)
	ЕстьТипыПростые = Ложь;
	ЕстьТипыСсылочные = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл
		ТекИмяУзла = НРег(ЧтениеXML.Имя);

		Если ТекИмяУзла = "type"
			Или ТекИмяУзла = "source" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ТекИмяУзла = "v8:type" Или ТекИмяУзла = "types" Тогда
				ЗначениеТипа = одЗначениеЭлемента(ЧтениеXML);
				ЗначениеТипаПриведенное = НРег(ЗначениеТипа);
				Если СтрНайти(ЗначениеТипаПриведенное, "string") > 0 Тогда
					ТекТипыСвойства.Добавить("Строка");
					ЕстьТипыПростые = Истина;
				ИначеЕсли СтрНайти(ЗначениеТипаПриведенное, "boolean") > 0 Тогда
					ТекТипыСвойства.Добавить("Булево");
					ЕстьТипыПростые = Истина;
				ИначеЕсли СтрНайти(ЗначениеТипаПриведенное, "datetime") > 0
					Или СтрНайти(ЗначениеТипаПриведенное, "date") > 0 Тогда
					ТекТипыСвойства.Добавить("Дата");
					ЕстьТипыПростые = Истина;
				ИначеЕсли СтрНайти(ЗначениеТипаПриведенное, "decimal") > 0
					Или СтрНайти(ЗначениеТипаПриведенное, "number") > 0
					Или СтрНайти(ЗначениеТипаПриведенное, "integer") > 0
					Или СтрНайти(ЗначениеТипаПриведенное, "double") > 0 Тогда
					ТекТипыСвойства.Добавить("Число");
					ЕстьТипыПростые = Истина;
				ИначеЕсли СтрНайти(ЗначениеТипаПриведенное, "valuestorage") > 0 Тогда
					ТекТипыСвойства.Добавить("ХранилищеЗначения");
					ЕстьТипыПростые = Истина;
				ИначеЕсли СтрНайти(ЗначениеТипаПриведенное, "uuid") > 0 Тогда
					ТекТипыСвойства.Добавить("УникальныйИдентификатор");
					ЕстьТипыПростые = Истина;
				Иначе
					ЕстьТипыСсылочные = Истина;
					ТекТипыСвойства.Добавить(ЗначениеТипа);
				КонецЕсли;
			ИначеЕсли СтрНайти(НРег(ТекИмяУзла), "stringqualifiers")>0 Тогда
				 ЧтениеXML.Прочитать();
				 Если СтрНайти(НРег(ЧтениеXML.Имя), "length")>0 Тогда
				 	Квалификаторы.Вставить("КвалификаторыСтроки_Длина", одЗначениеЭлемента(ЧтениеXML, Тип("Число")));
				КонецЕсли;
			ИначеЕсли СтрНайти(ТекИмяУзла, "numberqualifiers")>0 Тогда
				Если ТекТипыСвойства.Найти("Число") = Неопределено Тогда
					ТекТипыСвойства.Добавить("Число");
					ЕстьТипыПростые = Истина;
				КонецЕсли;
				Пока ЧтениеXML.Прочитать() Цикл
					ТекИмяПодчиненногоУзла = НРег(ЧтениеXML.Имя);
					Если СтрНайти(ТекИмяПодчиненногоУзла, "numberqualifiers") > 0 Тогда
						Прервать;
					ИначеЕсли СтрНайти(ТекИмяПодчиненногоУзла, "fractiondigits")>0 Тогда
						Квалификаторы.Вставить("КвалификаторыЧисла_Точность", одЗначениеЭлемента(ЧтениеXML, Тип("Число")));
					ИначеЕсли СтрНайти(ТекИмяПодчиненногоУзла, "digits")>0 Тогда
						Квалификаторы.Вставить("КвалификаторыЧисла_Длина", одЗначениеЭлемента(ЧтениеXML, Тип("Число")));
					ИначеЕсли СтрНайти(ТекИмяПодчиненногоУзла, "allowedsign")>0 Тогда
						СтроковоеЗначение = НРег(одЗначениеЭлемента(ЧтениеXML));
						Квалификаторы.Вставить("КвалификаторыЧисла_Неотрицательное", ?(СтроковоеЗначение = "nonnegative", Истина, Ложь));
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрНайти(ТекИмяУзла, "datequalifiers")>0 Тогда
				ЧтениеXML.Прочитать();
				Если СтрНайти(НРег(ЧтениеXML.Имя), "datequalifiers") > 0 Тогда
					Прервать;
				ИначеЕсли СтрНайти(НРег(ЧтениеXML.Имя), "datefractions")>0 Тогда
					СтроковоеЗначение = НРег(одЗначениеЭлемента(ЧтениеXML));
					Если СтроковоеЗначение = "date" Тогда
						Квалификатор = "Дата";
					ИначеЕсли СтроковоеЗначение = "time" Тогда
						Квалификатор = "Время";
					Иначе
						Квалификатор = "Дата и время";
					КонецЕсли;
					Квалификаторы.Вставить("КвалификаторыДаты_Состав", Квалификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьТипыСсылочные = Ложь И ЕстьТипыПростые Тогда
		Если Квалификаторы.Количество() > 0 Тогда
			ПростойТипСтрокой = ТипСтрокойПоКвалификаторам(Квалификаторы);
		ИначеЕсли ТекТипыСвойства.Количество() > 0 Тогда
			ПростойТипСтрокой = ТекТипыСвойства[0];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьОбъектыПростыеТипы(ОбщиеПеременные)
	ПростыеТипы = Новый Структура;
	ПростыеТипы.Вставить("Булево");
	ПростыеТипы.Вставить("Число");
	ПростыеТипы.Вставить("Строка");
	ПростыеТипы.Вставить("Дата");
	ПростыеТипы.Вставить("ХранилищеЗначения");
	ПростыеТипы.Вставить("УникальныйИдентификатор");
	//+КД3
	Если ОбщиеПеременные.КД3_КоличествоПотоков > 1 Тогда
		КД3_ПолучитьСуществующиеСсылки(ОбщиеПеременные, ПростыеТипы);
	КонецЕсли;
	//+КД3
	Для Каждого ТекТип Из ПростыеТипы Цикл
		Если ЗначениеЗаполнено(ТекТип.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СсылкаТип = Справочники.Объекты.НайтиПоНаименованию(ТекТип.Ключ, Истина,,ОбщиеПеременные.Конфигурация);
		Если ЗначениеЗаполнено(СсылкаТип) Тогда
			ПростыеТипы.Вставить(ТекТип.Ключ, СсылкаТип);
			УдалитьОбъектИзСписка(СсылкаТип, ОбщиеПеременные.СуществующиеОбъекты);
			Продолжить;
		КонецЕсли;
		ОбъектТип = Справочники.Объекты.СоздатьЭлемент();
		ОбъектТип.Владелец = ОбщиеПеременные.Конфигурация;
		ОбъектТип.Наименование = ТекТип.Ключ;
		ОбъектТип.Имя = ТекТип.Ключ;
		ОбъектТип.Синоним = ТекТип.Ключ;
		ОбъектТип.Тип = Перечисления.ТипыОбъектов[ТекТип.Ключ];
		ОбъектТип.Записать();
		ПростыеТипы.Вставить(ТекТип.Ключ, ОбъектТип.Ссылка);
	КонецЦикла;
	ОбщиеПеременные.Вставить("ПростыеТипы", ПростыеТипы);
КонецПроцедуры

Процедура ДобавитьПредопределенноеСвойство(ИмяСвойства, ОбъектСсылка, ВидСвойства, ОбщиеПеременные, ТипСвойства = Неопределено, Квалификаторы = Неопределено, РодительСвойства = Неопределено)
	СвойствоОбъект = НайтиСоздатьСвойствоПоНаименованию(ИмяСвойства, ОбъектСсылка, ОбщиеПеременные, РодительСвойства);
	Если НЕ ОбщиеПеременные.СоздаватьПредопределенныеСвойства Тогда
		Возврат;
	КонецЕсли;
	СвойствоОбъект.Вид = ВидСвойства; 
	СвойствоЗаписано = Ложь;
	Если Квалификаторы <> Неопределено Тогда
		Для Каждого Квалификатор Из Квалификаторы Цикл
			СвойствоОбъект[Квалификатор.Ключ] = Квалификатор.Значение;
		КонецЦикла;
		СвойствоОбъект.ТипыСтрокой = ТипСтрокойПоКвалификаторам(Квалификаторы, СвойствоОбъект.Типы, ОбщиеПеременные);
	ИначеЕсли ТипСвойства <> Неопределено Тогда
		Если ТипЗнч(ТипСвойства) = Тип("Массив") Тогда
			// Если в массиве ссылки на объекты можно сразу заполнить.
			Если ТипЗнч(ТипСвойства[0]) = Тип("СправочникСсылка.Объекты") Тогда
				ТипыСтрокой = "";
				Для СчТипов = 0 По ТипСвойства.Количество() - 1 Цикл
					Если ОбщиеПеременные.ЭтоРасширение Тогда
						ЕстьСтрока = СвойствоОбъект.Типы.Найти(ТипСвойства[СчТипов], "Тип");
						Если ЕстьСтрока <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					ТекТип = СвойствоОбъект.Типы.Добавить();
					ТекТип.Тип = ТипСвойства[СчТипов];
					ТипыСтрокой = ТипыСтрокой + СокрЛП(ТипСвойства[СчТипов]) + ","
				КонецЦикла;
				СвойствоОбъект.ТипыСтрокой = Лев(ТипыСтрокой, СтрДлина(ТипыСтрокой) - 1);
			Иначе
				СвойствоОбъект.Записать();
				ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, СвойствоОбъект.Ссылка, ТипСвойства);
				СвойствоЗаписано = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипСвойства) = Тип("СправочникСсылка.Объекты") Тогда
			ДобавлятьТип = Истина;
			Если ОбщиеПеременные.ЭтоРасширение Тогда
				ЕстьСтрока = СвойствоОбъект.Типы.Найти(ТипСвойства, "Тип");
				Если ЕстьСтрока <> Неопределено Тогда
					ДобавлятьТип = Ложь; 
				КонецЕсли;
			КонецЕсли;
			Если ДобавлятьТип Тогда
				ТекТип = СвойствоОбъект.Типы.Добавить();
				ТекТип.Тип = ТипСвойства;
				СвойствоОбъект.ТипыСтрокой = ТипСвойства.Наименование;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипСвойства) = Тип("Строка") Тогда
			ПозТочки = СтрНайти(ТипСвойства,".");
			ПростойТип = (ПозТочки = 0);
			Если ПростойТип И ОбщиеПеременные.ПростыеТипы.Свойство(ТипСвойства) Тогда
				ДобавлятьТип = Истина;
				Если ОбщиеПеременные.ЭтоРасширение Тогда
					ЕстьСтрока = СвойствоОбъект.Типы.Найти(ТипСвойства, "Тип");
					Если ЕстьСтрока <> Неопределено Тогда
						ДобавлятьТип = Ложь; 
					КонецЕсли;
				КонецЕсли;
				Если ДобавлятьТип Тогда
					ТекТип = СвойствоОбъект.Типы.Добавить();
					ТекТип.Тип = ОбщиеПеременные.ПростыеТипы[ТипСвойства];
					СвойствоОбъект.ТипыСтрокой = ТипСвойства;
				КонецЕсли;
			Иначе
				СвойствоЗаписано = Истина;
				СвойствоОбъект.Записать();
				ТекТипыСвойства = Новый Массив;
				ТекТипыСвойства.Добавить(ТипСвойства);
				ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, СвойствоОбъект.Ссылка, ТекТипыСвойства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СвойствоЗаписано Тогда
		СвойствоОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьТабличныеЧастиВПланВидовРасчета(ОбъектСсылка, ОбщиеПеременные, СоставТипа, ЕстьПериодДействияБазовый)
	Если ЕстьПериодДействияБазовый Тогда
		РодительСсылка = НайтиСоздатьГруппуСвойств("ВытесняющиеВидыРасчета", ОбъектСсылка, ОбщиеПеременные);
		ДобавитьПредопределенноеСвойство("ВидРасчета", ОбъектСсылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, СоставТипа, , РодительСсылка);
	КонецЕсли;
	РодительСсылка = НайтиСоздатьГруппуСвойств("ВедущиеВидыРасчета", ОбъектСсылка, ОбщиеПеременные);
	ДобавитьПредопределенноеСвойство("ВидРасчета", ОбъектСсылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, СоставТипа, , РодительСсылка);
	
	РодительСсылка = НайтиСоздатьГруппуСвойств("БазовыеВидыРасчета", ОбъектСсылка, ОбщиеПеременные);
	ДобавитьПредопределенноеСвойство("ВидРасчета", ОбъектСсылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные, СоставТипа, , РодительСсылка);
КонецПроцедуры

Функция НайтиСоздатьГруппуСвойств(ИмяГруппы, ОбъектСсылка, ОбщиеПеременные)
	РодительСсылка = Справочники.Свойства.НайтиПоНаименованию(ИмяГруппы, Истина, , ОбъектСсылка);
	Если ЗначениеЗаполнено(РодительСсылка) И РодительСсылка.ЭтоГруппа Тогда
		СвойствоОбъект = РодительСсылка.ПолучитьОбъект();
		Если РодительСсылка.ПометкаУдаления Тогда
			СвойствоОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
	Иначе
		СвойствоОбъект = Справочники.Свойства.СоздатьГруппу();
		СвойствоОбъект.Наименование = ИмяГруппы;
		СвойствоОбъект.Владелец = ОбъектСсылка;
		СвойствоОбъект.Синоним = ИмяГруппы;
		СвойствоОбъект.Вид = Перечисления.ВидыСвойств.ТабличнаяЧасть;
	КонецЕсли;
	СвойствоОбъект.Записать();
	УдалитьОбъектИзСписка(СвойствоОбъект.Ссылка, ОбщиеПеременные.СуществующиеСвойства);
	Возврат СвойствоОбъект.Ссылка;
КонецФункции

Функция НайтиСоздатьСвойствоПоНаименованию(ИмяСвойства, ОбъектСсылка, ОбщиеПеременные, РодительСвойства = Неопределено)
	СвойствоСсылка = Справочники.Свойства.НайтиПоНаименованию(ИмяСвойства, Истина, РодительСвойства, ОбъектСсылка);
	Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
		СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
		Если СвойствоСсылка.ПометкаУдаления Тогда
			СвойствоОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		Если НЕ ОбщиеПеременные.ЭтоРасширение Тогда
			СвойствоОбъект.Типы.Очистить();
		КонецЕсли;
		УдалитьОбъектИзСписка(СвойствоСсылка, ОбщиеПеременные.СуществующиеСвойства);
	Иначе
		СвойствоОбъект = Справочники.Свойства.СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяСвойства;
		СвойствоОбъект.Владелец = ОбъектСсылка;
		СвойствоОбъект.Синоним = СвойствоОбъект.Наименование;
		Если РодительСвойства <> Неопределено Тогда
			СвойствоОбъект.Родитель = РодительСвойства;
		КонецЕсли;
	КонецЕсли;
	Возврат СвойствоОбъект;
КонецФункции

Функция ТипСтрокойПоКвалификаторам(Квалификаторы, ТЧТипы = Неопределено, ОбщиеПеременные = Неопределено)
	ПростойТипСтрокой = "";
	ИмяТипа = "";
	Если Квалификаторы.Свойство("КвалификаторыДаты_Состав") Тогда
		ИмяТипа = "Дата";
		ПростойТипСтрокой = "Дата";
	ИначеЕсли Квалификаторы.Свойство("КвалификаторыСтроки_Длина") Тогда
		ИмяТипа = "Строка";
		ПростойТипСтрокой = "Строка ";
		Если Квалификаторы.Свойство("КвалификаторыСтроки_Фиксированная")
			И Квалификаторы.КвалификаторыСтроки_Фиксированная Тогда
			ПростойТипСтрокой = ПростойТипСтрокой + "Ф";
		Иначе
			ПростойТипСтрокой = ПростойТипСтрокой + "П";
		КонецЕсли;
		ПростойТипСтрокой = ПростойТипСтрокой + "("  + Квалификаторы.КвалификаторыСтроки_Длина + ")";
	ИначеЕсли Квалификаторы.Свойство("КвалификаторыЧисла_Длина") Тогда
		ИмяТипа = "Число";
		ПростойТипСтрокой = "Число (" + Квалификаторы.КвалификаторыЧисла_Длина;
		Если Квалификаторы.Свойство("КвалификаторыЧисла_Точность") Тогда
			ПростойТипСтрокой = ПростойТипСтрокой + "," + Квалификаторы.КвалификаторыЧисла_Точность + ")";
		Иначе
			ПростойТипСтрокой = ПростойТипСтрокой + ")";
		КонецЕсли;
	ИначеЕсли Квалификаторы.Свойство("КвалификаторыЧисла_Неотрицательное") Тогда
		ИмяТипа = "Число";
		ПростойТипСтрокой = "Число";
	КонецЕсли;
	Если ИмяТипа = "" Тогда
		Возврат "";
	КонецЕсли;
	Если ТЧТипы <> Неопределено Тогда
		ТипСсылка = Неопределено;
		ОбщиеПеременные.ПростыеТипы.Свойство(ИмяТипа, ТипСсылка);
		Если ТипСсылка <> Неопределено Тогда
			СтрокаТип = ТЧТипы.Добавить();
			СтрокаТип.Тип = ТипСсылка;
		КонецЕсли;
	КонецЕсли;
	Возврат ПростойТипСтрокой;
КонецФункции

Процедура ПривязатьБизнесПроцессКЗадаче(ПолноеИмяЗадачи, БизнесПроцессСсылка, ОбщиеПеременные)
	ПозТочки = СтрНайти(ПолноеИмяЗадачи, ".");
	Если ПозТочки = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяЗадачи = "ЗадачаСсылка." + Сред(ПолноеИмяЗадачи, ПозТочки + 1);
	ЗадачаСсылка = Справочники.Объекты.НайтиПоНаименованию(ИмяЗадачи, Истина,,ОбщиеПеременные.Конфигурация);
	СвойствоБП = Справочники.Свойства.НайтиПоНаименованию("БизнесПроцесс", Истина,,ЗадачаСсылка);
	Если НЕ ЗначениеЗаполнено(СвойствоБП) Тогда
		ДобавитьПредопределенноеСвойство("БизнесПроцесс", ЗадачаСсылка, Перечисления.ВидыСвойств.Свойство, ОбщиеПеременные);
		СвойствоБП = Справочники.Свойства.НайтиПоНаименованию("БизнесПроцесс", Истина,,ЗадачаСсылка);
	КонецЕсли;
	ТекСвойствоБП = СвойствоБП.ПолучитьОбъект();
		
	ТекСвойствоБП.ТипыСтрокой = СокрЛП(БизнесПроцессСсылка);
	ТекТип = ТекСвойствоБП.Типы.Добавить();
	ТекТип.Тип = БизнесПроцессСсылка;
	ТекСвойствоБП.Записать();
КонецПроцедуры

Процедура ОбработатьКонстанты(ОбщиеПеременные)
	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "\Constants\", ".xml", ОбщиеПеременные);
	Иначе
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "src\Constants\", ".mdo", ОбщиеПеременные);
	КонецЕсли;
	Если ВложенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//+КД3
	КД3_ЗагрузкаМетаданных.ИнициализироватьПрогресс(ОбщиеПеременные, ВложенныеФайлы.Количество());
	//-КД3
	// Поиск / создание объекта.
	ТекущийОбъект = Справочники.Объекты.НайтиПоНаименованию("КонстантыНабор", Истина,,ОбщиеПеременные.Конфигурация);
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект) Тогда
		ОбъектКонстанты = Справочники.Объекты.СоздатьЭлемент();
		ОбъектКонстанты.Наименование = "КонстантыНабор";
		ОбъектКонстанты.Имя = "КонстантыНабор";
		ОбъектКонстанты.Синоним = "Набор констант";
		ОбъектКонстанты.Владелец = ОбщиеПеременные.Конфигурация;
		ОбъектКонстанты.Тип = Перечисления.ТипыОбъектов.НаборКонстант;
		ОбъектКонстанты.Записать();
		ТекущийОбъект = ОбъектКонстанты.Ссылка;
	КонецЕсли;
	Для Каждого ВложенныйФайл Из ВложенныеФайлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВложенныйФайл.ТекущееИмяФайла);
		Если ОбщиеПеременные.ИсточникДанных = 0 Тогда 
			ЧтениеXML.Прочитать(); // MetaDataObject
			ЧтениеXML.Прочитать(); // Constant
			УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid");
			ЧтениеXML.Прочитать(); // InternalInfo
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать(); // Properties
		Иначе
			ЧтениеXML.Прочитать(); // mdclass
			УникальныйИдентификатор = одАтрибут(ЧтениеXML, "uuid");
		КонецЕсли;
		ТекОбъект = Неопределено;
		ТекТипыСвойства = Новый Массив;
		Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
			// Попытка найти свойство по УИДу
			ТекСсылка = Справочники.Свойства.НайтиПоРеквизиту("Идентификатор", УникальныйИдентификатор, , ТекущийОбъект);
			Если ЗначениеЗаполнено(ТекСсылка) Тогда
				ТекОбъект = ТекСсылка.ПолучитьОбъект();
				Если ТекОбъект.ПометкаУдаления Тогда
					ТекОбъект.ПометкаУдаления = Ложь;
					Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
						ТекОбъект.Записать();
					КонецЕсли;
				Иначе
					УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеСвойства);
				КонецЕсли;
				Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
					ЧтениеXML.Закрыть();
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Чтение блока Properties - заполнение реквизитов Объекта.
		// Также здесь читаются некоторые параметры свойств.
		Пока НЕ ((ЧтениеXML.Имя = "Properties" ИЛИ СтрНайти(ЧтениеXML.Имя, "mdclass") > 0) И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента)  Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекИмяУзла = НРег(ЧтениеXML.Имя);
				Если ТекИмяУзла = "name" Тогда
					Имя = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
					// Не нашли объект по УИДу либо не задан УИД.
					Если ТекОбъект = Неопределено Тогда
						ТекСсылка = Справочники.Свойства.НайтиПоНаименованию(Имя, Истина, , ТекущийОбъект);
						Если НЕ ЗначениеЗаполнено(ТекСсылка)
							ИЛИ (ЗначениеЗаполнено(УникальныйИдентификатор)
							И ЗначениеЗаполнено(ТекСсылка.Идентификатор)
							И ТекСсылка.Идентификатор <> УникальныйИдентификатор
							И НЕ ОбщиеПеременные.ЭтоРасширение) Тогда
							ТекОбъект = Справочники.Свойства.СоздатьЭлемент();
							ТекОбъект.Наименование = Имя;
							ТекОбъект.Идентификатор = УникальныйИдентификатор;
							ТекОбъект.Владелец = ТекущийОбъект;
							ТекОбъект.Вид = Перечисления.ВидыСвойств.Реквизит;
						Иначе
							ТекОбъект = ТекСсылка.ПолучитьОбъект();
							ТекОбъект.Идентификатор = УникальныйИдентификатор;
							Если ТекОбъект.ПометкаУдаления Тогда
								ТекОбъект.ПометкаУдаления = Ложь;
								Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
									ТекОбъект.Записать();
								КонецЕсли;
							Иначе
								УдалитьОбъектИзСписка(ТекСсылка, ОбщиеПеременные.СуществующиеСвойства);
							КонецЕсли;
							Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
								ЧтениеXML.Закрыть();
								Возврат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЧтениеXML.Имя = "synonym" Тогда
					ТекОбъект.Синоним = ПрочитатьСиноним(ЧтениеXML);
				ИначеЕсли ЧтениеXML.Имя = "comment" Тогда
					ТекОбъект.Комментарий = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ИначеЕсли НРег(ЧтениеXML.Имя) = "type" Тогда
					Квалификаторы = Новый Структура;
					ПростойТип = "";
					ПрочитатьТипы(ЧтениеXML, ТекТипыСвойства, ПростойТип, Квалификаторы);
					Для Каждого Квалификатор Из Квалификаторы Цикл
						ТекОбъект[Квалификатор.Ключ] = Квалификатор.Значение;
					КонецЦикла;
					Если ПростойТип <> "" Тогда
						ЗаполнитьПростойТипСвойства(ОбщиеПеременные, ТекОбъект, ПростойТип, ТекТипыСвойства);
					КонецЕсли;
				Иначе
					ЧтениеXML.Прочитать();
				КонецЕсли;
			Иначе
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
		ТекОбъект.Записать();
		ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекОбъект.Ссылка, ТекТипыСвойства);
		ЧтениеXML.Закрыть();
	КонецЦикла;  // Для Каждого ВложенныйФайл Из ВложенныеФайлы Цикл
КонецПроцедуры

Процедура ОбработатьОпределяемыеТипы(ОбщиеПеременные)
	ОбщиеПеременные.Вставить("ОпределяемыеТипы", Новый Структура);

	Если ОбщиеПеременные.ИсточникДанных = 0 Тогда
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "\DefinedTypes\", ".xml", ОбщиеПеременные);
	Иначе
		ВложенныеФайлы = НайтиПомещенныеФайлыПоМаске(ОбщиеПеременные.ПомещенныеФайлы, "src\DefinedTypes\", ".mdo", ОбщиеПеременные);
	КонецЕсли;
	Если ВложенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОпределяемыеТипы = Новый Структура;
	Для Каждого ВложенныйФайл Из ВложенныеФайлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВложенныйФайл.ТекущееИмяФайла);
		Если ОбщиеПеременные.ИсточникДанных = 0 Тогда 
			ЧтениеXML.Прочитать(); // MetaDataObject
			ЧтениеXML.Прочитать(); // DefinedType
			ЧтениеXML.Прочитать(); // InternalInfo
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать(); // Properties
		Иначе
			ЧтениеXML.Прочитать(); // mdclass
			ЧтениеXML.Прочитать(); // producedTypes
			ЧтениеXML.Пропустить();
			ЧтениеXML.Прочитать(); // Properties
		КонецЕсли;
		ИмяТипа = "";
		ВложенныеТипы = Новый Массив;
		Пока НЕ ((ЧтениеXML.Имя = "Properties" ИЛИ СтрНайти(ЧтениеXML.Имя, "mdclass") > 0) И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента)  Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекИмяУзла = НРег(ЧтениеXML.Имя);
				Если ТекИмяУзла = "name" Тогда
					ИмяТипа = ПрочитатьXML(ЧтениеXML, Тип("Строка"));
				ИначеЕсли ТекИмяУзла = "type" Тогда
					Квалификаторы = Новый Структура;
					ПростойТип = "";
					ПрочитатьТипы(ЧтениеXML, ВложенныеТипы, ПростойТип, Квалификаторы);
					Если ВложенныеТипы.Количество() > 0 Тогда
						ВложенныеТипыПреобразованные = Новый Массив;
						Для Каждого ТекТип Из ВложенныеТипы Цикл
							Если СтрНайти(ТекТип, ".") = 0 Тогда
								// Поиск простого типа.
								ТипСсылка = Неопределено;
								ОбщиеПеременные.ПростыеТипы.Свойство(ТекТип, ТипСсылка);
								Если ТипСсылка <> Неопределено Тогда
									ВложенныеТипыПреобразованные.Добавить(ТипСсылка);
								КонецЕсли;
							Иначе
								// Ссылочный тип.
								РодительОбъекта = "";
								ПолноеИмяОбъекта = ПреобразоватьИмяТипаВИмяОбъекта(ТекТип, РодительОбъекта, ОбщиеПеременные);
								Если ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
									ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ПолноеИмяОбъекта, Истина, РодительОбъекта,ОбщиеПеременные.Конфигурация);
									Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
										ВложенныеТипыПреобразованные.Добавить(ОбъектСсылка);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ВложенныеТипыПреобразованные.Количество() > 0 Тогда
							ОпределяемыеТипы.Вставить(ИмяТипа, ВложенныеТипыПреобразованные);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ЧтениеXML.Прочитать();
				КонецЕсли;
			Иначе 			
				ЧтениеXML.Прочитать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ОбщиеПеременные.Вставить("ОпределяемыеТипы", ОпределяемыеТипы);
КонецПроцедуры


Функция ПреобразоватьИмяТипаВИмяОбъекта(ТипСвойства, РодительОбъекта, ОбщиеПеременные)
	ПозТочки = СтрНайти(ТипСвойства, ".");
	Если ПозТочки = 0 Тогда
		Возврат "";
	КонецЕсли;
	ИмяРодителя = "";
	ПрефиксИмени = "";
	Часть1 = Лев(ТипСвойства, ПозТочки - 1);
	Часть2 = Сред(ТипСвойства, ПозТочки + 1);
	Если СтрНайти(Часть1, "Catalog") > 0 Тогда
		ИмяРодителя = "Справочники";
		ПрефиксИмени = "СправочникСсылка";
	ИначеЕсли СтрНайти(Часть1, "Document") > 0 Тогда
		ИмяРодителя = "Документы";
		ПрефиксИмени = "ДокументСсылка";
	ИначеЕсли СтрНайти(Часть1, "Task") > 0 Тогда
		ИмяРодителя = "Задачи";
		ПрефиксИмени = "ЗадачаСсылка";
	ИначеЕсли СтрНайти(Часть1, "Enum") > 0 Тогда
		ИмяРодителя = "Перечисления";
		ПрефиксИмени = "ПеречислениеСсылка";
	ИначеЕсли СтрНайти(Часть1, "BusinessProcess") > 0 Тогда
		ИмяРодителя = "БизнесПроцессы";
		ПрефиксИмени = "БизнесПроцессСсылка";
	ИначеЕсли СтрНайти(Часть1, "ChartOfAccounts") > 0 Тогда
		ИмяРодителя = "ПланыСчетов";
		ПрефиксИмени = "ПланСчетовСсылка";
	ИначеЕсли СтрНайти(Часть1, "ChartsOfCalculation") > 0
		Или СтрНайти(Часть1, "ChartOfCalculation") > 0 Тогда
		ИмяРодителя = "ПланыВидовРасчета";
		ПрефиксИмени = "ПланВидовРасчетаСсылка";
	ИначеЕсли СтрНайти(Часть1, "ChartsOfCharacteristic") > 0
		Или СтрНайти(Часть1, "ChartOfCharacteristicTypes") > 0 Тогда
		ИмяРодителя = "ПланыВидовХарактеристик";
		ПрефиксИмени = "ПланВидовХарактеристикСсылка";
	ИначеЕсли СтрНайти(Часть1, "AccountingRegister") > 0 Тогда
		ИмяРодителя = "РегистрыБухгалтерии";
		ПрефиксИмени = "РегистрБухгалтерииЗапись";
	ИначеЕсли СтрНайти(Часть1, "AccumulationRegister") > 0 Тогда
		ИмяРодителя = "РегистрыНакопления";
		ПрефиксИмени = "РегистрНакопленияЗапись";
	ИначеЕсли СтрНайти(Часть1, "CalculationRegister") > 0 Тогда
		ИмяРодителя = "РегистрыРасчета";
		ПрефиксИмени = "РегистрРасчетаЗапись";
	ИначеЕсли СтрНайти(Часть1, "InformationRegister") > 0 Тогда
		ИмяРодителя = "РегистрыСведений";
		ПрефиксИмени = "РегистрСведенийЗапись";
	КонецЕсли;
	Если ПрефиксИмени = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Если ИмяРодителя <> "" Тогда
		РодительОбъекта = Справочники.Объекты.НайтиПоНаименованию(ИмяРодителя, Истина,, ОбщиеПеременные.Конфигурация);
	КонецЕсли;
	Возврат "" + ПрефиксИмени + "." + Часть2;
КонецФункции

Процедура УдалитьОбъектИзСписка(ОбъектСсылка, СуществующиеОбъекты)
	Если СуществующиеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	 РезультатПоиска = СуществующиеОбъекты.Найти(ОбъектСсылка);
	 Пока РезультатПоиска <> Неопределено Цикл
		 СуществующиеОбъекты.Удалить(РезультатПоиска);
		 РезультатПоиска = СуществующиеОбъекты.Найти(ОбъектСсылка);
	 КонецЦикла;	 
КонецПроцедуры

Процедура НайтиСоздатьСвойстваНаборДвижений(ИмяДокумента, ДанныеРегистра, ИзмеренияРегистра, ОбщиеПеременные)
	ОбъектСсылка = Справочники.Объекты.НайтиПоНаименованию(ИмяДокумента, Истина, ,ОбщиеПеременные.Конфигурация);
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаДляПоиска = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ПометкаУдаления
	|ИЗ Справочник.Свойства
	|ГДЕ Владелец = &Владелец И Наименование = &Наименование 
	|	И Вид = &Вид И ЭтоГруппа = &ЭтоГруппа И Родитель = &Родитель";
	// Поиск / создание группы свойств.
	ИмяГруппыСвойств = "{" + ДанныеРегистра.Имя + "}";
	Если ДанныеРегистра.Тип = Перечисления.ТипыОбъектов.РегистрБухгалтерии Тогда
		ВидГруппыСвойств = Перечисления.ВидыСвойств.НаборДвиженийРегистраБухгалтерии;
	ИначеЕсли ДанныеРегистра.Тип = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		ВидГруппыСвойств = Перечисления.ВидыСвойств.НаборДвиженийРегистраНакопления;
	ИначеЕсли ДанныеРегистра.Тип = Перечисления.ТипыОбъектов.РегистрРасчета Тогда
		ВидГруппыСвойств = Перечисления.ВидыСвойств.НаборДвиженийРегистраРасчета;
	ИначеЕсли ДанныеРегистра.Тип = Перечисления.ТипыОбъектов.РегистрСведений Тогда
		ВидГруппыСвойств = Перечисления.ВидыСвойств.НаборДвиженийРегистраСведений;
	Иначе
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляПоиска;
	Запрос.УстановитьПараметр("Владелец", ОбъектСсылка);
	Запрос.УстановитьПараметр("Наименование", ИмяГруппыСвойств);
	Запрос.УстановитьПараметр("Вид", ВидГруппыСвойств);
	Запрос.УстановитьПараметр("ЭтоГруппа", Истина);
	Запрос.УстановитьПараметр("Родитель", Справочники.Свойства.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			ТекГруппа = Выборка.ссылка.ПолучитьОбъект();
			ТекГруппа.ПометкаУдаления = Ложь;
			ТекГруппа.ОбменДанными.Загрузка = Истина;
			ТекГруппа.Записать();
		КонецЕсли;
		РодительСвойств = Выборка.Ссылка;
		УдалитьОбъектИзСписка(Выборка.Ссылка, ОбщиеПеременные.СуществующиеСвойства);
	Иначе
		ТекГруппа = Справочники.Свойства.СоздатьГруппу();
		ТекГруппа.Владелец = ОбъектСсылка;
		ТекГруппа.Вид = ВидГруппыСвойств;
		ТекГруппа.Наименование = ИмяГруппыСвойств;
		ТекГруппа.ОбменДанными.Загрузка = Истина;
		ТекГруппа.Записать();
		РодительСвойств = ТекГруппа.Ссылка;
	КонецЕсли;
	Для Каждого Строка Из ИзмеренияРегистра Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляПоиска;
		// Для элемента вид не важен, может быть переопределен.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Вид = &Вид", "");
		Запрос.УстановитьПараметр("Владелец", ОбъектСсылка);
		Запрос.УстановитьПараметр("Наименование", Строка.Наименование);
		Запрос.УстановитьПараметр("ЭтоГруппа", Ложь);
		Запрос.УстановитьПараметр("Родитель", РодительСвойств);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекСвойство = Выборка.ссылка.ПолучитьОбъект();
			Если Выборка.ПометкаУдаления Тогда
				ТекСвойство.ПометкаУдаления = Ложь;
				Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
					ТекСвойство.Записать();
				КонецЕсли;
			КонецЕсли;
			УдалитьОбъектИзСписка(Выборка.Ссылка, ОбщиеПеременные.СуществующиеСвойства);
			Если ОбщиеПеременные.ТолькоДобавлятьНовые Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ТекСвойство = Справочники.Свойства.СоздатьЭлемент();
			ТекСвойство.Владелец = ОбъектСсылка;
			ТекСвойство.Родитель = РодительСвойств;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекСвойство, Строка,,"Типы");
		ТекСвойство.Типы.Очистить(); 
		Если Строка.Наименование = "Регистратор" Тогда  
			НовТип = ТекСвойство.Типы.Добавить();
			НовТип.Тип = ОбъектСсылка;
			ТекСвойство.ТипыСтрокой = ИмяДокумента;
		Иначе
			Для Каждого СтрТип Из Строка.Типы Цикл
				НовТип = ТекСвойство.Типы.Добавить();
				ЗаполнитьЗначенияСвойств(НовТип, СтрТип);
			КонецЦикла;
		КонецЕсли;
		ТекСвойство.ОбменДанными.Загрузка = Истина;
		ТекСвойство.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьСиноним(ЧтениеXML)
	ЧтениеXML.Прочитать(); // v8:item/key либо конец узла Синоним.
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		// Синоним пуст.
		Возврат "";
	КонецЕсли;
	ЧтениеXML.Прочитать(); // v8:lang/key
	ЧтениеXML.Пропустить();
	ЧтениеXML.Прочитать(); // v8:content/value
	Возврат ПрочитатьXML(ЧтениеXML, Тип("Строка"));
КонецФункции

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого происходит чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Знач Тип = Неопределено)
	Если Тип = Неопределено Тогда
		Тип = Тип("Строка");
	КонецЕсли;

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		Если ТипУзла = ТипУзлаXML.Текст Тогда
			Значение = СокрП(Объект.Значение);
		ИначеЕсли (ИмяУзла = Имя) И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			Прервать;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат XMLЗначение(Тип, Значение);	
	
КонецФункции // одЗначениеЭлемента() 

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута. Если не передан, значит Строка
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Имя, Знач Тип = Неопределено)
	Если Тип = Неопределено Тогда
		Тип = Тип("Строка");
	КонецЕсли;
	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);
	Иначе
		Если Тип = Тип("Строка") Тогда  // Строка
			Возврат ""; 
		ИначеЕсли Тип = Тип("Булево") Тогда
			Возврат Ложь;
		ИначеЕсли Тип = Тип("Число") Тогда
			Возврат 0;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Возврат Дата("01.01.0001 00:00:00");
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // одАтрибут() 

Процедура ЗаписатьСообщениеОбОшибке(ОбщиеПеременные, ТекстСообщения)
	СообщениеОшибка = Новый СообщениеПользователю;
	СообщениеОшибка.Текст = ТекстСообщения;
	СообщениеОшибка.Сообщить();
	Если ОбщиеПеременные.АдресВременногоХранилища <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Ложь, ОбщиеПеременные.АдресВременногоХранилища);
	КонецЕсли;
	ОбщиеПеременные.Отказ = Истина;	
КонецПроцедуры

Функция НайтиПомещенныеФайлыПоИмени(ПомещенныеФайлы, ИмяФайла, ОбщиеПеременные)
	Результат = "";
	Для Каждого ТекФайл Из ПомещенныеФайлы Цикл
		Если ТекФайл.ПолноеИмя = ИмяФайла 
			Или СтрНайти(ТекФайл.ПолноеИмя, "\" + ИмяФайла) > 0 Тогда
			Результат = ТекФайл.Хранение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция НайтиПомещенныеФайлыПоМаске(ПомещенныеФайлы, ВложенныйКаталог, РасширениеФайла, ОбщиеПеременные)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИсходноеИмяФайла");
	Результат.Колонки.Добавить("ТекущееИмяФайла");
	
	ИсключитьВложенныеКаталоги = (СтрНайти(РасширениеФайла, "mdo") = 0);

	Для Каждого ТекФайл Из ПомещенныеФайлы Цикл
		Если ТекФайл.ЭтоРасширение <> ОбщиеПеременные.ЭтоРасширение Тогда
			Продолжить;
		ИначеЕсли ОбщиеПеременные.ЭтоРасширение Тогда
			ЭтоНаше = СтрНайти(ТекФайл.ПолноеИмя, ОбщиеПеременные.ПутьКФайламРасширения) > 0;
			Если НЕ ЭтоНаше Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ПозицияКаталога = СтрНайти(ТекФайл.ПолноеИмя, ВложенныйКаталог, НаправлениеПоиска.СКонца);
		ПозицияРасширения = СтрНайти(ТекФайл.ПолноеИмя, РасширениеФайла);
		Если ПозицияКаталога > 0
			И ПозицияРасширения > 0 Тогда
			Если ИсключитьВложенныеКаталоги Тогда
				// Исключаем вариант с вложенными каталогами.
				ПозицияКонцаКаталога = ПозицияКаталога + СтрДлина(ВложенныйКаталог) + 1;
				КраткоеИмяФайла = Сред(ТекФайл.ПолноеИмя, ПозицияКонцаКаталога, ПозицияРасширения);
				ЭтоПодкаталог = СтрНайти(КраткоеИмяФайла, "/") > 0 Или СтрНайти(КраткоеИмяФайла, "\") > 0;
				Если ЭтоПодкаталог Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтрока = Результат.Добавить();
			НовСтрока.ИсходноеИмяФайла = ТекФайл.ПолноеИмя;
			НовСтрока.ТекущееИмяФайла = ТекФайл.Хранение;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьПростойТипСвойства(ОбщиеПеременные, ТекСвойство, ПростойТип, ТекТипыСвойства)
	ПроверятьНаличие = Ложь;
	Если ОбщиеПеременные.ЭтоРасширение Тогда
		Если  ТекСвойство.Типы.Количество() > 0 Тогда
			ПроверятьНаличие = Истина;
		КонецЕсли;
	Иначе
		ТекСвойство.Типы.Очистить();
		ТекСвойство.ТипыСтрокой = ПростойТип;
	КонецЕсли;
	Для Каждого ТекТип Из ТекТипыСвойства Цикл
		ТипСсылка = Неопределено;
		ОбщиеПеременные.ПростыеТипы.Свойство(ТекТип, ТипСсылка);
		Если ТипСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверятьНаличие Тогда
			Если ТекСвойство.Типы.Найти(ТипСсылка, "Тип") <> Неопределено Тогда
				Продолжить;
			Иначе
				ТекСвойство.ТипыСтрокой = ТекСвойство.ТипыСтрокой + ?(ЗначениеЗаполнено(ТекСвойство.ТипыСтрокой), ",", "") + ПростойТип;
			КонецЕсли;
		КонецЕсли;
		СтрокаТип = ТекСвойство.Типы.Добавить();
		СтрокаТип.Тип = ТипСсылка;
	КонецЦикла;
	ТекТипыСвойства.Очистить(); 
КонецПроцедуры

Процедура ДобавитьТипВОтложенноеЗаполнение(ОбщиеПеременные, ТекСвойствоСсылка, ТекТипыСвойства)
	ТипыСвойстваЗагруженные = Неопределено;
	Если ТекТипыСвойства.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ОбщиеПеременные.ЭтоРасширение Тогда
		ТипыСвойстваЗагруженные = ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств.Получить(ТекСвойствоСсылка);
	КонецЕсли;
	Если ТипыСвойстваЗагруженные = Неопределено Тогда
		ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств.Вставить(ТекСвойствоСсылка, ТекТипыСвойства);
		Возврат;
	КонецЕсли;
	ЕстьДополнения = Ложь;
	Для Каждого ТекТип Из ТекТипыСвойства Цикл
		Если ТипыСвойстваЗагруженные.Найти(ТекТип) = Неопределено Тогда
			ТипыСвойстваЗагруженные.Добавить(ТекТип);
			ЕстьДополнения = Истина;
		КонецЕсли;
	КонецЦикла;
	Если  ЕстьДополнения Тогда
		ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств.Вставить(ТекСвойствоСсылка, ТипыСвойстваЗагруженные);
	КонецЕсли;
КонецПроцедуры

Процедура КД3_ДобавитьГруппуКОбработке(ГруппыОбъектов, ИмяГруппы, ИмяКаталога, ПрефиксИменЭлементов, ТипОбъекта)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяГруппы", ИмяГруппы);
	ПараметрыЗадания.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыЗадания.Вставить("ПрефиксИменЭлементов", ПрефиксИменЭлементов);
	ПараметрыЗадания.Вставить("ТипОбъекта", ТипОбъекта);
	
	СтрокаГруппы = ГруппыОбъектов.Добавить();
	СтрокаГруппы.ПараметрыЗадания = ПараметрыЗадания;
	
КонецПроцедуры

Процедура КД3_ПолучитьСуществующиеСсылки(ОбщиеПеременные, ТипОбъекта, ПолучатьСвойстваИЗначения = Ложь)
	
	Если ОбщиеПеременные.ЗагрузитьНовую Тогда
		ОбщиеПеременные.Вставить("СуществующиеОбъекты", Новый Массив);
		Если ПолучатьСвойстваИЗначения Тогда
			ОбщиеПеременные.Вставить("СуществующиеСвойства", Новый Массив);
			ОбщиеПеременные.Вставить("СуществующиеЗначения", Новый Массив);
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Объекты КАК Объекты
		|ГДЕ
		|	Объекты.Владелец = &Конфигурация
		|	И НЕ Объекты.ПометкаУдаления
		|	И НЕ Объекты.ЭтоГруппа
		|	И Объекты.Родитель <> ЗНАЧЕНИЕ(Справочник.Объекты.ПустаяСсылка)";
		Если ТипОбъекта <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И Объекты.Тип = &ТипОбъекта";
		КонецЕсли;
		Если ПолучатьСвойстваИЗначения Тогда
			ТекстЗапроса = ТекстЗапроса +
			";
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Свойства.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Свойства КАК Свойства
			|ГДЕ
			|	Свойства.Владелец.Владелец = &Конфигурация
			|	И НЕ Свойства.ПометкаУдаления";
			Если ТипОбъекта <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И Свойства.Владелец.Тип = &ТипОбъекта";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
			";
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Значения.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Значения КАК Значения
			|ГДЕ
			|	Значения.Владелец.Владелец = &Конфигурация
			|	И НЕ Значения.ПометкаУдаления";
			Если ТипОбъекта <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И Значения.Владелец.Тип = &ТипОбъекта";
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Конфигурация", ОбщиеПеременные.Конфигурация);
		
		Если ТипЗнч(ТипОбъекта) = Тип("Структура") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Тип = &ТипОбъекта", ".Тип В (&ТипОбъекта)");
			МассивТипов = Новый Массив;
			Для Каждого КлючИЗначение Из ТипОбъекта Цикл
				МассивТипов.Добавить(Перечисления.ТипыОбъектов[КлючИЗначение.Ключ]);
			КонецЦикла;
			Запрос.УстановитьПараметр("ТипОбъекта", МассивТипов);
		ИначеЕсли ТипОбъекта <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ОбщиеПеременные.Вставить("СуществующиеОбъекты", РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Если ПолучатьСвойстваИЗначения Тогда
			ОбщиеПеременные.Вставить("СуществующиеСвойства", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
			ОбщиеПеременные.Вставить("СуществующиеЗначения", РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КД3_УдалитьОтсутствующиеСсылки(ОбщиеПеременные, СуществующиеОбъекты)
	
	Для Каждого Ссылка Из СуществующиеОбъекты Цикл
		//+КД3
		КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, "", 1);
		//-КД3
		КУдалению = Ссылка.ПолучитьОбъект();
		КУдалению.ПометкаУдаления = Истина;
		КУдалению.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура КД3_ОбработатьГруппыОбъектовМногопоточно(ОбщиеПеременные, ГруппыОбъектов)
	
	//+КД3
	ПрогрессЗаголовок = "Обработка групп объектов";
	КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ПрогрессЗаголовок, 0);
	//-КД3
	
	КоличествоПотоков = ОбщиеПеременные.КД3_КоличествоПотоков;
	Если КоличествоПотоков = 1 Тогда
		// Последовательная обработка в текущем фоновом задании как и в обычной обработке
		Для Каждого ГруппаОбъектов Из ГруппыОбъектов Цикл
			ПараметрыЗадания = ГруппаОбъектов.ПараметрыЗадания;
			ПараметрыЗадания.Вставить("ОбщиеПеременные", ОбщиеПеременные);
			ПараметрыЗадания.Вставить("Поток", 1); // номер индикатора для вывода прогресса группы
			
			// Инициализация общего прогресса потока группы
			КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ПараметрыЗадания.ИмяГруппы, ПараметрыЗадания.Поток, 0);
			
			КД3_ОбработатьГруппуОбъектовМногопоточно(ПараметрыЗадания, Неопределено);
			
			// Увеличение общего прогресса после обработки очередной группы
			КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ПрогрессЗаголовок, 0);
		КонецЦикла;
	Иначе
		КлючКонфигурации = XMLСтрока(ОбщиеПеременные.Конфигурация);
		Таймаут = ?(ОбщиеПеременные.Свойство("КД3_СообщатьПрогресс"), 5, 60);
		
		Задания = Новый Массив;
		
		// Подготовка перечня потоков для отображения прогресса на клиенте
		СвободныеПотоки = Новый Массив;
		Для Ном = 1 По КоличествоПотоков Цикл
			СвободныеПотоки.Добавить(Ном);
		КонецЦикла;
		
		ЕстьНеобработанныеГруппы = Истина;
		Пока Истина Цикл
			
			Пока ЕстьНеобработанныеГруппы И Задания.Количество() < КоличествоПотоков Цикл
				// Получение очередной не обработанной группы
				ГруппаОбъектов = ГруппыОбъектов.Найти(Неопределено, "ИД");
				Если ГруппаОбъектов = Неопределено Тогда
					ЕстьНеобработанныеГруппы = Ложь;
					Прервать; // Все группы обрабатываются
				КонецЕсли;
				ГруппаОбъектов.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				
				ПараметрыЗадания = ГруппаОбъектов.ПараметрыЗадания;
				ПараметрыЗадания.Вставить("Поток", СвободныеПотоки[0]);
				ПараметрыЗадания.Вставить("ОбщиеПеременные", ОбщиеПеременные);
				
				ПараметрыМетода = Новый Массив;
				ПараметрыМетода.Добавить(ПараметрыЗадания);
				ПараметрыМетода.Добавить(ГруппаОбъектов.АдресРезультата);
				
				ИмяМетодаЗадания = "КД3_ЗагрузкаМетаданных.ОбработатьГруппуОбъектовМногопоточно";
				НаименованиеЗадания = СтрШаблон("Загрузка %1 для %2", КлючКонфигурации, ПараметрыЗадания.ИмяГруппы);
				НовоеЗадание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыМетода, , НаименованиеЗадания);
				Задания.Добавить(НовоеЗадание);
				
				СвободныеПотоки.Удалить(0);
				ГруппаОбъектов.ИД = НовоеЗадание.УникальныйИдентификатор;
				
				КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ПараметрыЗадания.ИмяГруппы, ПараметрыЗадания.Поток, 0);
			КонецЦикла;
			
			Задания = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(Задания, Таймаут);
			
			// Проверка завершенных заданий и заданий с ошибками
			ОписаниеОшибки = Неопределено;
			Индекс = Задания.Количество() - 1;
			Пока Индекс >= 0 Цикл
				Задание = Задания[Индекс];
				Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					// Увеличение общего прогресса после обработки очередной группы
					КД3_ЗагрузкаМетаданных.СообщитьПрогресс(ОбщиеПеременные, ПрогрессЗаголовок, 0);
					
					ГруппаОбъектов = ГруппыОбъектов.Найти(Задание.УникальныйИдентификатор, "ИД");
					СвободныеПотоки.Добавить(ГруппаОбъектов.ПараметрыЗадания.Поток);
					
					Задания.Удалить(Индекс);
				ИначеЕсли Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
					// Задание завершено аварийно или отменено
					ОписаниеОшибки = ?(Задание.ИнформацияОбОшибке = Неопределено, "", ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
					Прервать;
				КонецЕсли;
				Индекс = Индекс - 1;
				// Получение последнего сообщения прогресса задания и передача его на клиент
				СообщениеПрогресса = Неопределено;
				Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					Если СтрНачинаетсяС(Сообщение.Текст, "{КД3}") Тогда
						СообщениеПрогресса = Сообщение;
					КонецЕсли;
				КонецЦикла;
				Если СообщениеПрогресса <> Неопределено Тогда
					СообщениеПрогресса.Сообщить();
				КонецЕсли;
			КонецЦикла;
			// В случае ошибки в одном из заданий завершение всех активных заданий
			Если ОписаниеОшибки <> Неопределено Тогда
				Для Каждого Задание Из Задания Цикл
					Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
						Задание.Отменить();
					КонецЕсли;
				КонецЦикла;
				ВызватьИсключение "Ошибка при загрузке данных:" + ОписаниеОшибки;
			КонецЕсли;
			Если Задания.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Перенос результата обработки групп объектов в общие коллекции для постобработки
		Для Каждого ГруппаОбъектов Из ГруппыОбъектов Цикл
			Результат = ПолучитьИзВременногоХранилища(ГруппаОбъектов.АдресРезультата);
			Если Результат = Неопределено Тогда
				ВызватьИсключение "Отсутствует результат для группы: " + ГруппаОбъектов.ПараметрыЗадания.ИмяГруппы;
			КонецЕсли;
			Для Каждого КлючИЗначение Из Результат Цикл
				ОбщаяКоллекция = ОбщиеПеременные[КлючИЗначение.Ключ];
				Если ОбщаяКоллекция.Количество() = 0 Тогда
					// Полное замещение
					ОбщиеПеременные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					// Добавление в конец коллекции
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
						Для Каждого СтрокаТЗ Из КлючИЗначение.Значение Цикл
							ЗаполнитьЗначенияСвойств(ОбщаяКоллекция .Добавить(), СтрокаТЗ);
						КонецЦикла;
					ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Для Каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
							ОбщаяКоллекция.Добавить( ЭлементМассива);
						КонецЦикла;
					Иначе
						Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение Цикл
							ОбщаяКоллекция.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			УдалитьИзВременногоХранилища(ГруппаОбъектов.АдресРезультата);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура КД3_ОбработатьГруппуОбъектовМногопоточно(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ОбщиеПеременные = ПараметрыЗадания.ОбщиеПеременные;
	// Текущий поток для которого сообщается прогресс
	ОбщиеПеременные.Вставить("КД3_ПрогрессПоток", ПараметрыЗадания.Поток);
	
	Попытка
		Если ПараметрыЗадания.ИмяГруппы = "КД3_ОбщиеМодули" Тогда
			КД3_ЗагрузкаМетаданных.ОбработатьГруппуОбщихМодулей(ОбщиеПеременные, НЕ ОбщиеПеременные.КД3_НастройкиКонфигурации.ЗагружатьИзФайлов);
			Если ОбщиеПеременные.КД3_КоличествоПотоков > 1 Тогда
				ПоместитьВоВременноеХранилище(Новый Структура, АдресРезультата);
			КонецЕсли;
		Иначе
			Если ОбщиеПеременные.КД3_КоличествоПотоков > 1 Тогда
				КД3_ПолучитьСуществующиеСсылки(ОбщиеПеременные, ПараметрыЗадания.ТипОбъекта, Истина);
			КонецЕсли;
			
			Если ПараметрыЗадания.ИмяГруппы = "Константы" Тогда
				ОбработатьКонстанты(ОбщиеПеременные);
			Иначе
				ОбработатьГруппуОбъектов(ОбщиеПеременные, ПараметрыЗадания.ИмяГруппы, ПараметрыЗадания.ИмяКаталога, ПараметрыЗадания.ПрефиксИменЭлементов, ПараметрыЗадания.ТипОбъекта);
			КонецЕсли;
			
			Если ОбщиеПеременные.КД3_КоличествоПотоков > 1 Тогда
				// Передача в основное задание коллекций, которые обрабатываются после создания/обновления всех объектов
				Результат = Новый Структура;
				Результат.Вставить("РегистраторыИРегистры", ОбщиеПеременные.РегистраторыИРегистры);
				Результат.Вставить("ОтложенноеЗаполнениеТиповСвойств", ОбщиеПеременные.ОтложенноеЗаполнениеТиповСвойств);
				Результат.Вставить("СуществующиеОбъекты", ОбщиеПеременные.СуществующиеОбъекты);
				Результат.Вставить("СуществующиеСвойства", ОбщиеПеременные.СуществующиеСвойства);
				Результат.Вставить("СуществующиеЗначения", ОбщиеПеременные.СуществующиеЗначения);
				ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка обработки %1: %2", ПараметрыЗадания.ТипОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации("КД3_ТЕСТ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Конфигурации, ОбщиеПеременные.Конфигурация, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
	Если ОбщиеПеременные.КД3_ИспользоватьКонтекстнуюПодсказку И ОбщиеПеременные.КД3_МестоХраненияИндексов <> 0 Тогда
		// Сохранение индексов метаданных (отчетов, обработок, общих модулей), обработанных в этом потоке
		Если ОбщиеПеременные.Свойство("КД3_Конфигурация") Тогда
			Для Каждого КлючИЗначение Из ОбщиеПеременные.КД3_Конфигурация Цикл
				Если КлючИЗначение.Значение.count > 0 Тогда
					КД3_Метаданные.ИзменитьОписаниеМетаданных(ОбщиеПеременные.Конфигурация, НРег(КлючИЗначение.Ключ), КлючИЗначение.Значение, ОбщиеПеременные.КД3_НастройкиКонфигурации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КД3_ЗагрузкаМетаданных.ЗавершитьПрогресс(ОбщиеПеременные);
	
КонецПроцедуры

Процедура КД3_СохранитьКаталогКонфигурации(ОбщиеПеременные, НастройкиОнфигурации)
	
	КонфигурацияОбъект = ОбщиеПеременные.Конфигурация.ПолучитьОбъект();
	КонфигурацияОбъект.ОбновлятьМетаданныеПоРасписанию = Истина;
	КонфигурацияОбъект.КаталогЗагрузки = ОбщиеПеременные.КаталогЗагрузки;
	Если ОбщиеПеременные.ЕстьРасширения Тогда
		КонфигурацияОбъект.Расширения.Очистить();
		Для Каждого ПутьКФайламРасширения Из ОбщиеПеременные.Расширения Цикл
			КонфигурацияОбъект.Расширения.Добавить().ИмяКаталогаЗагрузки = ПутьКФайламРасширения;
		КонецЦикла;
	КонецЕсли;
	КонфигурацияОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
